name: Daily Integration

on:
  schedule:
    - cron: '0 5 * * *'  # Daily 05:00 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

env:
  GO_VERSION: '1.24.x'
  PULUMI_CLI_VERSION: 'v3.169.0'

jobs:
  integration:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup Pulumi CLI
        uses: pulumi/actions@cc7494be991dba0978f7ffafaf995b0449a0998e # v6.5.0
        with:
          pulumi-version: ${{ env.PULUMI_CLI_VERSION }}
      - name: Run provider tests
        run: |
          go test -count=1 ./provider/...
      - name: Run example tests (if present)
        run: |
          if [ -f examples/go_test.go ]; then go test -count=1 ./examples/...; fi
      - name: Record status
        id: status
        run: echo "ok=true" >> $GITHUB_OUTPUT

  evaluate-consecutive:
    runs-on: ubuntu-latest
    needs: integration
    if: ${{ needs.integration.result == 'failure' }}
    steps:
      - name: Fetch last 5 workflow runs
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        id: scan
        with:
            script: |
              const runs = await github.rest.actions.listWorkflowRuns({owner: context.repo.owner, repo: context.repo.repo, workflow_id: context.workflow, per_page: 5});
              // Count consecutive failures including current
              let count = 0;
              for (const r of runs.data.workflow_runs) {
                if (r.conclusion === 'failure' || r.conclusion === 'cancelled') count++; else break;
              }
              core.setOutput('consecutive', count.toString());
      - name: Open issue if 2 consecutive failures
        if: ${{ steps.scan.outputs.consecutive >= '2' }}
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const title = 'Daily Integration Regressions (2 consecutive)';
            const labelNames = ['platform','canary-failure'];
            for (const name of labelNames) {
              try { await github.rest.issues.getLabel({owner: context.repo.owner, repo: context.repo.repo, name}); } catch {
                await github.rest.issues.createLabel({owner: context.repo.owner, repo: context.repo.repo, name, color: 'B60205'});
              }
            }
            const issues = await github.paginate(github.rest.issues.listForRepo, {owner: context.repo.owner, repo: context.repo.repo, state: 'open', labels: labelNames.join(',')});
            let existing = issues.find(i => i.title === title);
            const bodyLine = `Failure run: ${context.runId} at ${new Date().toISOString()}`;
            if (existing) {
              await github.rest.issues.createComment({owner: context.repo.owner, repo: context.repo.repo, issue_number: existing.number, body: bodyLine});
            } else {
              await github.rest.issues.create({owner: context.repo.owner, repo: context.repo.repo, title, body: bodyLine, labels: labelNames});
            }
