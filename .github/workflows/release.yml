name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
      isPrerelease:
        description: 'Mark this release as a prerelease/draft'
        required: false
        type: boolean
        default: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.setver.outputs.version }}
      is_prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
      version_no_v: ${{ steps.norm.outputs.version_no_v }}
    steps:
      - name: Derive version
        id: setver
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          fi
      - name: Detect prerelease
        id: prerelease
        run: |
          V='${{ steps.setver.outputs.version }}'
          # Consider prerelease if input flag set OR semantic includes '-' qualifier
          if [ "${{ github.event.inputs.isPrerelease }}" = "true" ] || echo "$V" | grep -q '-' ; then
            echo 'is_prerelease=true' >> $GITHUB_OUTPUT
          else
            echo 'is_prerelease=false' >> $GITHUB_OUTPUT
          fi
      - name: Normalize version (strip leading v)
        id: norm
        run: |
          V='${{ steps.setver.outputs.version }}'
          NV=${V#v}
            echo "version_no_v=$NV" >> $GITHUB_OUTPUT

  build:
    needs: setup
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        arch: [amd64, arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Setup Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: '>=3.182.0'
      - name: Build artifacts
        run: BUILD_OS="${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}" BUILD_ARCH='${{ matrix.arch }}' PROVIDER_VERSION=${{ needs.setup.outputs.version_no_v }} make build schema generate build_sdks
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: sdk/nodejs/yarn.lock
      - name: Install Yarn
        run: npm install -g yarn@1.22.22
      - name: Duplicate binary into OS-ARCH folder
        run: |
          OS="${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}"
          ARCH='${{ matrix.arch }}'
          mkdir -p bin/${OS}-${ARCH}
          cp bin/pulumi-resource-deltastream bin/${OS}-${ARCH}/pulumi-resource-deltastream
      - name: Upload provider build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: provider-build-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'darwin' }}-${{ matrix.arch }}
          path: |
            bin/**
            schema.json
            sdk/**
      - name: Upload yarn.lock artifact
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: yarn-lock
          path: sdk/nodejs/yarn.lock

  package:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: provider-build-*
          path: dist/raw
          merge-multiple: true
      - name: Create tarballs & checksums
        run: |
          set -euo pipefail
          VERSION='${{ needs.setup.outputs.version }}'
          mkdir -p dist/pkg
          for d in dist/raw/bin/*-*; do
            [ -d "$d" ] || continue
            base=$(basename "$d")
            OS=${base%-*}
            ARCH=${base#*-}
            work=dist/pkg/work
            mkdir -p "$work"
            cp "$d/pulumi-resource-deltastream" "$work/pulumi-resource-deltastream"
            if [ -f dist/raw/schema.json ]; then cp dist/raw/schema.json "$work/schema.json"; fi
            [ -f LICENSE ] && cp LICENSE "$work/" || true
            [ -f README.md ] && cp README.md "$work/" || true
            tarball="pulumi-resource-deltastream-v${VERSION}-${OS}-${ARCH}.tar.gz"
            tar -czf dist/pkg/${tarball} -C "$work" .
            rm -rf "$work"
          done
          (cd dist/pkg && shasum -a 256 pulumi-resource-deltastream-v*.tar.gz > pulumi-deltastream_${VERSION}_checksums.txt)
          # Copy schema.json standalone
          [ -f dist/raw/schema.json ] && cp dist/raw/schema.json dist/pkg/schema.json || true
      - name: Upload packaged artifacts
        uses: actions/upload-artifact@v4
        with:
          name: provider-packages
          path: dist/pkg/*

  test:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
      - name: Setup Pulumi
        uses: pulumi/actions@v5
        with:
          pulumi-version: '>=3.182.0'
      - name: Download provider build artifacts
        uses: actions/download-artifact@v4
        with:
          name: provider-build-linux-amd64
          path: .
      - name: Restore executable permissions
        run: |
          if ls bin/* 1> /dev/null 2>&1; then chmod +x bin/* || true; fi
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'yarn'
          cache-dependency-path: sdk/nodejs/yarn.lock
      - name: Install Yarn
        run: npm install -g yarn@1.22.22
      - name: Setup credentials
        run: |
          mkdir -p ~/.pulumi-deltastream
          echo "${{ secrets.CI_CREDENTIALS_YAML }}" > examples/credentials.yaml
      - name: Run tests
        run: make install_sdks test

  # publish:
  #   needs: [setup, package, test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Download provider packages
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: provider-packages
  #         path: dist/pkg
  #     - name: Download yarn.lock artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: yarn-lock
  #         path: sdk/nodejs
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'
  #         registry-url: 'https://registry.npmjs.org'
  #         scope: '@deltastream'
  #         cache: 'yarn'
  #         cache-dependency-path: sdk/nodejs/yarn.lock
  #     - name: Install Yarn
  #       run: npm install -g yarn@1.22.22
  #     - name: Publish Node SDK (package publisher)
  #       uses: pulumi/pulumi-package-publisher@v0.0.22
  #       with:
  #         sdk: nodejs
  #         version: ${{ needs.setup.outputs.version_no_v }}
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #     - name: Setup Go for schema-tools & Go SDK publish
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '1.24.x'
  #     - name: Install schema-tools
  #       run: |
  #         go install github.com/pulumi/schema-tools/cmd/schema-tools@latest
  #         echo "$HOME/go/bin" >> $GITHUB_PATH
  #     - name: Download provider build artifacts (for schema)
  #       uses: actions/download-artifact@v4
  #       with:
  #         pattern: provider-build-*
  #         path: dist/raw
  #         merge-multiple: true
  #     - name: Schema diff summary
  #       id: schema_diff
  #       run: |
  #         LAST=$(gh release view --json tagName -q .tagName || echo 'NONE')
  #         echo 'summary<<EOF' >> $GITHUB_OUTPUT
  #         if [ "$LAST" != 'NONE' ]; then
  #           if [ -f dist/raw/schema.json ]; then
  #             schema-tools compare --provider deltastream --old-commit "$LAST" --repository github://api.github.com/deltastreaminc --new-commit --local-path=dist/raw/schema.json || true
  #           fi
  #         fi
  #         echo 'EOF' >> $GITHUB_OUTPUT
  #     - name: Publish Go SDK
  #       uses: pulumi/publish-go-sdk-action@v1
  #       with:
  #         repository: ${{ github.repository }}
  #         base-ref: ${{ github.sha }}
  #         source: sdk
  #         path: sdk
  #         version: ${{ needs.setup.outputs.version_no_v }}
  #         additive: false
  #         files: |
  #           go.*
  #           go/**
  #           !*.tar.gz
  #     - name: Create GitHub Release (packaged)
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ needs.setup.outputs.version }}
  #         name: Release ${{ needs.setup.outputs.version }}
  #         prerelease: ${{ needs.setup.outputs.is_prerelease == 'true' }}
  #         draft: ${{ needs.setup.outputs.is_prerelease == 'true' }}
  #         body: ${{ steps.schema_diff.outputs.summary }}
  #         files: |
  #           dist/pkg/pulumi-resource-deltastream-v*.tar.gz
  #           dist/pkg/pulumi-deltastream_*_checksums.txt
  #           dist/pkg/schema.json
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # verify:
  #   needs: [setup, publish]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Node smoke test
  #       run: |
  #         npm init -y >/dev/null 2>&1
  #         npm install @deltastream/pulumi-deltastream@${{ needs.setup.outputs.version_no_v }}
  #         node -e "require('@deltastream/pulumi-deltastream'); console.log('Node SDK ok')"
  #     - name: Go smoke test
  #       run: |
  #         go mod init verify || true
  #         go get github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream@${{ needs.setup.outputs.version }}
  #         echo 'package main; import _ "github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream"; func main(){}' > main.go
  #         go build ./...
