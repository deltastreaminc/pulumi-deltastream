{
    "name": "deltastream",
    "displayName": "DeltaStream",
    "description": "A Pulumi package for creating and managing DeltaStream cloud resources.",
    "keywords": [
        "deltastream",
        "category/infrastructure"
    ],
    "homepage": "https://www.deltastream.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`deltastream` Terraform Provider](https://github.com/deltastreaminc/terraform-provider-deltastream).",
    "repository": "https://github.com/deltastreaminc/pulumi-deltastream",
    "logoUrl": "http://deltastream-static-assets.s3-website-us-west-2.amazonaws.com/logo-single-purple.svg",
    "pluginDownloadURL": "https://github.com/deltastreaminc/pulumi-deltastream/releases/download/v${VERSION}/",
    "publisher": "DeltaStream Inc.",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "deltastream": "Pulumi"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "DeltaStream",
            "respectSchemaVersion": true
        },
        "go": {
            "importBasePath": "github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true,
            "respectSchemaVersion": true
        },
        "nodejs": {
            "packageName": "@deltastream/pulumi-deltastream",
            "packageDescription": "A Pulumi package for creating and managing DeltaStream cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/deltastreaminc/terraform-provider-deltastream)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-deltastream` repo](https://github.com/deltastreaminc/pulumi-deltastream/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-deltastream` repo](https://github.com/deltastreaminc/terraform-provider-deltastream/issues).",
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true,
            "respectSchemaVersion": true
        },
        "python": {
            "packageName": "deltastream-pulumi",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/deltastreaminc/terraform-provider-deltastream)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-deltastream` repo](https://github.com/deltastreaminc/pulumi-deltastream/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-deltastream` repo](https://github.com/deltastreaminc/terraform-provider-deltastream/issues).",
            "compatibility": "tfbridge20",
            "respectSchemaVersion": true,
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "API key. Can also be set via the DELTASTREAM_API_KEY environment variable\n"
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip SSL verification\n"
            },
            "organization": {
                "type": "string",
                "description": "DeltaStream organization ID. Can also be set via the DELTASTREAM_ORGANIZATION environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "DeltaStream role to use for managing resources and queries. Can also be set via the DELTASTREAM_ROLE environment\nvariable. Default: sysadmin\n"
            },
            "server": {
                "type": "string",
                "description": "Server. Can also be set via the DELTASTREAM_SERVER environment variable\n"
            }
        }
    },
    "types": {
        "deltastream:index/EntityKafkaProperties:EntityKafkaProperties": {
            "properties": {
                "allConfigs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "All topic configurations including any server set configurations\n"
                },
                "configs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional topic configurations\n"
                },
                "keyDescriptor": {
                    "type": "string",
                    "description": "Protobuf descriptor for key\n"
                },
                "topicPartitions": {
                    "type": "integer",
                    "description": "Number of partitions\n"
                },
                "topicReplicas": {
                    "type": "integer",
                    "description": "Number of replicas\n"
                },
                "valueDescriptor": {
                    "type": "string",
                    "description": "Protobuf descriptor for value\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allConfigs",
                        "configs",
                        "keyDescriptor",
                        "topicPartitions",
                        "topicReplicas",
                        "valueDescriptor"
                    ]
                }
            }
        },
        "deltastream:index/EntityKinesisProperties:EntityKinesisProperties": {
            "properties": {
                "descriptor": {
                    "type": "string",
                    "description": "Protobuf descriptor for the value\n"
                },
                "kinesisShards": {
                    "type": "integer",
                    "description": "Number of shards\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "descriptor",
                        "kinesisShards"
                    ]
                }
            }
        },
        "deltastream:index/EntityPostgresProperties:EntityPostgresProperties": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "details"
                    ]
                }
            }
        },
        "deltastream:index/EntitySnowflakeProperties:EntitySnowflakeProperties": {
            "properties": {
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "details"
                    ]
                }
            }
        },
        "deltastream:index/SchemaRegistryConfluent:SchemaRegistryConfluent": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Password to use when authenticating with confluent schema registry\n",
                    "secret": true
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the schema registry\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use when authenticating with confluent schema registry\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "uris"
            ]
        },
        "deltastream:index/SchemaRegistryConfluentCloud:SchemaRegistryConfluentCloud": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "Key to use when authenticating with confluent cloud schema registry\n",
                    "secret": true
                },
                "secret": {
                    "type": "string",
                    "description": "Secret to use when authenticating with confluent cloud schema registry\n",
                    "secret": true
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the schema registry\n"
                }
            },
            "type": "object",
            "required": [
                "uris"
            ]
        },
        "deltastream:index/StoreConfluentKafka:StoreConfluentKafka": {
            "properties": {
                "saslHashFunction": {
                    "type": "string",
                    "description": "SASL hash function to use when authenticating with Confluent Kafka brokers\n"
                },
                "saslPassword": {
                    "type": "string",
                    "description": "Password to use when authenticating with Apache Kafka brokers\n",
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username to use when authenticating with Apache Kafka brokers\n",
                    "secret": true
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "saslHashFunction",
                "saslPassword",
                "saslUsername",
                "uris"
            ]
        },
        "deltastream:index/StoreKafka:StoreKafka": {
            "properties": {
                "mskAwsRegion": {
                    "type": "string",
                    "description": "AWS region where the Amazon MSK cluster is located\n",
                    "secret": true
                },
                "mskIamRoleArn": {
                    "type": "string",
                    "description": "IAM role ARN to use when authenticating with Amazon MSK\n",
                    "secret": true
                },
                "saslHashFunction": {
                    "type": "string",
                    "description": "SASL hash function to use when authenticating with Apache Kafka brokers\n"
                },
                "saslPassword": {
                    "type": "string",
                    "description": "Password to use when authenticating with Apache Kafka brokers\n",
                    "secret": true
                },
                "saslUsername": {
                    "type": "string",
                    "description": "Username to use when authenticating with Apache Kafka brokers\n",
                    "secret": true
                },
                "schemaRegistryName": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "tlsCaCertFile": {
                    "type": "string",
                    "description": "CA certificate in PEM format\n"
                },
                "tlsDisabled": {
                    "type": "boolean",
                    "description": "Specifies if the store should be accessed over TLS\n"
                },
                "tlsVerifyServerHostname": {
                    "type": "boolean",
                    "description": "Specifies if the server CNAME should be validated against the certificate\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "saslHashFunction",
                "uris"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "saslHashFunction",
                        "tlsDisabled",
                        "tlsVerifyServerHostname",
                        "uris"
                    ]
                }
            }
        },
        "deltastream:index/StoreKinesis:StoreKinesis": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "AWS IAM access key to use when authenticating with an Amazon Kinesis service\n",
                    "secret": true
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "AWS account ID to use when authenticating with an Amazon Kinesis service\n",
                    "secret": true
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "AWS IAM secret access key to use when authenticating with an Amazon Kinesis service\n",
                    "secret": true
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "awsAccountId",
                "uris"
            ]
        },
        "deltastream:index/StorePostgres:StorePostgres": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Password to use when authenticating with a Postgres database\n",
                    "secret": true
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use when authenticating with a Postgres database\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "password",
                "uris",
                "username"
            ]
        },
        "deltastream:index/StoreSnowflake:StoreSnowflake": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Snowflake account ID\n"
                },
                "clientKeyFile": {
                    "type": "string",
                    "description": "Snowflake account's private key in PEM format\n",
                    "secret": true
                },
                "clientKeyPassphrase": {
                    "type": "string",
                    "description": "Passphrase for decrypting the Snowflake account's private key\n",
                    "secret": true
                },
                "cloudRegion": {
                    "type": "string",
                    "description": "Snowflake cloud region name, where the account resources operate in\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Access control role to use for the Store operations after connecting to Snowflake\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                },
                "username": {
                    "type": "string",
                    "description": "User login name for the Snowflake account\n",
                    "secret": true
                },
                "warehouseName": {
                    "type": "string",
                    "description": "Warehouse name to use for queries and other store operations that require compute resource\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "clientKeyFile",
                "clientKeyPassphrase",
                "cloudRegion",
                "roleName",
                "uris",
                "username",
                "warehouseName"
            ]
        },
        "deltastream:index/getDatabasesItem:getDatabasesItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Database\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Database\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "owner"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getNamespacesItem:getNamespacesItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Namespace\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Namespace\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "database",
                "name",
                "owner"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getObjectsObject:getObjectsObject": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the object\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "fqn": {
                    "type": "string",
                    "description": "Fully qualified name of the Object\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Object\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the object\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Object\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Object\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the object\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "database",
                "fqn",
                "name",
                "namespace",
                "owner",
                "state",
                "type",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getSchemaRegistriesItem:getSchemaRegistriesItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the schema registry\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the schema registry\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the schema registry\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the schema registry\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the schema registry\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "owner",
                "state",
                "type",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getSecretsItem:getSecretsItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Secret\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Secret\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Secret\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Secret\n"
                },
                "type": {
                    "type": "string",
                    "description": "Secret type. (Valid values: generic_string)\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the Secret\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "name",
                "owner",
                "status",
                "type",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStoreConfluentKafka:getStoreConfluentKafka": {
            "properties": {
                "schemaRegistryName": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryName",
                "uris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStoreKafka:getStoreKafka": {
            "properties": {
                "schemaRegistryName": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "tlsDisabled": {
                    "type": "boolean",
                    "description": "Specifies if the store should be accessed over TLS\n"
                },
                "tlsVerifyServerHostname": {
                    "type": "boolean",
                    "description": "Specifies if the server CNAME should be validated against the certificate\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryName",
                "tlsDisabled",
                "tlsVerifyServerHostname",
                "uris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStoreKinesis:getStoreKinesis": {
            "properties": {
                "schemaRegistryName": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "schemaRegistryName",
                "uris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStorePostgres:getStorePostgres": {
            "properties": {
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                }
            },
            "type": "object",
            "required": [
                "uris"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStoreSnowflake:getStoreSnowflake": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Snowflake account ID\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Access control role to use for the Store operations after connecting to Snowflake\n"
                },
                "uris": {
                    "type": "string",
                    "description": "List of host:port URIs to connect to the store\n"
                },
                "warehouseName": {
                    "type": "string",
                    "description": "Warehouse name to use for queries and other store operations that require compute resource\n"
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "roleName",
                "uris",
                "warehouseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "deltastream:index/getStoresItem:getStoresItem": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Store\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Store\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Store\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Store\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Store\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the Store\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "name",
                "owner",
                "state",
                "type",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the deltastream package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "API key. Can also be set via the DELTASTREAM_API_KEY environment variable\n"
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip SSL verification\n"
            },
            "organization": {
                "type": "string",
                "description": "DeltaStream organization ID. Can also be set via the DELTASTREAM_ORGANIZATION environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "DeltaStream role to use for managing resources and queries. Can also be set via the DELTASTREAM_ROLE environment\nvariable. Default: sysadmin\n"
            },
            "server": {
                "type": "string",
                "description": "Server. Can also be set via the DELTASTREAM_SERVER environment variable\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "API key. Can also be set via the DELTASTREAM_API_KEY environment variable\n"
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip SSL verification\n"
            },
            "organization": {
                "type": "string",
                "description": "DeltaStream organization ID. Can also be set via the DELTASTREAM_ORGANIZATION environment variable.\n"
            },
            "role": {
                "type": "string",
                "description": "DeltaStream role to use for managing resources and queries. Can also be set via the DELTASTREAM_ROLE environment\nvariable. Default: sysadmin\n"
            },
            "server": {
                "type": "string",
                "description": "Server. Can also be set via the DELTASTREAM_SERVER environment variable\n"
            }
        },
        "methods": {
            "terraformConfig": "pulumi:providers:deltastream/terraformConfig"
        }
    },
    "resources": {
        "deltastream:index/database:Database": {
            "description": "Database resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst example = new deltastream.Database(\"example\", {});\n```\n```python\nimport pulumi\nimport deltastream-pulumi as deltastream\n\nexample = deltastream.Database(\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = DeltaStream.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pulumi.Database(\"example\");\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.NewDatabase(ctx, \"example\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.Database;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Database(\"example\");\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: deltastream:Database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Database\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Database\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "owner"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Database\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Database resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Database\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/entity:Entity": {
            "description": "Database resource\n",
            "properties": {
                "entityPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entity path\n"
                },
                "kafkaProperties": {
                    "$ref": "#/types/deltastream:index/EntityKafkaProperties:EntityKafkaProperties",
                    "description": "Kafka properties\n"
                },
                "kinesisProperties": {
                    "$ref": "#/types/deltastream:index/EntityKinesisProperties:EntityKinesisProperties",
                    "description": "Kinesis properties\n"
                },
                "postgresProperties": {
                    "$ref": "#/types/deltastream:index/EntityPostgresProperties:EntityPostgresProperties",
                    "description": "Postgres properties\n"
                },
                "snowflakeProperties": {
                    "$ref": "#/types/deltastream:index/EntitySnowflakeProperties:EntitySnowflakeProperties",
                    "description": "Snowflake properties\n"
                },
                "store": {
                    "type": "string",
                    "description": "Store name\n"
                }
            },
            "required": [
                "entityPaths",
                "kafkaProperties",
                "kinesisProperties",
                "postgresProperties",
                "snowflakeProperties",
                "store"
            ],
            "inputProperties": {
                "entityPaths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Entity path\n"
                },
                "kafkaProperties": {
                    "$ref": "#/types/deltastream:index/EntityKafkaProperties:EntityKafkaProperties",
                    "description": "Kafka properties\n"
                },
                "kinesisProperties": {
                    "$ref": "#/types/deltastream:index/EntityKinesisProperties:EntityKinesisProperties",
                    "description": "Kinesis properties\n"
                },
                "postgresProperties": {
                    "$ref": "#/types/deltastream:index/EntityPostgresProperties:EntityPostgresProperties",
                    "description": "Postgres properties\n"
                },
                "snowflakeProperties": {
                    "$ref": "#/types/deltastream:index/EntitySnowflakeProperties:EntitySnowflakeProperties",
                    "description": "Snowflake properties\n"
                },
                "store": {
                    "type": "string",
                    "description": "Store name\n"
                }
            },
            "requiredInputs": [
                "entityPaths",
                "store"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Entity resources.\n",
                "properties": {
                    "entityPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Entity path\n"
                    },
                    "kafkaProperties": {
                        "$ref": "#/types/deltastream:index/EntityKafkaProperties:EntityKafkaProperties",
                        "description": "Kafka properties\n"
                    },
                    "kinesisProperties": {
                        "$ref": "#/types/deltastream:index/EntityKinesisProperties:EntityKinesisProperties",
                        "description": "Kinesis properties\n"
                    },
                    "postgresProperties": {
                        "$ref": "#/types/deltastream:index/EntityPostgresProperties:EntityPostgresProperties",
                        "description": "Postgres properties\n"
                    },
                    "snowflakeProperties": {
                        "$ref": "#/types/deltastream:index/EntitySnowflakeProperties:EntitySnowflakeProperties",
                        "description": "Snowflake properties\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Store name\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/namespace:Namespace": {
            "description": "Namespace resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst exampleDatabase = new deltastream.Database(\"exampleDatabase\", {});\nconst exampleNamespace = new deltastream.Namespace(\"exampleNamespace\", {database: exampleDatabase.name});\n```\n```python\nimport pulumi\nimport deltastream-pulumi as deltastream\n\nexample_database = deltastream.Database(\"exampleDatabase\")\nexample_namespace = deltastream.Namespace(\"exampleNamespace\", database=example_database.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = DeltaStream.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleDatabase = new Pulumi.Database(\"exampleDatabase\");\n\n    var exampleNamespace = new Pulumi.Namespace(\"exampleNamespace\", new()\n    {\n        Database = exampleDatabase.Name,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleDatabase, err := deltastream.NewDatabase(ctx, \"exampleDatabase\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = deltastream.NewNamespace(ctx, \"exampleNamespace\", \u0026deltastream.NamespaceArgs{\n\t\t\tDatabase: exampleDatabase.Name,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.Database;\nimport com.pulumi.deltastream.Namespace;\nimport com.pulumi.deltastream.NamespaceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDatabase = new Database(\"exampleDatabase\");\n\n        var exampleNamespace = new Namespace(\"exampleNamespace\", NamespaceArgs.builder()\n            .database(exampleDatabase.name())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleDatabase:\n    type: deltastream:Database\n  exampleNamespace:\n    type: deltastream:Namespace\n    properties:\n      database: ${exampleDatabase.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the schema\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Namespace\n"
                }
            },
            "required": [
                "createdAt",
                "database",
                "name",
                "owner"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Namespace\n"
                }
            },
            "requiredInputs": [
                "database"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Namespace resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the schema\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Namespace\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/object:DeltaStreamObject": {
            "description": "Object resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the object\n"
                },
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "fqn": {
                    "type": "string",
                    "description": "Fully qualified name of the Object\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Object\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the object\n"
                },
                "sql": {
                    "type": "string",
                    "description": "SQL statement to create the object\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Object\n"
                },
                "store": {
                    "type": "string",
                    "description": "Name of the Store\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Object\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the object\n"
                }
            },
            "required": [
                "createdAt",
                "database",
                "fqn",
                "name",
                "namespace",
                "owner",
                "sql",
                "state",
                "store",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "database": {
                    "type": "string",
                    "description": "Name of the Database\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "Name of the Namespace\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the object\n"
                },
                "sql": {
                    "type": "string",
                    "description": "SQL statement to create the object\n"
                },
                "store": {
                    "type": "string",
                    "description": "Name of the Store\n"
                }
            },
            "requiredInputs": [
                "database",
                "namespace",
                "sql",
                "store"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DeltaStreamObject resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the object\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "fqn": {
                        "type": "string",
                        "description": "Fully qualified name of the Object\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Object\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the object\n"
                    },
                    "sql": {
                        "type": "string",
                        "description": "SQL statement to create the object\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Object\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Object\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the object\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/query:Query": {
            "description": "Query resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the query\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the query\n"
                },
                "queryId": {
                    "type": "string",
                    "description": "Query ID\n"
                },
                "queryName": {
                    "type": "string",
                    "description": "Query Name\n"
                },
                "queryVersion": {
                    "type": "integer",
                    "description": "Query version\n"
                },
                "sinkRelationFqn": {
                    "type": "string",
                    "description": "Fully qualified sink relation name\n"
                },
                "sourceRelationFqns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of fully qualified source relation names\n"
                },
                "sql": {
                    "type": "string",
                    "description": "SQL statement to create the relation\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Relation\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Creation date of the query\n"
                }
            },
            "required": [
                "createdAt",
                "owner",
                "queryId",
                "queryName",
                "queryVersion",
                "sinkRelationFqn",
                "sourceRelationFqns",
                "sql",
                "state",
                "updatedAt"
            ],
            "inputProperties": {
                "owner": {
                    "type": "string",
                    "description": "Owning role of the query\n"
                },
                "sinkRelationFqn": {
                    "type": "string",
                    "description": "Fully qualified sink relation name\n"
                },
                "sourceRelationFqns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of fully qualified source relation names\n"
                },
                "sql": {
                    "type": "string",
                    "description": "SQL statement to create the relation\n"
                }
            },
            "requiredInputs": [
                "sinkRelationFqn",
                "sourceRelationFqns",
                "sql"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Query resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the query\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the query\n"
                    },
                    "queryId": {
                        "type": "string",
                        "description": "Query ID\n"
                    },
                    "queryName": {
                        "type": "string",
                        "description": "Query Name\n"
                    },
                    "queryVersion": {
                        "type": "integer",
                        "description": "Query version\n"
                    },
                    "sinkRelationFqn": {
                        "type": "string",
                        "description": "Fully qualified sink relation name\n"
                    },
                    "sourceRelationFqns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of fully qualified source relation names\n"
                    },
                    "sql": {
                        "type": "string",
                        "description": "SQL statement to create the relation\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Relation\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Creation date of the query\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/schemaRegistry:SchemaRegistry": {
            "description": "Schema registry resource\n",
            "properties": {
                "confluent": {
                    "$ref": "#/types/deltastream:index/SchemaRegistryConfluent:SchemaRegistryConfluent",
                    "description": "Confluent specific configuration\n"
                },
                "confluentCloud": {
                    "$ref": "#/types/deltastream:index/SchemaRegistryConfluentCloud:SchemaRegistryConfluentCloud",
                    "description": "Confluent cloud specific configuration\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the schema registry\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the schema registry\n"
                },
                "state": {
                    "type": "string",
                    "description": "Status of the schema registry\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the schema registry\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the schema registry\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "owner",
                "state",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "confluent": {
                    "$ref": "#/types/deltastream:index/SchemaRegistryConfluent:SchemaRegistryConfluent",
                    "description": "Confluent specific configuration\n"
                },
                "confluentCloud": {
                    "$ref": "#/types/deltastream:index/SchemaRegistryConfluentCloud:SchemaRegistryConfluentCloud",
                    "description": "Confluent cloud specific configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the schema registry\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the schema registry\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SchemaRegistry resources.\n",
                "properties": {
                    "confluent": {
                        "$ref": "#/types/deltastream:index/SchemaRegistryConfluent:SchemaRegistryConfluent",
                        "description": "Confluent specific configuration\n"
                    },
                    "confluentCloud": {
                        "$ref": "#/types/deltastream:index/SchemaRegistryConfluentCloud:SchemaRegistryConfluentCloud",
                        "description": "Confluent cloud specific configuration\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the schema registry\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the schema registry\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the schema registry\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Status of the schema registry\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the schema registry\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the schema registry\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/secret:Secret": {
            "description": "Secret resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst example = new deltastream.Secret(\"example\", {\n    description: \"secret description\",\n    stringValue: \"some value\",\n    type: \"generic_string\",\n});\n```\n```python\nimport pulumi\nimport deltastream-pulumi as deltastream\n\nexample = deltastream.Secret(\"example\",\n    description=\"secret description\",\n    string_value=\"some value\",\n    type=\"generic_string\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = DeltaStream.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Pulumi.Secret(\"example\", new()\n    {\n        Description = \"secret description\",\n        StringValue = \"some value\",\n        Type = \"generic_string\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.NewSecret(ctx, \"example\", \u0026deltastream.SecretArgs{\n\t\t\tDescription: pulumi.String(\"secret description\"),\n\t\t\tStringValue: pulumi.String(\"some value\"),\n\t\t\tType:        pulumi.String(\"generic_string\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.Secret;\nimport com.pulumi.deltastream.SecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Secret(\"example\", SecretArgs.builder()\n            .description(\"secret description\")\n            .stringValue(\"some value\")\n            .type(\"generic_string\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: deltastream:Secret\n    properties:\n      description: secret description\n      stringValue: some value\n      type: generic_string\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Secret\n"
                },
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom properties of the Secret\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Secret\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Secret\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Secret\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "Secret value\n"
                },
                "type": {
                    "type": "string",
                    "description": "Secret type. (Valid values: generic_string)\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the Secret\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "owner",
                "status",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "customProperties": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom properties of the Secret\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Secret\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Secret\n"
                },
                "stringValue": {
                    "type": "string",
                    "description": "Secret value\n"
                },
                "type": {
                    "type": "string",
                    "description": "Secret type. (Valid values: generic_string)\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Secret\n"
                    },
                    "customProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom properties of the Secret\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Secret\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Secret\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Secret\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Secret\n"
                    },
                    "stringValue": {
                        "type": "string",
                        "description": "Secret value\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Secret type. (Valid values: generic_string)\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the Secret\n"
                    }
                },
                "type": "object"
            }
        },
        "deltastream:index/store:Store": {
            "description": "Store resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```yaml\nresources:\n  kafkaWithSasl:\n    type: deltastream:Store\n    properties:\n      kafka:\n        uris: ${var.kafka_url}\n        sasl_hash_function: PLAIN\n        sasl_username: ${var.kafka_sasl_username}\n        sasl_password: ${var.kafka_sasl_password}\n  confluentKafkaWithSasl:\n    type: deltastream:Store\n    properties:\n      confluentKafka:\n        uris: ${var.kafka_url}\n        sasl_hash_function: PLAIN\n        sasl_username: ${var.kafka_sasl_username}\n        sasl_password: ${var.kafka_sasl_password}\n  kafkaWithIam:\n    type: deltastream:Store\n    properties:\n      kafka:\n        uris: ${var.msk_url}\n        sasl_hash_function: AWS_MSK_IAM\n        msk_iam_role_arn: ${var.msk_iam_role}\n        msk_aws_region: ${var.msk_region}\n  kinesisCreds:\n    type: deltastream:Store\n    properties:\n      kinesis:\n        uris: ${var.kinesis_url}\n        access_key_id: ${var.kinesis_key}\n        secret_access_key: ${var.kinesis_secret}\n  snowflake:\n    type: deltastream:Store\n    properties:\n      snowflake:\n        uris: ${var.snowflake_uris}\n        account_id: ${var.snowflake_account_id}\n        cloud_region: ${var.snowflake_cloud_region}\n        warehouse_name: ${var.snowflake_warehouse_name}\n        role_name: ${var.snowflake_role_name}\n        username: ${var.snowflake_username}\n        client_key_file: ${var.snowflake_client_key_file}\n        client_key_passphrase: ${var.snowflake_client_key_passphrase}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "properties": {
                "confluentKafka": {
                    "$ref": "#/types/deltastream:index/StoreConfluentKafka:StoreConfluentKafka",
                    "description": "Confluent Kafka specific configuration\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the Store\n"
                },
                "kafka": {
                    "$ref": "#/types/deltastream:index/StoreKafka:StoreKafka",
                    "description": "Kafka specific configuration\n"
                },
                "kinesis": {
                    "$ref": "#/types/deltastream:index/StoreKinesis:StoreKinesis",
                    "description": "Kinesis specific configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Store\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Store\n"
                },
                "postgres": {
                    "$ref": "#/types/deltastream:index/StorePostgres:StorePostgres",
                    "description": "Postgres specific configuration\n"
                },
                "snowflake": {
                    "$ref": "#/types/deltastream:index/StoreSnowflake:StoreSnowflake",
                    "description": "Snowflake specific configuration\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the Store\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the Store\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the Store\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "owner",
                "state",
                "type",
                "updatedAt"
            ],
            "inputProperties": {
                "confluentKafka": {
                    "$ref": "#/types/deltastream:index/StoreConfluentKafka:StoreConfluentKafka",
                    "description": "Confluent Kafka specific configuration\n"
                },
                "kafka": {
                    "$ref": "#/types/deltastream:index/StoreKafka:StoreKafka",
                    "description": "Kafka specific configuration\n"
                },
                "kinesis": {
                    "$ref": "#/types/deltastream:index/StoreKinesis:StoreKinesis",
                    "description": "Kinesis specific configuration\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Store\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Owning role of the Store\n"
                },
                "postgres": {
                    "$ref": "#/types/deltastream:index/StorePostgres:StorePostgres",
                    "description": "Postgres specific configuration\n"
                },
                "snowflake": {
                    "$ref": "#/types/deltastream:index/StoreSnowflake:StoreSnowflake",
                    "description": "Snowflake specific configuration\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Store resources.\n",
                "properties": {
                    "confluentKafka": {
                        "$ref": "#/types/deltastream:index/StoreConfluentKafka:StoreConfluentKafka",
                        "description": "Confluent Kafka specific configuration\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Store\n"
                    },
                    "kafka": {
                        "$ref": "#/types/deltastream:index/StoreKafka:StoreKafka",
                        "description": "Kafka specific configuration\n"
                    },
                    "kinesis": {
                        "$ref": "#/types/deltastream:index/StoreKinesis:StoreKinesis",
                        "description": "Kinesis specific configuration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Store\n"
                    },
                    "postgres": {
                        "$ref": "#/types/deltastream:index/StorePostgres:StorePostgres",
                        "description": "Postgres specific configuration\n"
                    },
                    "snowflake": {
                        "$ref": "#/types/deltastream:index/StoreSnowflake:StoreSnowflake",
                        "description": "Snowflake specific configuration\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Store\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Store\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the Store\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "deltastream:index/getDatabase:getDatabase": {
            "description": "Database resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst example = deltastream.getDatabase({\n    name: \"example_database\",\n});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nexample = deltastream.get_database(name=\"example_database\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pulumi.GetDatabase.Invoke(new()\n    {\n        Name = \"example_database\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.LookupDatabase(ctx, \u0026deltastream.LookupDatabaseArgs{\n\t\t\tName: \"example_database\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport com.pulumi.deltastream.inputs.GetDatabaseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeltastreamFunctions.getDatabase(GetDatabaseArgs.builder()\n            .name(\"example_database\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: deltastream:getDatabase\n      arguments:\n        name: example_database\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabase.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Database\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabase.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Database\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "name",
                    "owner",
                    "id"
                ]
            }
        },
        "deltastream:index/getDatabases:getDatabases": {
            "description": "Database resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst allDatabases = deltastream.getDatabases({});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nall_databases = deltastream.get_databases()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allDatabases = Pulumi.GetDatabases.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.GetDatabases(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var allDatabases = DeltastreamFunctions.getDatabases(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  allDatabases:\n    fn::invoke:\n      function: deltastream:getDatabases\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getDatabases.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getDatabasesItem:getDatabasesItem"
                        },
                        "description": "List of databases\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "deltastream:index/getEntities:getEntities": {
            "description": "Entities in a store\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEntities.\n",
                "properties": {
                    "parentPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Path to parent entity\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "store"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEntities.\n",
                "properties": {
                    "childEntities": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Child entities\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "parentPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Path to parent entity\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "childEntities",
                    "store",
                    "id"
                ]
            }
        },
        "deltastream:index/getEntityData:getEntityData": {
            "description": "Entities in a store\n",
            "inputs": {
                "description": "A collection of arguments for invoking getEntityData.\n",
                "properties": {
                    "entityPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Path to entity\n"
                    },
                    "fromBeginning": {
                        "type": "boolean",
                        "description": "Read from beginning\n"
                    },
                    "numRows": {
                        "type": "integer",
                        "description": "Number of rows to return\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "entityPaths",
                    "store"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getEntityData.\n",
                "properties": {
                    "entityPaths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Path to entity\n"
                    },
                    "fromBeginning": {
                        "type": "boolean",
                        "description": "Read from beginning\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "numRows": {
                        "type": "integer",
                        "description": "Number of rows to return\n"
                    },
                    "rows": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Rows\n"
                    },
                    "store": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "entityPaths",
                    "rows",
                    "store",
                    "id"
                ]
            }
        },
        "deltastream:index/getNamespace:getNamespace": {
            "description": "Namespace resource\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNamespace.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Namespace\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNamespace.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Namespace\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Namespace\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "database",
                    "name",
                    "owner",
                    "id"
                ]
            }
        },
        "deltastream:index/getNamespaces:getNamespaces": {
            "description": "Namespace resource\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNamespaces.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    }
                },
                "type": "object",
                "required": [
                    "database"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNamespaces.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getNamespacesItem:getNamespacesItem"
                        },
                        "description": "List of namespaces\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "items",
                    "id"
                ]
            }
        },
        "deltastream:index/getObject:getObject": {
            "description": "Object resource\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObject.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Object\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "name",
                    "namespace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObject.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the object\n"
                    },
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "fqn": {
                        "type": "string",
                        "description": "Fully qualified name of the Object\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Object\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the object\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Object\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Object\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the object\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "database",
                    "fqn",
                    "name",
                    "namespace",
                    "owner",
                    "state",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "deltastream:index/getObjects:getObjects": {
            "description": "Objects resource\n",
            "inputs": {
                "description": "A collection of arguments for invoking getObjects.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "namespace"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getObjects.\n",
                "properties": {
                    "database": {
                        "type": "string",
                        "description": "Name of the Database\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "namespace": {
                        "type": "string",
                        "description": "Name of the Namespace\n"
                    },
                    "objects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getObjectsObject:getObjectsObject"
                        },
                        "description": "List of objects\n"
                    }
                },
                "type": "object",
                "required": [
                    "database",
                    "namespace",
                    "objects",
                    "id"
                ]
            }
        },
        "deltastream:index/getSchemaRegistries:getSchemaRegistries": {
            "description": "Schema registries datasource\n",
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistries.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getSchemaRegistriesItem:getSchemaRegistriesItem"
                        },
                        "description": "List of schema registries\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "deltastream:index/getSchemaRegistry:getSchemaRegistry": {
            "description": "Schema registry datasource\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSchemaRegistry.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the schema registry\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSchemaRegistry.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the schema registry\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the schema registry\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the schema registry\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the schema registry\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the schema registry\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the schema registry\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "name",
                    "owner",
                    "state",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "deltastream:index/getSecret:getSecret": {
            "description": "Secret resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst example = deltastream.getSecret({\n    name: \"example_secret\",\n});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nexample = deltastream.get_secret(name=\"example_secret\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pulumi.GetSecret.Invoke(new()\n    {\n        Name = \"example_secret\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.LookupSecret(ctx, \u0026deltastream.LookupSecretArgs{\n\t\t\tName: \"example_secret\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport com.pulumi.deltastream.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeltastreamFunctions.getSecret(GetSecretArgs.builder()\n            .name(\"example_secret\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: deltastream:getSecret\n      arguments:\n        name: example_secret\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the Secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Secret\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Secret\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Secret\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Secret\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Secret\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Secret type. (Valid values: generic_string)\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the Secret\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "name",
                    "owner",
                    "status",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "deltastream:index/getSecrets:getSecrets": {
            "description": "Secret resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst allSecrets = deltastream.getSecrets({});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nall_secrets = deltastream.get_secrets()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allSecrets = Pulumi.GetSecrets.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.GetSecrets(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var allSecrets = DeltastreamFunctions.getSecrets(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  allSecrets:\n    fn::invoke:\n      function: deltastream:getSecrets\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getSecrets.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getSecretsItem:getSecretsItem"
                        },
                        "description": "List of secrets\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "deltastream:index/getStore:getStore": {
            "description": "Store resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst example = deltastream.getStore({\n    name: \"example_store\",\n});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nexample = deltastream.get_store(name=\"example_store\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Pulumi.GetStore.Invoke(new()\n    {\n        Name = \"example_store\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.LookupStore(ctx, \u0026deltastream.LookupStoreArgs{\n\t\t\tName: \"example_store\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport com.pulumi.deltastream.inputs.GetStoreArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DeltastreamFunctions.getStore(GetStoreArgs.builder()\n            .name(\"example_store\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      function: deltastream:getStore\n      arguments:\n        name: example_store\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getStore.\n",
                "properties": {
                    "confluentKafka": {
                        "$ref": "#/types/deltastream:index/getStoreConfluentKafka:getStoreConfluentKafka",
                        "description": "Confluent Kafka specific configuration\n"
                    },
                    "kafka": {
                        "$ref": "#/types/deltastream:index/getStoreKafka:getStoreKafka",
                        "description": "Kafka specific configuration\n"
                    },
                    "kinesis": {
                        "$ref": "#/types/deltastream:index/getStoreKinesis:getStoreKinesis",
                        "description": "Kinesis specific configuration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    },
                    "postgres": {
                        "$ref": "#/types/deltastream:index/getStorePostgres:getStorePostgres",
                        "description": "Postgres specific configuration\n"
                    },
                    "snowflake": {
                        "$ref": "#/types/deltastream:index/getStoreSnowflake:getStoreSnowflake",
                        "description": "Snowflake specific configuration\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getStore.\n",
                "properties": {
                    "confluentKafka": {
                        "$ref": "#/types/deltastream:index/getStoreConfluentKafka:getStoreConfluentKafka",
                        "description": "Confluent Kafka specific configuration\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the Store\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kafka": {
                        "$ref": "#/types/deltastream:index/getStoreKafka:getStoreKafka",
                        "description": "Kafka specific configuration\n"
                    },
                    "kinesis": {
                        "$ref": "#/types/deltastream:index/getStoreKinesis:getStoreKinesis",
                        "description": "Kinesis specific configuration\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Store\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Owning role of the Store\n"
                    },
                    "postgres": {
                        "$ref": "#/types/deltastream:index/getStorePostgres:getStorePostgres",
                        "description": "Postgres specific configuration\n"
                    },
                    "snowflake": {
                        "$ref": "#/types/deltastream:index/getStoreSnowflake:getStoreSnowflake",
                        "description": "Snowflake specific configuration\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the Store\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the Store\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the Store\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "name",
                    "owner",
                    "state",
                    "type",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "deltastream:index/getStores:getStores": {
            "description": "Store resource\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as deltastream from \"@deltastream/pulumi-deltastream\";\n\nconst allStores = deltastream.getStores({});\n```\n```python\nimport pulumi\nimport pulumi_deltastream as deltastream\n\nall_stores = deltastream.get_stores()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Pulumi = Pulumi.Pulumi;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var allStores = Pulumi.GetStores.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := deltastream.GetStores(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.deltastream.DeltastreamFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var allStores = DeltastreamFunctions.getStores(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference);\n\n    }\n}\n```\n```yaml\nvariables:\n  allStores:\n    fn::invoke:\n      function: deltastream:getStores\n      arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getStores.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/deltastream:index/getStoresItem:getStoresItem"
                        },
                        "description": "List of stores\n"
                    }
                },
                "type": "object",
                "required": [
                    "items",
                    "id"
                ]
            }
        },
        "pulumi:providers:deltastream/terraformConfig": {
            "description": "This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.",
            "inputs": {
                "properties": {
                    "__self__": {
                        "type": "ref",
                        "$ref": "#/resources/pulumi:providers:deltastream"
                    }
                },
                "type": "pulumi:providers:deltastream/terraformConfig",
                "required": [
                    "__self__"
                ]
            },
            "outputs": {
                "properties": {
                    "result": {
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "result"
                ],
                "type": "object"
            }
        }
    }
}