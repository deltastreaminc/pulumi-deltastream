// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi.Inputs
{

    public sealed class StoreKafkaGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("mskAwsRegion")]
        private Input<string>? _mskAwsRegion;

        /// <summary>
        /// AWS region where the Amazon MSK cluster is located
        /// </summary>
        public Input<string>? MskAwsRegion
        {
            get => _mskAwsRegion;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _mskAwsRegion = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("mskIamRoleArn")]
        private Input<string>? _mskIamRoleArn;

        /// <summary>
        /// IAM role ARN to use when authenticating with Amazon MSK
        /// </summary>
        public Input<string>? MskIamRoleArn
        {
            get => _mskIamRoleArn;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _mskIamRoleArn = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// SASL hash function to use when authenticating with Apache Kafka brokers
        /// </summary>
        [Input("saslHashFunction", required: true)]
        public Input<string> SaslHashFunction { get; set; } = null!;

        [Input("saslPassword")]
        private Input<string>? _saslPassword;

        /// <summary>
        /// Password to use when authenticating with Apache Kafka brokers
        /// </summary>
        public Input<string>? SaslPassword
        {
            get => _saslPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("saslUsername")]
        private Input<string>? _saslUsername;

        /// <summary>
        /// Username to use when authenticating with Apache Kafka brokers
        /// </summary>
        public Input<string>? SaslUsername
        {
            get => _saslUsername;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _saslUsername = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Name of the schema registry
        /// </summary>
        [Input("schemaRegistryName")]
        public Input<string>? SchemaRegistryName { get; set; }

        /// <summary>
        /// CA certificate in PEM format
        /// </summary>
        [Input("tlsCaCertFile")]
        public Input<string>? TlsCaCertFile { get; set; }

        /// <summary>
        /// Specifies if the store should be accessed over TLS
        /// </summary>
        [Input("tlsDisabled")]
        public Input<bool>? TlsDisabled { get; set; }

        /// <summary>
        /// Specifies if the server CNAME should be validated against the certificate
        /// </summary>
        [Input("tlsVerifyServerHostname")]
        public Input<bool>? TlsVerifyServerHostname { get; set; }

        /// <summary>
        /// List of host:port URIs to connect to the store
        /// </summary>
        [Input("uris", required: true)]
        public Input<string> Uris { get; set; } = null!;

        public StoreKafkaGetArgs()
        {
        }
        public static new StoreKafkaGetArgs Empty => new StoreKafkaGetArgs();
    }
}
