// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi
{
    public static class GetStore
    {
        /// <summary>
        /// Store resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pulumi = Pulumi.Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Pulumi.GetStore.Invoke(new()
        ///     {
        ///         Name = "example_store",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStoreResult> InvokeAsync(GetStoreArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStoreResult>("deltastream:index/getStore:getStore", args ?? new GetStoreArgs(), options.WithDefaults());

        /// <summary>
        /// Store resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pulumi = Pulumi.Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Pulumi.GetStore.Invoke(new()
        ///     {
        ///         Name = "example_store",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStoreResult> Invoke(GetStoreInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStoreResult>("deltastream:index/getStore:getStore", args ?? new GetStoreInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Store resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Pulumi = Pulumi.Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Pulumi.GetStore.Invoke(new()
        ///     {
        ///         Name = "example_store",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStoreResult> Invoke(GetStoreInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStoreResult>("deltastream:index/getStore:getStore", args ?? new GetStoreInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStoreArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        [Input("confluentKafka")]
        public Inputs.GetStoreConfluentKafkaArgs? ConfluentKafka { get; set; }

        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        [Input("kafka")]
        public Inputs.GetStoreKafkaArgs? Kafka { get; set; }

        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        [Input("kinesis")]
        public Inputs.GetStoreKinesisArgs? Kinesis { get; set; }

        /// <summary>
        /// Name of the Store
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        [Input("postgres")]
        public Inputs.GetStorePostgresArgs? Postgres { get; set; }

        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        [Input("snowflake")]
        public Inputs.GetStoreSnowflakeArgs? Snowflake { get; set; }

        public GetStoreArgs()
        {
        }
        public static new GetStoreArgs Empty => new GetStoreArgs();
    }

    public sealed class GetStoreInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        [Input("confluentKafka")]
        public Input<Inputs.GetStoreConfluentKafkaInputArgs>? ConfluentKafka { get; set; }

        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.GetStoreKafkaInputArgs>? Kafka { get; set; }

        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        [Input("kinesis")]
        public Input<Inputs.GetStoreKinesisInputArgs>? Kinesis { get; set; }

        /// <summary>
        /// Name of the Store
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        [Input("postgres")]
        public Input<Inputs.GetStorePostgresInputArgs>? Postgres { get; set; }

        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.GetStoreSnowflakeInputArgs>? Snowflake { get; set; }

        public GetStoreInvokeArgs()
        {
        }
        public static new GetStoreInvokeArgs Empty => new GetStoreInvokeArgs();
    }


    [OutputType]
    public sealed class GetStoreResult
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        public readonly Outputs.GetStoreConfluentKafkaResult? ConfluentKafka;
        /// <summary>
        /// Creation date of the Store
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        public readonly Outputs.GetStoreKafkaResult? Kafka;
        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        public readonly Outputs.GetStoreKinesisResult? Kinesis;
        /// <summary>
        /// Name of the Store
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Owning role of the Store
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        public readonly Outputs.GetStorePostgresResult? Postgres;
        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        public readonly Outputs.GetStoreSnowflakeResult? Snowflake;
        /// <summary>
        /// State of the Store
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Type of the Store
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Last update date of the Store
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetStoreResult(
            Outputs.GetStoreConfluentKafkaResult? confluentKafka,

            string createdAt,

            string id,

            Outputs.GetStoreKafkaResult? kafka,

            Outputs.GetStoreKinesisResult? kinesis,

            string name,

            string owner,

            Outputs.GetStorePostgresResult? postgres,

            Outputs.GetStoreSnowflakeResult? snowflake,

            string state,

            string type,

            string updatedAt)
        {
            ConfluentKafka = confluentKafka;
            CreatedAt = createdAt;
            Id = id;
            Kafka = kafka;
            Kinesis = kinesis;
            Name = name;
            Owner = owner;
            Postgres = postgres;
            Snowflake = snowflake;
            State = state;
            Type = type;
            UpdatedAt = updatedAt;
        }
    }
}
