// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi
{
    /// <summary>
    /// Store resource
    /// </summary>
    [PulumiResourceType("deltastream:index/store:Store")]
    public partial class Store : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        [Output("confluentKafka")]
        public Output<Outputs.StoreConfluentKafka?> ConfluentKafka { get; private set; } = null!;

        /// <summary>
        /// Creation date of the Store
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        [Output("kafka")]
        public Output<Outputs.StoreKafka?> Kafka { get; private set; } = null!;

        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        [Output("kinesis")]
        public Output<Outputs.StoreKinesis?> Kinesis { get; private set; } = null!;

        /// <summary>
        /// Name of the Store
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Owning role of the Store
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        [Output("postgres")]
        public Output<Outputs.StorePostgres?> Postgres { get; private set; } = null!;

        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        [Output("snowflake")]
        public Output<Outputs.StoreSnowflake?> Snowflake { get; private set; } = null!;

        /// <summary>
        /// State of the Store
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Type of the Store
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Last update date of the Store
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Store resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Store(string name, StoreArgs? args = null, CustomResourceOptions? options = null)
            : base("deltastream:index/store:Store", name, args ?? new StoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Store(string name, Input<string> id, StoreState? state = null, CustomResourceOptions? options = null)
            : base("deltastream:index/store:Store", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/deltastreaminc/pulumi-deltastream/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Store resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Store Get(string name, Input<string> id, StoreState? state = null, CustomResourceOptions? options = null)
        {
            return new Store(name, id, state, options);
        }
    }

    public sealed class StoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        [Input("confluentKafka")]
        public Input<Inputs.StoreConfluentKafkaArgs>? ConfluentKafka { get; set; }

        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.StoreKafkaArgs>? Kafka { get; set; }

        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        [Input("kinesis")]
        public Input<Inputs.StoreKinesisArgs>? Kinesis { get; set; }

        /// <summary>
        /// Name of the Store
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owning role of the Store
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        [Input("postgres")]
        public Input<Inputs.StorePostgresArgs>? Postgres { get; set; }

        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.StoreSnowflakeArgs>? Snowflake { get; set; }

        public StoreArgs()
        {
        }
        public static new StoreArgs Empty => new StoreArgs();
    }

    public sealed class StoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent Kafka specific configuration
        /// </summary>
        [Input("confluentKafka")]
        public Input<Inputs.StoreConfluentKafkaGetArgs>? ConfluentKafka { get; set; }

        /// <summary>
        /// Creation date of the Store
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Kafka specific configuration
        /// </summary>
        [Input("kafka")]
        public Input<Inputs.StoreKafkaGetArgs>? Kafka { get; set; }

        /// <summary>
        /// Kinesis specific configuration
        /// </summary>
        [Input("kinesis")]
        public Input<Inputs.StoreKinesisGetArgs>? Kinesis { get; set; }

        /// <summary>
        /// Name of the Store
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owning role of the Store
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Postgres specific configuration
        /// </summary>
        [Input("postgres")]
        public Input<Inputs.StorePostgresGetArgs>? Postgres { get; set; }

        /// <summary>
        /// Snowflake specific configuration
        /// </summary>
        [Input("snowflake")]
        public Input<Inputs.StoreSnowflakeGetArgs>? Snowflake { get; set; }

        /// <summary>
        /// State of the Store
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Type of the Store
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Last update date of the Store
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public StoreState()
        {
        }
        public static new StoreState Empty => new StoreState();
    }
}
