// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi
{
    /// <summary>
    /// Schema registry resource
    /// </summary>
    [PulumiResourceType("deltastream:index/schemaRegistry:SchemaRegistry")]
    public partial class SchemaRegistry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Confluent specific configuration
        /// </summary>
        [Output("confluent")]
        public Output<Outputs.SchemaRegistryConfluent?> Confluent { get; private set; } = null!;

        /// <summary>
        /// Confluent cloud specific configuration
        /// </summary>
        [Output("confluentCloud")]
        public Output<Outputs.SchemaRegistryConfluentCloud?> ConfluentCloud { get; private set; } = null!;

        /// <summary>
        /// Creation date of the schema registry
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the schema registry
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Owning role of the schema registry
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Status of the schema registry
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Type of the schema registry
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Last update date of the schema registry
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a SchemaRegistry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SchemaRegistry(string name, SchemaRegistryArgs? args = null, CustomResourceOptions? options = null)
            : base("deltastream:index/schemaRegistry:SchemaRegistry", name, args ?? new SchemaRegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SchemaRegistry(string name, Input<string> id, SchemaRegistryState? state = null, CustomResourceOptions? options = null)
            : base("deltastream:index/schemaRegistry:SchemaRegistry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/deltastreaminc/pulumi-deltastream/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SchemaRegistry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SchemaRegistry Get(string name, Input<string> id, SchemaRegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new SchemaRegistry(name, id, state, options);
        }
    }

    public sealed class SchemaRegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent specific configuration
        /// </summary>
        [Input("confluent")]
        public Input<Inputs.SchemaRegistryConfluentArgs>? Confluent { get; set; }

        /// <summary>
        /// Confluent cloud specific configuration
        /// </summary>
        [Input("confluentCloud")]
        public Input<Inputs.SchemaRegistryConfluentCloudArgs>? ConfluentCloud { get; set; }

        /// <summary>
        /// Name of the schema registry
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owning role of the schema registry
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        public SchemaRegistryArgs()
        {
        }
        public static new SchemaRegistryArgs Empty => new SchemaRegistryArgs();
    }

    public sealed class SchemaRegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Confluent specific configuration
        /// </summary>
        [Input("confluent")]
        public Input<Inputs.SchemaRegistryConfluentGetArgs>? Confluent { get; set; }

        /// <summary>
        /// Confluent cloud specific configuration
        /// </summary>
        [Input("confluentCloud")]
        public Input<Inputs.SchemaRegistryConfluentCloudGetArgs>? ConfluentCloud { get; set; }

        /// <summary>
        /// Creation date of the schema registry
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Name of the schema registry
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Owning role of the schema registry
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Status of the schema registry
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Type of the schema registry
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Last update date of the schema registry
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public SchemaRegistryState()
        {
        }
        public static new SchemaRegistryState Empty => new SchemaRegistryState();
    }
}
