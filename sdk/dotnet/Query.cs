// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi
{
    /// <summary>
    /// Query resource
    /// </summary>
    [PulumiResourceType("deltastream:index/query:Query")]
    public partial class Query : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation date of the query
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Owning role of the query
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Query ID
        /// </summary>
        [Output("queryId")]
        public Output<string> QueryId { get; private set; } = null!;

        /// <summary>
        /// Query Name
        /// </summary>
        [Output("queryName")]
        public Output<string> QueryName { get; private set; } = null!;

        /// <summary>
        /// Query version
        /// </summary>
        [Output("queryVersion")]
        public Output<int> QueryVersion { get; private set; } = null!;

        /// <summary>
        /// Fully qualified sink relation name
        /// </summary>
        [Output("sinkRelationFqn")]
        public Output<string> SinkRelationFqn { get; private set; } = null!;

        /// <summary>
        /// List of fully qualified source relation names
        /// </summary>
        [Output("sourceRelationFqns")]
        public Output<ImmutableArray<string>> SourceRelationFqns { get; private set; } = null!;

        /// <summary>
        /// SQL statement to create the relation
        /// </summary>
        [Output("sql")]
        public Output<string> Sql { get; private set; } = null!;

        /// <summary>
        /// State of the Relation
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Creation date of the query
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Query resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Query(string name, QueryArgs args, CustomResourceOptions? options = null)
            : base("deltastream:index/query:Query", name, args ?? new QueryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Query(string name, Input<string> id, QueryState? state = null, CustomResourceOptions? options = null)
            : base("deltastream:index/query:Query", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/deltastreaminc/pulumi-deltastream/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Query resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Query Get(string name, Input<string> id, QueryState? state = null, CustomResourceOptions? options = null)
        {
            return new Query(name, id, state, options);
        }
    }

    public sealed class QueryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Owning role of the query
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Fully qualified sink relation name
        /// </summary>
        [Input("sinkRelationFqn", required: true)]
        public Input<string> SinkRelationFqn { get; set; } = null!;

        [Input("sourceRelationFqns", required: true)]
        private InputList<string>? _sourceRelationFqns;

        /// <summary>
        /// List of fully qualified source relation names
        /// </summary>
        public InputList<string> SourceRelationFqns
        {
            get => _sourceRelationFqns ?? (_sourceRelationFqns = new InputList<string>());
            set => _sourceRelationFqns = value;
        }

        /// <summary>
        /// SQL statement to create the relation
        /// </summary>
        [Input("sql", required: true)]
        public Input<string> Sql { get; set; } = null!;

        public QueryArgs()
        {
        }
        public static new QueryArgs Empty => new QueryArgs();
    }

    public sealed class QueryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation date of the query
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Owning role of the query
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Query ID
        /// </summary>
        [Input("queryId")]
        public Input<string>? QueryId { get; set; }

        /// <summary>
        /// Query Name
        /// </summary>
        [Input("queryName")]
        public Input<string>? QueryName { get; set; }

        /// <summary>
        /// Query version
        /// </summary>
        [Input("queryVersion")]
        public Input<int>? QueryVersion { get; set; }

        /// <summary>
        /// Fully qualified sink relation name
        /// </summary>
        [Input("sinkRelationFqn")]
        public Input<string>? SinkRelationFqn { get; set; }

        [Input("sourceRelationFqns")]
        private InputList<string>? _sourceRelationFqns;

        /// <summary>
        /// List of fully qualified source relation names
        /// </summary>
        public InputList<string> SourceRelationFqns
        {
            get => _sourceRelationFqns ?? (_sourceRelationFqns = new InputList<string>());
            set => _sourceRelationFqns = value;
        }

        /// <summary>
        /// SQL statement to create the relation
        /// </summary>
        [Input("sql")]
        public Input<string>? Sql { get; set; }

        /// <summary>
        /// State of the Relation
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Creation date of the query
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public QueryState()
        {
        }
        public static new QueryState Empty => new QueryState();
    }
}
