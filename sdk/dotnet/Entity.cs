// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace DeltaStream.Pulumi
{
    /// <summary>
    /// Database resource
    /// </summary>
    [PulumiResourceType("deltastream:index/entity:Entity")]
    public partial class Entity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Entity path
        /// </summary>
        [Output("entityPaths")]
        public Output<ImmutableArray<string>> EntityPaths { get; private set; } = null!;

        /// <summary>
        /// Kafka properties
        /// </summary>
        [Output("kafkaProperties")]
        public Output<Outputs.EntityKafkaProperties> KafkaProperties { get; private set; } = null!;

        /// <summary>
        /// Kinesis properties
        /// </summary>
        [Output("kinesisProperties")]
        public Output<Outputs.EntityKinesisProperties> KinesisProperties { get; private set; } = null!;

        /// <summary>
        /// Postgres properties
        /// </summary>
        [Output("postgresProperties")]
        public Output<Outputs.EntityPostgresProperties> PostgresProperties { get; private set; } = null!;

        /// <summary>
        /// Snowflake properties
        /// </summary>
        [Output("snowflakeProperties")]
        public Output<Outputs.EntitySnowflakeProperties> SnowflakeProperties { get; private set; } = null!;

        /// <summary>
        /// Store name
        /// </summary>
        [Output("store")]
        public Output<string> Store { get; private set; } = null!;


        /// <summary>
        /// Create a Entity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Entity(string name, EntityArgs args, CustomResourceOptions? options = null)
            : base("deltastream:index/entity:Entity", name, args ?? new EntityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Entity(string name, Input<string> id, EntityState? state = null, CustomResourceOptions? options = null)
            : base("deltastream:index/entity:Entity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/deltastreaminc/pulumi-deltastream/releases/download/v${VERSION}/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Entity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Entity Get(string name, Input<string> id, EntityState? state = null, CustomResourceOptions? options = null)
        {
            return new Entity(name, id, state, options);
        }
    }

    public sealed class EntityArgs : global::Pulumi.ResourceArgs
    {
        [Input("entityPaths", required: true)]
        private InputList<string>? _entityPaths;

        /// <summary>
        /// Entity path
        /// </summary>
        public InputList<string> EntityPaths
        {
            get => _entityPaths ?? (_entityPaths = new InputList<string>());
            set => _entityPaths = value;
        }

        /// <summary>
        /// Kafka properties
        /// </summary>
        [Input("kafkaProperties")]
        public Input<Inputs.EntityKafkaPropertiesArgs>? KafkaProperties { get; set; }

        /// <summary>
        /// Kinesis properties
        /// </summary>
        [Input("kinesisProperties")]
        public Input<Inputs.EntityKinesisPropertiesArgs>? KinesisProperties { get; set; }

        /// <summary>
        /// Postgres properties
        /// </summary>
        [Input("postgresProperties")]
        public Input<Inputs.EntityPostgresPropertiesArgs>? PostgresProperties { get; set; }

        /// <summary>
        /// Snowflake properties
        /// </summary>
        [Input("snowflakeProperties")]
        public Input<Inputs.EntitySnowflakePropertiesArgs>? SnowflakeProperties { get; set; }

        /// <summary>
        /// Store name
        /// </summary>
        [Input("store", required: true)]
        public Input<string> Store { get; set; } = null!;

        public EntityArgs()
        {
        }
        public static new EntityArgs Empty => new EntityArgs();
    }

    public sealed class EntityState : global::Pulumi.ResourceArgs
    {
        [Input("entityPaths")]
        private InputList<string>? _entityPaths;

        /// <summary>
        /// Entity path
        /// </summary>
        public InputList<string> EntityPaths
        {
            get => _entityPaths ?? (_entityPaths = new InputList<string>());
            set => _entityPaths = value;
        }

        /// <summary>
        /// Kafka properties
        /// </summary>
        [Input("kafkaProperties")]
        public Input<Inputs.EntityKafkaPropertiesGetArgs>? KafkaProperties { get; set; }

        /// <summary>
        /// Kinesis properties
        /// </summary>
        [Input("kinesisProperties")]
        public Input<Inputs.EntityKinesisPropertiesGetArgs>? KinesisProperties { get; set; }

        /// <summary>
        /// Postgres properties
        /// </summary>
        [Input("postgresProperties")]
        public Input<Inputs.EntityPostgresPropertiesGetArgs>? PostgresProperties { get; set; }

        /// <summary>
        /// Snowflake properties
        /// </summary>
        [Input("snowflakeProperties")]
        public Input<Inputs.EntitySnowflakePropertiesGetArgs>? SnowflakeProperties { get; set; }

        /// <summary>
        /// Store name
        /// </summary>
        [Input("store")]
        public Input<string>? Store { get; set; }

        public EntityState()
        {
        }
        public static new EntityState Empty => new EntityState();
    }
}
