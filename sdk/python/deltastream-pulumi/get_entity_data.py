# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEntityDataResult',
    'AwaitableGetEntityDataResult',
    'get_entity_data',
    'get_entity_data_output',
]

@pulumi.output_type
class GetEntityDataResult:
    """
    A collection of values returned by getEntityData.
    """
    def __init__(__self__, entity_paths=None, from_beginning=None, id=None, num_rows=None, rows=None, store=None):
        if entity_paths and not isinstance(entity_paths, list):
            raise TypeError("Expected argument 'entity_paths' to be a list")
        pulumi.set(__self__, "entity_paths", entity_paths)
        if from_beginning and not isinstance(from_beginning, bool):
            raise TypeError("Expected argument 'from_beginning' to be a bool")
        pulumi.set(__self__, "from_beginning", from_beginning)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if num_rows and not isinstance(num_rows, int):
            raise TypeError("Expected argument 'num_rows' to be a int")
        pulumi.set(__self__, "num_rows", num_rows)
        if rows and not isinstance(rows, list):
            raise TypeError("Expected argument 'rows' to be a list")
        pulumi.set(__self__, "rows", rows)
        if store and not isinstance(store, str):
            raise TypeError("Expected argument 'store' to be a str")
        pulumi.set(__self__, "store", store)

    @property
    @pulumi.getter(name="entityPaths")
    def entity_paths(self) -> Sequence[builtins.str]:
        """
        Path to entity
        """
        return pulumi.get(self, "entity_paths")

    @property
    @pulumi.getter(name="fromBeginning")
    def from_beginning(self) -> Optional[builtins.bool]:
        """
        Read from beginning
        """
        return pulumi.get(self, "from_beginning")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="numRows")
    def num_rows(self) -> Optional[builtins.int]:
        """
        Number of rows to return
        """
        return pulumi.get(self, "num_rows")

    @property
    @pulumi.getter
    def rows(self) -> Sequence[builtins.str]:
        """
        Rows
        """
        return pulumi.get(self, "rows")

    @property
    @pulumi.getter
    def store(self) -> builtins.str:
        """
        Name of the Store
        """
        return pulumi.get(self, "store")


class AwaitableGetEntityDataResult(GetEntityDataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntityDataResult(
            entity_paths=self.entity_paths,
            from_beginning=self.from_beginning,
            id=self.id,
            num_rows=self.num_rows,
            rows=self.rows,
            store=self.store)


def get_entity_data(entity_paths: Optional[Sequence[builtins.str]] = None,
                    from_beginning: Optional[builtins.bool] = None,
                    num_rows: Optional[builtins.int] = None,
                    store: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntityDataResult:
    """
    Entities in a store


    :param Sequence[builtins.str] entity_paths: Path to entity
    :param builtins.bool from_beginning: Read from beginning
    :param builtins.int num_rows: Number of rows to return
    :param builtins.str store: Name of the Store
    """
    __args__ = dict()
    __args__['entityPaths'] = entity_paths
    __args__['fromBeginning'] = from_beginning
    __args__['numRows'] = num_rows
    __args__['store'] = store
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('deltastream:index/getEntityData:getEntityData', __args__, opts=opts, typ=GetEntityDataResult).value

    return AwaitableGetEntityDataResult(
        entity_paths=pulumi.get(__ret__, 'entity_paths'),
        from_beginning=pulumi.get(__ret__, 'from_beginning'),
        id=pulumi.get(__ret__, 'id'),
        num_rows=pulumi.get(__ret__, 'num_rows'),
        rows=pulumi.get(__ret__, 'rows'),
        store=pulumi.get(__ret__, 'store'))
def get_entity_data_output(entity_paths: Optional[pulumi.Input[Sequence[builtins.str]]] = None,
                           from_beginning: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           num_rows: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           store: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEntityDataResult]:
    """
    Entities in a store


    :param Sequence[builtins.str] entity_paths: Path to entity
    :param builtins.bool from_beginning: Read from beginning
    :param builtins.int num_rows: Number of rows to return
    :param builtins.str store: Name of the Store
    """
    __args__ = dict()
    __args__['entityPaths'] = entity_paths
    __args__['fromBeginning'] = from_beginning
    __args__['numRows'] = num_rows
    __args__['store'] = store
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('deltastream:index/getEntityData:getEntityData', __args__, opts=opts, typ=GetEntityDataResult)
    return __ret__.apply(lambda __response__: GetEntityDataResult(
        entity_paths=pulumi.get(__response__, 'entity_paths'),
        from_beginning=pulumi.get(__response__, 'from_beginning'),
        id=pulumi.get(__response__, 'id'),
        num_rows=pulumi.get(__response__, 'num_rows'),
        rows=pulumi.get(__response__, 'rows'),
        store=pulumi.get(__response__, 'store')))
