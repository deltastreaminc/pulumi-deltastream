# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEntitiesResult',
    'AwaitableGetEntitiesResult',
    'get_entities',
    'get_entities_output',
]

@pulumi.output_type
class GetEntitiesResult:
    """
    A collection of values returned by getEntities.
    """
    def __init__(__self__, child_entities=None, id=None, parent_paths=None, store=None):
        if child_entities and not isinstance(child_entities, list):
            raise TypeError("Expected argument 'child_entities' to be a list")
        pulumi.set(__self__, "child_entities", child_entities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if parent_paths and not isinstance(parent_paths, list):
            raise TypeError("Expected argument 'parent_paths' to be a list")
        pulumi.set(__self__, "parent_paths", parent_paths)
        if store and not isinstance(store, str):
            raise TypeError("Expected argument 'store' to be a str")
        pulumi.set(__self__, "store", store)

    @property
    @pulumi.getter(name="childEntities")
    def child_entities(self) -> Sequence[builtins.str]:
        """
        Child entities
        """
        return pulumi.get(self, "child_entities")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="parentPaths")
    def parent_paths(self) -> Optional[Sequence[builtins.str]]:
        """
        Path to parent entity
        """
        return pulumi.get(self, "parent_paths")

    @property
    @pulumi.getter
    def store(self) -> builtins.str:
        """
        Name of the Store
        """
        return pulumi.get(self, "store")


class AwaitableGetEntitiesResult(GetEntitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEntitiesResult(
            child_entities=self.child_entities,
            id=self.id,
            parent_paths=self.parent_paths,
            store=self.store)


def get_entities(parent_paths: Optional[Sequence[builtins.str]] = None,
                 store: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEntitiesResult:
    """
    Entities in a store


    :param Sequence[builtins.str] parent_paths: Path to parent entity
    :param builtins.str store: Name of the Store
    """
    __args__ = dict()
    __args__['parentPaths'] = parent_paths
    __args__['store'] = store
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('deltastream:index/getEntities:getEntities', __args__, opts=opts, typ=GetEntitiesResult).value

    return AwaitableGetEntitiesResult(
        child_entities=pulumi.get(__ret__, 'child_entities'),
        id=pulumi.get(__ret__, 'id'),
        parent_paths=pulumi.get(__ret__, 'parent_paths'),
        store=pulumi.get(__ret__, 'store'))
def get_entities_output(parent_paths: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                        store: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEntitiesResult]:
    """
    Entities in a store


    :param Sequence[builtins.str] parent_paths: Path to parent entity
    :param builtins.str store: Name of the Store
    """
    __args__ = dict()
    __args__['parentPaths'] = parent_paths
    __args__['store'] = store
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('deltastream:index/getEntities:getEntities', __args__, opts=opts, typ=GetEntitiesResult)
    return __ret__.apply(lambda __response__: GetEntitiesResult(
        child_entities=pulumi.get(__response__, 'child_entities'),
        id=pulumi.get(__response__, 'id'),
        parent_paths=pulumi.get(__response__, 'parent_paths'),
        store=pulumi.get(__response__, 'store')))
