# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StoreArgs', 'Store']

@pulumi.input_type
class StoreArgs:
    def __init__(__self__, *,
                 confluent_kafka: Optional[pulumi.Input['StoreConfluentKafkaArgs']] = None,
                 kafka: Optional[pulumi.Input['StoreKafkaArgs']] = None,
                 kinesis: Optional[pulumi.Input['StoreKinesisArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 postgres: Optional[pulumi.Input['StorePostgresArgs']] = None,
                 snowflake: Optional[pulumi.Input['StoreSnowflakeArgs']] = None):
        """
        The set of arguments for constructing a Store resource.
        :param pulumi.Input['StoreConfluentKafkaArgs'] confluent_kafka: Confluent Kafka specific configuration
        :param pulumi.Input['StoreKafkaArgs'] kafka: Kafka specific configuration
        :param pulumi.Input['StoreKinesisArgs'] kinesis: Kinesis specific configuration
        :param pulumi.Input[builtins.str] name: Name of the Store
        :param pulumi.Input[builtins.str] owner: Owning role of the Store
        :param pulumi.Input['StorePostgresArgs'] postgres: Postgres specific configuration
        :param pulumi.Input['StoreSnowflakeArgs'] snowflake: Snowflake specific configuration
        """
        if confluent_kafka is not None:
            pulumi.set(__self__, "confluent_kafka", confluent_kafka)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kinesis is not None:
            pulumi.set(__self__, "kinesis", kinesis)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)

    @property
    @pulumi.getter(name="confluentKafka")
    def confluent_kafka(self) -> Optional[pulumi.Input['StoreConfluentKafkaArgs']]:
        """
        Confluent Kafka specific configuration
        """
        return pulumi.get(self, "confluent_kafka")

    @confluent_kafka.setter
    def confluent_kafka(self, value: Optional[pulumi.Input['StoreConfluentKafkaArgs']]):
        pulumi.set(self, "confluent_kafka", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['StoreKafkaArgs']]:
        """
        Kafka specific configuration
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['StoreKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input['StoreKinesisArgs']]:
        """
        Kinesis specific configuration
        """
        return pulumi.get(self, "kinesis")

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input['StoreKinesisArgs']]):
        pulumi.set(self, "kinesis", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Store
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the Store
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def postgres(self) -> Optional[pulumi.Input['StorePostgresArgs']]:
        """
        Postgres specific configuration
        """
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: Optional[pulumi.Input['StorePostgresArgs']]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['StoreSnowflakeArgs']]:
        """
        Snowflake specific configuration
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['StoreSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)


@pulumi.input_type
class _StoreState:
    def __init__(__self__, *,
                 confluent_kafka: Optional[pulumi.Input['StoreConfluentKafkaArgs']] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 kafka: Optional[pulumi.Input['StoreKafkaArgs']] = None,
                 kinesis: Optional[pulumi.Input['StoreKinesisArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 postgres: Optional[pulumi.Input['StorePostgresArgs']] = None,
                 snowflake: Optional[pulumi.Input['StoreSnowflakeArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Store resources.
        :param pulumi.Input['StoreConfluentKafkaArgs'] confluent_kafka: Confluent Kafka specific configuration
        :param pulumi.Input[builtins.str] created_at: Creation date of the Store
        :param pulumi.Input['StoreKafkaArgs'] kafka: Kafka specific configuration
        :param pulumi.Input['StoreKinesisArgs'] kinesis: Kinesis specific configuration
        :param pulumi.Input[builtins.str] name: Name of the Store
        :param pulumi.Input[builtins.str] owner: Owning role of the Store
        :param pulumi.Input['StorePostgresArgs'] postgres: Postgres specific configuration
        :param pulumi.Input['StoreSnowflakeArgs'] snowflake: Snowflake specific configuration
        :param pulumi.Input[builtins.str] state: State of the Store
        :param pulumi.Input[builtins.str] type: Type of the Store
        :param pulumi.Input[builtins.str] updated_at: Last update date of the Store
        """
        if confluent_kafka is not None:
            pulumi.set(__self__, "confluent_kafka", confluent_kafka)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kinesis is not None:
            pulumi.set(__self__, "kinesis", kinesis)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if postgres is not None:
            pulumi.set(__self__, "postgres", postgres)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="confluentKafka")
    def confluent_kafka(self) -> Optional[pulumi.Input['StoreConfluentKafkaArgs']]:
        """
        Confluent Kafka specific configuration
        """
        return pulumi.get(self, "confluent_kafka")

    @confluent_kafka.setter
    def confluent_kafka(self, value: Optional[pulumi.Input['StoreConfluentKafkaArgs']]):
        pulumi.set(self, "confluent_kafka", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Creation date of the Store
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def kafka(self) -> Optional[pulumi.Input['StoreKafkaArgs']]:
        """
        Kafka specific configuration
        """
        return pulumi.get(self, "kafka")

    @kafka.setter
    def kafka(self, value: Optional[pulumi.Input['StoreKafkaArgs']]):
        pulumi.set(self, "kafka", value)

    @property
    @pulumi.getter
    def kinesis(self) -> Optional[pulumi.Input['StoreKinesisArgs']]:
        """
        Kinesis specific configuration
        """
        return pulumi.get(self, "kinesis")

    @kinesis.setter
    def kinesis(self, value: Optional[pulumi.Input['StoreKinesisArgs']]):
        pulumi.set(self, "kinesis", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Store
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the Store
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def postgres(self) -> Optional[pulumi.Input['StorePostgresArgs']]:
        """
        Postgres specific configuration
        """
        return pulumi.get(self, "postgres")

    @postgres.setter
    def postgres(self, value: Optional[pulumi.Input['StorePostgresArgs']]):
        pulumi.set(self, "postgres", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['StoreSnowflakeArgs']]:
        """
        Snowflake specific configuration
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['StoreSnowflakeArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State of the Store
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of the Store
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Last update date of the Store
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("deltastream:index/store:Store")
class Store(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confluent_kafka: Optional[pulumi.Input[Union['StoreConfluentKafkaArgs', 'StoreConfluentKafkaArgsDict']]] = None,
                 kafka: Optional[pulumi.Input[Union['StoreKafkaArgs', 'StoreKafkaArgsDict']]] = None,
                 kinesis: Optional[pulumi.Input[Union['StoreKinesisArgs', 'StoreKinesisArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 postgres: Optional[pulumi.Input[Union['StorePostgresArgs', 'StorePostgresArgsDict']]] = None,
                 snowflake: Optional[pulumi.Input[Union['StoreSnowflakeArgs', 'StoreSnowflakeArgsDict']]] = None,
                 __props__=None):
        """
        Store resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['StoreConfluentKafkaArgs', 'StoreConfluentKafkaArgsDict']] confluent_kafka: Confluent Kafka specific configuration
        :param pulumi.Input[Union['StoreKafkaArgs', 'StoreKafkaArgsDict']] kafka: Kafka specific configuration
        :param pulumi.Input[Union['StoreKinesisArgs', 'StoreKinesisArgsDict']] kinesis: Kinesis specific configuration
        :param pulumi.Input[builtins.str] name: Name of the Store
        :param pulumi.Input[builtins.str] owner: Owning role of the Store
        :param pulumi.Input[Union['StorePostgresArgs', 'StorePostgresArgsDict']] postgres: Postgres specific configuration
        :param pulumi.Input[Union['StoreSnowflakeArgs', 'StoreSnowflakeArgsDict']] snowflake: Snowflake specific configuration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StoreArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Store resource

        :param str resource_name: The name of the resource.
        :param StoreArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StoreArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confluent_kafka: Optional[pulumi.Input[Union['StoreConfluentKafkaArgs', 'StoreConfluentKafkaArgsDict']]] = None,
                 kafka: Optional[pulumi.Input[Union['StoreKafkaArgs', 'StoreKafkaArgsDict']]] = None,
                 kinesis: Optional[pulumi.Input[Union['StoreKinesisArgs', 'StoreKinesisArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 postgres: Optional[pulumi.Input[Union['StorePostgresArgs', 'StorePostgresArgsDict']]] = None,
                 snowflake: Optional[pulumi.Input[Union['StoreSnowflakeArgs', 'StoreSnowflakeArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StoreArgs.__new__(StoreArgs)

            __props__.__dict__["confluent_kafka"] = confluent_kafka
            __props__.__dict__["kafka"] = kafka
            __props__.__dict__["kinesis"] = kinesis
            __props__.__dict__["name"] = name
            __props__.__dict__["owner"] = owner
            __props__.__dict__["postgres"] = postgres
            __props__.__dict__["snowflake"] = snowflake
            __props__.__dict__["created_at"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
        super(Store, __self__).__init__(
            'deltastream:index/store:Store',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            confluent_kafka: Optional[pulumi.Input[Union['StoreConfluentKafkaArgs', 'StoreConfluentKafkaArgsDict']]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            kafka: Optional[pulumi.Input[Union['StoreKafkaArgs', 'StoreKafkaArgsDict']]] = None,
            kinesis: Optional[pulumi.Input[Union['StoreKinesisArgs', 'StoreKinesisArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[builtins.str]] = None,
            postgres: Optional[pulumi.Input[Union['StorePostgresArgs', 'StorePostgresArgsDict']]] = None,
            snowflake: Optional[pulumi.Input[Union['StoreSnowflakeArgs', 'StoreSnowflakeArgsDict']]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None) -> 'Store':
        """
        Get an existing Store resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['StoreConfluentKafkaArgs', 'StoreConfluentKafkaArgsDict']] confluent_kafka: Confluent Kafka specific configuration
        :param pulumi.Input[builtins.str] created_at: Creation date of the Store
        :param pulumi.Input[Union['StoreKafkaArgs', 'StoreKafkaArgsDict']] kafka: Kafka specific configuration
        :param pulumi.Input[Union['StoreKinesisArgs', 'StoreKinesisArgsDict']] kinesis: Kinesis specific configuration
        :param pulumi.Input[builtins.str] name: Name of the Store
        :param pulumi.Input[builtins.str] owner: Owning role of the Store
        :param pulumi.Input[Union['StorePostgresArgs', 'StorePostgresArgsDict']] postgres: Postgres specific configuration
        :param pulumi.Input[Union['StoreSnowflakeArgs', 'StoreSnowflakeArgsDict']] snowflake: Snowflake specific configuration
        :param pulumi.Input[builtins.str] state: State of the Store
        :param pulumi.Input[builtins.str] type: Type of the Store
        :param pulumi.Input[builtins.str] updated_at: Last update date of the Store
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StoreState.__new__(_StoreState)

        __props__.__dict__["confluent_kafka"] = confluent_kafka
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["kafka"] = kafka
        __props__.__dict__["kinesis"] = kinesis
        __props__.__dict__["name"] = name
        __props__.__dict__["owner"] = owner
        __props__.__dict__["postgres"] = postgres
        __props__.__dict__["snowflake"] = snowflake
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return Store(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="confluentKafka")
    def confluent_kafka(self) -> pulumi.Output[Optional['outputs.StoreConfluentKafka']]:
        """
        Confluent Kafka specific configuration
        """
        return pulumi.get(self, "confluent_kafka")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Creation date of the Store
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def kafka(self) -> pulumi.Output[Optional['outputs.StoreKafka']]:
        """
        Kafka specific configuration
        """
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter
    def kinesis(self) -> pulumi.Output[Optional['outputs.StoreKinesis']]:
        """
        Kinesis specific configuration
        """
        return pulumi.get(self, "kinesis")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Store
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[builtins.str]:
        """
        Owning role of the Store
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def postgres(self) -> pulumi.Output[Optional['outputs.StorePostgres']]:
        """
        Postgres specific configuration
        """
        return pulumi.get(self, "postgres")

    @property
    @pulumi.getter
    def snowflake(self) -> pulumi.Output[Optional['outputs.StoreSnowflake']]:
        """
        Snowflake specific configuration
        """
        return pulumi.get(self, "snowflake")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        State of the Store
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        Type of the Store
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Last update date of the Store
        """
        return pulumi.get(self, "updated_at")

