# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DeltaStreamObjectArgs', 'DeltaStreamObject']

@pulumi.input_type
class DeltaStreamObjectArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[builtins.str],
                 namespace: pulumi.Input[builtins.str],
                 sql: pulumi.Input[builtins.str],
                 store: pulumi.Input[builtins.str],
                 owner: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DeltaStreamObject resource.
        :param pulumi.Input[builtins.str] database: Name of the Database
        :param pulumi.Input[builtins.str] namespace: Name of the Namespace
        :param pulumi.Input[builtins.str] sql: SQL statement to create the object
        :param pulumi.Input[builtins.str] store: Name of the Store
        :param pulumi.Input[builtins.str] owner: Owning role of the object
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "sql", sql)
        pulumi.set(__self__, "store", store)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Database
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Namespace
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Input[builtins.str]:
        """
        SQL statement to create the object
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def store(self) -> pulumi.Input[builtins.str]:
        """
        Name of the Store
        """
        return pulumi.get(self, "store")

    @store.setter
    def store(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "store", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the object
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)


@pulumi.input_type
class _DeltaStreamObjectState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 fqn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering DeltaStreamObject resources.
        :param pulumi.Input[builtins.str] created_at: Creation date of the object
        :param pulumi.Input[builtins.str] database: Name of the Database
        :param pulumi.Input[builtins.str] fqn: Fully qualified name of the Object
        :param pulumi.Input[builtins.str] name: Name of the Object
        :param pulumi.Input[builtins.str] namespace: Name of the Namespace
        :param pulumi.Input[builtins.str] owner: Owning role of the object
        :param pulumi.Input[builtins.str] sql: SQL statement to create the object
        :param pulumi.Input[builtins.str] state: State of the Object
        :param pulumi.Input[builtins.str] store: Name of the Store
        :param pulumi.Input[builtins.str] type: Type of the Object
        :param pulumi.Input[builtins.str] updated_at: Last update date of the object
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if fqn is not None:
            pulumi.set(__self__, "fqn", fqn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if store is not None:
            pulumi.set(__self__, "store", store)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Creation date of the object
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Database
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def fqn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Fully qualified name of the Object
        """
        return pulumi.get(self, "fqn")

    @fqn.setter
    def fqn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "fqn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Object
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Namespace
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the object
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SQL statement to create the object
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State of the Object
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def store(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Store
        """
        return pulumi.get(self, "store")

    @store.setter
    def store(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "store", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of the Object
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Last update date of the object
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("deltastream:index/object:DeltaStreamObject")
class DeltaStreamObject(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Object resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] database: Name of the Database
        :param pulumi.Input[builtins.str] namespace: Name of the Namespace
        :param pulumi.Input[builtins.str] owner: Owning role of the object
        :param pulumi.Input[builtins.str] sql: SQL statement to create the object
        :param pulumi.Input[builtins.str] store: Name of the Store
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeltaStreamObjectArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Object resource

        :param str resource_name: The name of the resource.
        :param DeltaStreamObjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeltaStreamObjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database: Optional[pulumi.Input[builtins.str]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeltaStreamObjectArgs.__new__(DeltaStreamObjectArgs)

            if database is None and not opts.urn:
                raise TypeError("Missing required property 'database'")
            __props__.__dict__["database"] = database
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["owner"] = owner
            if sql is None and not opts.urn:
                raise TypeError("Missing required property 'sql'")
            __props__.__dict__["sql"] = sql
            if store is None and not opts.urn:
                raise TypeError("Missing required property 'store'")
            __props__.__dict__["store"] = store
            __props__.__dict__["created_at"] = None
            __props__.__dict__["fqn"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["updated_at"] = None
        super(DeltaStreamObject, __self__).__init__(
            'deltastream:index/object:DeltaStreamObject',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            database: Optional[pulumi.Input[builtins.str]] = None,
            fqn: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[builtins.str]] = None,
            sql: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            store: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None) -> 'DeltaStreamObject':
        """
        Get an existing DeltaStreamObject resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] created_at: Creation date of the object
        :param pulumi.Input[builtins.str] database: Name of the Database
        :param pulumi.Input[builtins.str] fqn: Fully qualified name of the Object
        :param pulumi.Input[builtins.str] name: Name of the Object
        :param pulumi.Input[builtins.str] namespace: Name of the Namespace
        :param pulumi.Input[builtins.str] owner: Owning role of the object
        :param pulumi.Input[builtins.str] sql: SQL statement to create the object
        :param pulumi.Input[builtins.str] state: State of the Object
        :param pulumi.Input[builtins.str] store: Name of the Store
        :param pulumi.Input[builtins.str] type: Type of the Object
        :param pulumi.Input[builtins.str] updated_at: Last update date of the object
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeltaStreamObjectState.__new__(_DeltaStreamObjectState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["database"] = database
        __props__.__dict__["fqn"] = fqn
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["owner"] = owner
        __props__.__dict__["sql"] = sql
        __props__.__dict__["state"] = state
        __props__.__dict__["store"] = store
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_at"] = updated_at
        return DeltaStreamObject(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Creation date of the object
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Database
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def fqn(self) -> pulumi.Output[builtins.str]:
        """
        Fully qualified name of the Object
        """
        return pulumi.get(self, "fqn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Object
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[builtins.str]:
        """
        Owning role of the object
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Output[builtins.str]:
        """
        SQL statement to create the object
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        State of the Object
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def store(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Store
        """
        return pulumi.get(self, "store")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        Type of the Object
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Last update date of the object
        """
        return pulumi.get(self, "updated_at")

