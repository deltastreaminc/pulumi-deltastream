# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'EntityKafkaProperties',
    'EntityKinesisProperties',
    'EntityPostgresProperties',
    'EntitySnowflakeProperties',
    'SchemaRegistryConfluent',
    'SchemaRegistryConfluentCloud',
    'StoreConfluentKafka',
    'StoreKafka',
    'StoreKinesis',
    'StorePostgres',
    'StoreSnowflake',
    'GetDatabasesItemResult',
    'GetNamespacesItemResult',
    'GetObjectsObjectResult',
    'GetSchemaRegistriesItemResult',
    'GetSecretsItemResult',
    'GetStoreConfluentKafkaResult',
    'GetStoreKafkaResult',
    'GetStoreKinesisResult',
    'GetStorePostgresResult',
    'GetStoreSnowflakeResult',
    'GetStoresItemResult',
]

@pulumi.output_type
class EntityKafkaProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allConfigs":
            suggest = "all_configs"
        elif key == "keyDescriptor":
            suggest = "key_descriptor"
        elif key == "topicPartitions":
            suggest = "topic_partitions"
        elif key == "topicReplicas":
            suggest = "topic_replicas"
        elif key == "valueDescriptor":
            suggest = "value_descriptor"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityKafkaProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityKafkaProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityKafkaProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_configs: Optional[Mapping[str, builtins.str]] = None,
                 configs: Optional[Mapping[str, builtins.str]] = None,
                 key_descriptor: Optional[builtins.str] = None,
                 topic_partitions: Optional[builtins.int] = None,
                 topic_replicas: Optional[builtins.int] = None,
                 value_descriptor: Optional[builtins.str] = None):
        """
        :param Mapping[str, builtins.str] all_configs: All topic configurations including any server set configurations
        :param Mapping[str, builtins.str] configs: Additional topic configurations
        :param builtins.str key_descriptor: Protobuf descriptor for key
        :param builtins.int topic_partitions: Number of partitions
        :param builtins.int topic_replicas: Number of replicas
        :param builtins.str value_descriptor: Protobuf descriptor for value
        """
        if all_configs is not None:
            pulumi.set(__self__, "all_configs", all_configs)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if key_descriptor is not None:
            pulumi.set(__self__, "key_descriptor", key_descriptor)
        if topic_partitions is not None:
            pulumi.set(__self__, "topic_partitions", topic_partitions)
        if topic_replicas is not None:
            pulumi.set(__self__, "topic_replicas", topic_replicas)
        if value_descriptor is not None:
            pulumi.set(__self__, "value_descriptor", value_descriptor)

    @property
    @pulumi.getter(name="allConfigs")
    def all_configs(self) -> Optional[Mapping[str, builtins.str]]:
        """
        All topic configurations including any server set configurations
        """
        return pulumi.get(self, "all_configs")

    @property
    @pulumi.getter
    def configs(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Additional topic configurations
        """
        return pulumi.get(self, "configs")

    @property
    @pulumi.getter(name="keyDescriptor")
    def key_descriptor(self) -> Optional[builtins.str]:
        """
        Protobuf descriptor for key
        """
        return pulumi.get(self, "key_descriptor")

    @property
    @pulumi.getter(name="topicPartitions")
    def topic_partitions(self) -> Optional[builtins.int]:
        """
        Number of partitions
        """
        return pulumi.get(self, "topic_partitions")

    @property
    @pulumi.getter(name="topicReplicas")
    def topic_replicas(self) -> Optional[builtins.int]:
        """
        Number of replicas
        """
        return pulumi.get(self, "topic_replicas")

    @property
    @pulumi.getter(name="valueDescriptor")
    def value_descriptor(self) -> Optional[builtins.str]:
        """
        Protobuf descriptor for value
        """
        return pulumi.get(self, "value_descriptor")


@pulumi.output_type
class EntityKinesisProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kinesisShards":
            suggest = "kinesis_shards"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EntityKinesisProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EntityKinesisProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EntityKinesisProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 descriptor: Optional[builtins.str] = None,
                 kinesis_shards: Optional[builtins.int] = None):
        """
        :param builtins.str descriptor: Protobuf descriptor for the value
        :param builtins.int kinesis_shards: Number of shards
        """
        if descriptor is not None:
            pulumi.set(__self__, "descriptor", descriptor)
        if kinesis_shards is not None:
            pulumi.set(__self__, "kinesis_shards", kinesis_shards)

    @property
    @pulumi.getter
    def descriptor(self) -> Optional[builtins.str]:
        """
        Protobuf descriptor for the value
        """
        return pulumi.get(self, "descriptor")

    @property
    @pulumi.getter(name="kinesisShards")
    def kinesis_shards(self) -> Optional[builtins.int]:
        """
        Number of shards
        """
        return pulumi.get(self, "kinesis_shards")


@pulumi.output_type
class EntityPostgresProperties(dict):
    def __init__(__self__, *,
                 details: Optional[Mapping[str, builtins.str]] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)

    @property
    @pulumi.getter
    def details(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "details")


@pulumi.output_type
class EntitySnowflakeProperties(dict):
    def __init__(__self__, *,
                 details: Optional[Mapping[str, builtins.str]] = None):
        if details is not None:
            pulumi.set(__self__, "details", details)

    @property
    @pulumi.getter
    def details(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "details")


@pulumi.output_type
class SchemaRegistryConfluent(dict):
    def __init__(__self__, *,
                 uris: builtins.str,
                 password: Optional[builtins.str] = None,
                 username: Optional[builtins.str] = None):
        """
        :param builtins.str uris: List of host:port URIs to connect to the schema registry
        :param builtins.str password: Password to use when authenticating with confluent schema registry
        :param builtins.str username: Username to use when authenticating with confluent schema registry
        """
        pulumi.set(__self__, "uris", uris)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the schema registry
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        """
        Password to use when authenticating with confluent schema registry
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[builtins.str]:
        """
        Username to use when authenticating with confluent schema registry
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class SchemaRegistryConfluentCloud(dict):
    def __init__(__self__, *,
                 uris: builtins.str,
                 key: Optional[builtins.str] = None,
                 secret: Optional[builtins.str] = None):
        """
        :param builtins.str uris: List of host:port URIs to connect to the schema registry
        :param builtins.str key: Key to use when authenticating with confluent cloud schema registry
        :param builtins.str secret: Secret to use when authenticating with confluent cloud schema registry
        """
        pulumi.set(__self__, "uris", uris)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the schema registry
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        Key to use when authenticating with confluent cloud schema registry
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def secret(self) -> Optional[builtins.str]:
        """
        Secret to use when authenticating with confluent cloud schema registry
        """
        return pulumi.get(self, "secret")


@pulumi.output_type
class StoreConfluentKafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saslHashFunction":
            suggest = "sasl_hash_function"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StoreConfluentKafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StoreConfluentKafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StoreConfluentKafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sasl_hash_function: builtins.str,
                 sasl_password: builtins.str,
                 sasl_username: builtins.str,
                 uris: builtins.str):
        """
        :param builtins.str sasl_hash_function: SASL hash function to use when authenticating with Confluent Kafka brokers
        :param builtins.str sasl_password: Password to use when authenticating with Apache Kafka brokers
        :param builtins.str sasl_username: Username to use when authenticating with Apache Kafka brokers
        :param builtins.str uris: List of host:port URIs to connect to the store
        """
        pulumi.set(__self__, "sasl_hash_function", sasl_hash_function)
        pulumi.set(__self__, "sasl_password", sasl_password)
        pulumi.set(__self__, "sasl_username", sasl_username)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="saslHashFunction")
    def sasl_hash_function(self) -> builtins.str:
        """
        SASL hash function to use when authenticating with Confluent Kafka brokers
        """
        return pulumi.get(self, "sasl_hash_function")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> builtins.str:
        """
        Password to use when authenticating with Apache Kafka brokers
        """
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> builtins.str:
        """
        Username to use when authenticating with Apache Kafka brokers
        """
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")


@pulumi.output_type
class StoreKafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saslHashFunction":
            suggest = "sasl_hash_function"
        elif key == "mskAwsRegion":
            suggest = "msk_aws_region"
        elif key == "mskIamRoleArn":
            suggest = "msk_iam_role_arn"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"
        elif key == "schemaRegistryName":
            suggest = "schema_registry_name"
        elif key == "tlsCaCertFile":
            suggest = "tls_ca_cert_file"
        elif key == "tlsDisabled":
            suggest = "tls_disabled"
        elif key == "tlsVerifyServerHostname":
            suggest = "tls_verify_server_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StoreKafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StoreKafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StoreKafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sasl_hash_function: builtins.str,
                 uris: builtins.str,
                 msk_aws_region: Optional[builtins.str] = None,
                 msk_iam_role_arn: Optional[builtins.str] = None,
                 sasl_password: Optional[builtins.str] = None,
                 sasl_username: Optional[builtins.str] = None,
                 schema_registry_name: Optional[builtins.str] = None,
                 tls_ca_cert_file: Optional[builtins.str] = None,
                 tls_disabled: Optional[builtins.bool] = None,
                 tls_verify_server_hostname: Optional[builtins.bool] = None):
        """
        :param builtins.str sasl_hash_function: SASL hash function to use when authenticating with Apache Kafka brokers
        :param builtins.str uris: List of host:port URIs to connect to the store
        :param builtins.str msk_aws_region: AWS region where the Amazon MSK cluster is located
        :param builtins.str msk_iam_role_arn: IAM role ARN to use when authenticating with Amazon MSK
        :param builtins.str sasl_password: Password to use when authenticating with Apache Kafka brokers
        :param builtins.str sasl_username: Username to use when authenticating with Apache Kafka brokers
        :param builtins.str schema_registry_name: Name of the schema registry
        :param builtins.str tls_ca_cert_file: CA certificate in PEM format
        :param builtins.bool tls_disabled: Specifies if the store should be accessed over TLS
        :param builtins.bool tls_verify_server_hostname: Specifies if the server CNAME should be validated against the certificate
        """
        pulumi.set(__self__, "sasl_hash_function", sasl_hash_function)
        pulumi.set(__self__, "uris", uris)
        if msk_aws_region is not None:
            pulumi.set(__self__, "msk_aws_region", msk_aws_region)
        if msk_iam_role_arn is not None:
            pulumi.set(__self__, "msk_iam_role_arn", msk_iam_role_arn)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if schema_registry_name is not None:
            pulumi.set(__self__, "schema_registry_name", schema_registry_name)
        if tls_ca_cert_file is not None:
            pulumi.set(__self__, "tls_ca_cert_file", tls_ca_cert_file)
        if tls_disabled is not None:
            pulumi.set(__self__, "tls_disabled", tls_disabled)
        if tls_verify_server_hostname is not None:
            pulumi.set(__self__, "tls_verify_server_hostname", tls_verify_server_hostname)

    @property
    @pulumi.getter(name="saslHashFunction")
    def sasl_hash_function(self) -> builtins.str:
        """
        SASL hash function to use when authenticating with Apache Kafka brokers
        """
        return pulumi.get(self, "sasl_hash_function")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter(name="mskAwsRegion")
    def msk_aws_region(self) -> Optional[builtins.str]:
        """
        AWS region where the Amazon MSK cluster is located
        """
        return pulumi.get(self, "msk_aws_region")

    @property
    @pulumi.getter(name="mskIamRoleArn")
    def msk_iam_role_arn(self) -> Optional[builtins.str]:
        """
        IAM role ARN to use when authenticating with Amazon MSK
        """
        return pulumi.get(self, "msk_iam_role_arn")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[builtins.str]:
        """
        Password to use when authenticating with Apache Kafka brokers
        """
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[builtins.str]:
        """
        Username to use when authenticating with Apache Kafka brokers
        """
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="schemaRegistryName")
    def schema_registry_name(self) -> Optional[builtins.str]:
        """
        Name of the schema registry
        """
        return pulumi.get(self, "schema_registry_name")

    @property
    @pulumi.getter(name="tlsCaCertFile")
    def tls_ca_cert_file(self) -> Optional[builtins.str]:
        """
        CA certificate in PEM format
        """
        return pulumi.get(self, "tls_ca_cert_file")

    @property
    @pulumi.getter(name="tlsDisabled")
    def tls_disabled(self) -> Optional[builtins.bool]:
        """
        Specifies if the store should be accessed over TLS
        """
        return pulumi.get(self, "tls_disabled")

    @property
    @pulumi.getter(name="tlsVerifyServerHostname")
    def tls_verify_server_hostname(self) -> Optional[builtins.bool]:
        """
        Specifies if the server CNAME should be validated against the certificate
        """
        return pulumi.get(self, "tls_verify_server_hostname")


@pulumi.output_type
class StoreKinesis(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StoreKinesis. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StoreKinesis.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StoreKinesis.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_id: builtins.str,
                 uris: builtins.str,
                 access_key_id: Optional[builtins.str] = None,
                 secret_access_key: Optional[builtins.str] = None):
        """
        :param builtins.str aws_account_id: AWS account ID to use when authenticating with an Amazon Kinesis service
        :param builtins.str uris: List of host:port URIs to connect to the store
        :param builtins.str access_key_id: AWS IAM access key to use when authenticating with an Amazon Kinesis service
        :param builtins.str secret_access_key: AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
        """
        pulumi.set(__self__, "aws_account_id", aws_account_id)
        pulumi.set(__self__, "uris", uris)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> builtins.str:
        """
        AWS account ID to use when authenticating with an Amazon Kinesis service
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[builtins.str]:
        """
        AWS IAM access key to use when authenticating with an Amazon Kinesis service
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[builtins.str]:
        """
        AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
        """
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class StorePostgres(dict):
    def __init__(__self__, *,
                 password: builtins.str,
                 uris: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str password: Password to use when authenticating with a Postgres database
        :param builtins.str uris: List of host:port URIs to connect to the store
        :param builtins.str username: Username to use when authenticating with a Postgres database
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "uris", uris)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        Password to use when authenticating with a Postgres database
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        Username to use when authenticating with a Postgres database
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class StoreSnowflake(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "clientKeyFile":
            suggest = "client_key_file"
        elif key == "clientKeyPassphrase":
            suggest = "client_key_passphrase"
        elif key == "cloudRegion":
            suggest = "cloud_region"
        elif key == "roleName":
            suggest = "role_name"
        elif key == "warehouseName":
            suggest = "warehouse_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StoreSnowflake. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StoreSnowflake.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StoreSnowflake.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: builtins.str,
                 client_key_file: builtins.str,
                 client_key_passphrase: builtins.str,
                 cloud_region: builtins.str,
                 role_name: builtins.str,
                 uris: builtins.str,
                 username: builtins.str,
                 warehouse_name: builtins.str):
        """
        :param builtins.str account_id: Snowflake account ID
        :param builtins.str client_key_file: Snowflake account's private key in PEM format
        :param builtins.str client_key_passphrase: Passphrase for decrypting the Snowflake account's private key
        :param builtins.str cloud_region: Snowflake cloud region name, where the account resources operate in
        :param builtins.str role_name: Access control role to use for the Store operations after connecting to Snowflake
        :param builtins.str uris: List of host:port URIs to connect to the store
        :param builtins.str username: User login name for the Snowflake account
        :param builtins.str warehouse_name: Warehouse name to use for queries and other store operations that require compute resource
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_key_file", client_key_file)
        pulumi.set(__self__, "client_key_passphrase", client_key_passphrase)
        pulumi.set(__self__, "cloud_region", cloud_region)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "uris", uris)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse_name", warehouse_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Snowflake account ID
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="clientKeyFile")
    def client_key_file(self) -> builtins.str:
        """
        Snowflake account's private key in PEM format
        """
        return pulumi.get(self, "client_key_file")

    @property
    @pulumi.getter(name="clientKeyPassphrase")
    def client_key_passphrase(self) -> builtins.str:
        """
        Passphrase for decrypting the Snowflake account's private key
        """
        return pulumi.get(self, "client_key_passphrase")

    @property
    @pulumi.getter(name="cloudRegion")
    def cloud_region(self) -> builtins.str:
        """
        Snowflake cloud region name, where the account resources operate in
        """
        return pulumi.get(self, "cloud_region")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> builtins.str:
        """
        Access control role to use for the Store operations after connecting to Snowflake
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        User login name for the Snowflake account
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="warehouseName")
    def warehouse_name(self) -> builtins.str:
        """
        Warehouse name to use for queries and other store operations that require compute resource
        """
        return pulumi.get(self, "warehouse_name")


@pulumi.output_type
class GetDatabasesItemResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 name: builtins.str,
                 owner: builtins.str):
        """
        :param builtins.str created_at: Creation date of the Database
        :param builtins.str name: Name of the Database
        :param builtins.str owner: Owning role of the Database
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the Database
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Database
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the Database
        """
        return pulumi.get(self, "owner")


@pulumi.output_type
class GetNamespacesItemResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 database: builtins.str,
                 name: builtins.str,
                 owner: builtins.str):
        """
        :param builtins.str created_at: Creation date of the Namespace
        :param builtins.str database: Name of the Database
        :param builtins.str name: Name of the Namespace
        :param builtins.str owner: Owning role of the Namespace
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the Namespace
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        Name of the Database
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Namespace
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the Namespace
        """
        return pulumi.get(self, "owner")


@pulumi.output_type
class GetObjectsObjectResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 database: builtins.str,
                 fqn: builtins.str,
                 name: builtins.str,
                 namespace: builtins.str,
                 owner: builtins.str,
                 state: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str created_at: Creation date of the object
        :param builtins.str database: Name of the Database
        :param builtins.str fqn: Fully qualified name of the Object
        :param builtins.str name: Name of the Object
        :param builtins.str namespace: Name of the Namespace
        :param builtins.str owner: Owning role of the object
        :param builtins.str state: State of the Object
        :param builtins.str type: Type of the Object
        :param builtins.str updated_at: Last update date of the object
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "fqn", fqn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the object
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def database(self) -> builtins.str:
        """
        Name of the Database
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def fqn(self) -> builtins.str:
        """
        Fully qualified name of the Object
        """
        return pulumi.get(self, "fqn")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Object
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> builtins.str:
        """
        Name of the Namespace
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the object
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        State of the Object
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the Object
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Last update date of the object
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSchemaRegistriesItemResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 name: builtins.str,
                 owner: builtins.str,
                 state: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str created_at: Creation date of the schema registry
        :param builtins.str name: Name of the schema registry
        :param builtins.str owner: Owning role of the schema registry
        :param builtins.str state: State of the schema registry
        :param builtins.str type: Type of the schema registry
        :param builtins.str updated_at: Last update date of the schema registry
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the schema registry
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the schema registry
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the schema registry
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        State of the schema registry
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the schema registry
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Last update date of the schema registry
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetSecretsItemResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 description: builtins.str,
                 name: builtins.str,
                 owner: builtins.str,
                 status: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str created_at: Creation date of the Secret
        :param builtins.str description: Description of the Secret
        :param builtins.str name: Name of the Secret
        :param builtins.str owner: Owning role of the Secret
        :param builtins.str status: Status of the Secret
        :param builtins.str type: Secret type. (Valid values: generic_string)
        :param builtins.str updated_at: Last update date of the Secret
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the Secret
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        Description of the Secret
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Secret
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the Secret
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        Status of the Secret
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Secret type. (Valid values: generic_string)
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Last update date of the Secret
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetStoreConfluentKafkaResult(dict):
    def __init__(__self__, *,
                 schema_registry_name: builtins.str,
                 uris: builtins.str):
        """
        :param builtins.str schema_registry_name: Name of the schema registry
        :param builtins.str uris: List of host:port URIs to connect to the store
        """
        pulumi.set(__self__, "schema_registry_name", schema_registry_name)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="schemaRegistryName")
    def schema_registry_name(self) -> builtins.str:
        """
        Name of the schema registry
        """
        return pulumi.get(self, "schema_registry_name")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")


@pulumi.output_type
class GetStoreKafkaResult(dict):
    def __init__(__self__, *,
                 schema_registry_name: builtins.str,
                 tls_disabled: builtins.bool,
                 tls_verify_server_hostname: builtins.bool,
                 uris: builtins.str):
        """
        :param builtins.str schema_registry_name: Name of the schema registry
        :param builtins.bool tls_disabled: Specifies if the store should be accessed over TLS
        :param builtins.bool tls_verify_server_hostname: Specifies if the server CNAME should be validated against the certificate
        :param builtins.str uris: List of host:port URIs to connect to the store
        """
        pulumi.set(__self__, "schema_registry_name", schema_registry_name)
        pulumi.set(__self__, "tls_disabled", tls_disabled)
        pulumi.set(__self__, "tls_verify_server_hostname", tls_verify_server_hostname)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="schemaRegistryName")
    def schema_registry_name(self) -> builtins.str:
        """
        Name of the schema registry
        """
        return pulumi.get(self, "schema_registry_name")

    @property
    @pulumi.getter(name="tlsDisabled")
    def tls_disabled(self) -> builtins.bool:
        """
        Specifies if the store should be accessed over TLS
        """
        return pulumi.get(self, "tls_disabled")

    @property
    @pulumi.getter(name="tlsVerifyServerHostname")
    def tls_verify_server_hostname(self) -> builtins.bool:
        """
        Specifies if the server CNAME should be validated against the certificate
        """
        return pulumi.get(self, "tls_verify_server_hostname")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")


@pulumi.output_type
class GetStoreKinesisResult(dict):
    def __init__(__self__, *,
                 schema_registry_name: builtins.str,
                 uris: builtins.str):
        """
        :param builtins.str schema_registry_name: Name of the schema registry
        :param builtins.str uris: List of host:port URIs to connect to the store
        """
        pulumi.set(__self__, "schema_registry_name", schema_registry_name)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter(name="schemaRegistryName")
    def schema_registry_name(self) -> builtins.str:
        """
        Name of the schema registry
        """
        return pulumi.get(self, "schema_registry_name")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")


@pulumi.output_type
class GetStorePostgresResult(dict):
    def __init__(__self__, *,
                 uris: builtins.str):
        """
        :param builtins.str uris: List of host:port URIs to connect to the store
        """
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")


@pulumi.output_type
class GetStoreSnowflakeResult(dict):
    def __init__(__self__, *,
                 account_id: builtins.str,
                 role_name: builtins.str,
                 uris: builtins.str,
                 warehouse_name: builtins.str):
        """
        :param builtins.str account_id: Snowflake account ID
        :param builtins.str role_name: Access control role to use for the Store operations after connecting to Snowflake
        :param builtins.str uris: List of host:port URIs to connect to the store
        :param builtins.str warehouse_name: Warehouse name to use for queries and other store operations that require compute resource
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "role_name", role_name)
        pulumi.set(__self__, "uris", uris)
        pulumi.set(__self__, "warehouse_name", warehouse_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        Snowflake account ID
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> builtins.str:
        """
        Access control role to use for the Store operations after connecting to Snowflake
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def uris(self) -> builtins.str:
        """
        List of host:port URIs to connect to the store
        """
        return pulumi.get(self, "uris")

    @property
    @pulumi.getter(name="warehouseName")
    def warehouse_name(self) -> builtins.str:
        """
        Warehouse name to use for queries and other store operations that require compute resource
        """
        return pulumi.get(self, "warehouse_name")


@pulumi.output_type
class GetStoresItemResult(dict):
    def __init__(__self__, *,
                 created_at: builtins.str,
                 name: builtins.str,
                 owner: builtins.str,
                 state: builtins.str,
                 type: builtins.str,
                 updated_at: builtins.str):
        """
        :param builtins.str created_at: Creation date of the Store
        :param builtins.str name: Name of the Store
        :param builtins.str owner: Owning role of the Store
        :param builtins.str state: State of the Store
        :param builtins.str type: Type of the Store
        :param builtins.str updated_at: Last update date of the Store
        """
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the Store
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Store
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the Store
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        State of the Store
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the Store
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Last update date of the Store
        """
        return pulumi.get(self, "updated_at")


