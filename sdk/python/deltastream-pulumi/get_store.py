# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetStoreResult',
    'AwaitableGetStoreResult',
    'get_store',
    'get_store_output',
]

@pulumi.output_type
class GetStoreResult:
    """
    A collection of values returned by getStore.
    """
    def __init__(__self__, confluent_kafka=None, created_at=None, id=None, kafka=None, kinesis=None, name=None, owner=None, postgres=None, snowflake=None, state=None, type=None, updated_at=None):
        if confluent_kafka and not isinstance(confluent_kafka, dict):
            raise TypeError("Expected argument 'confluent_kafka' to be a dict")
        pulumi.set(__self__, "confluent_kafka", confluent_kafka)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka and not isinstance(kafka, dict):
            raise TypeError("Expected argument 'kafka' to be a dict")
        pulumi.set(__self__, "kafka", kafka)
        if kinesis and not isinstance(kinesis, dict):
            raise TypeError("Expected argument 'kinesis' to be a dict")
        pulumi.set(__self__, "kinesis", kinesis)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if owner and not isinstance(owner, str):
            raise TypeError("Expected argument 'owner' to be a str")
        pulumi.set(__self__, "owner", owner)
        if postgres and not isinstance(postgres, dict):
            raise TypeError("Expected argument 'postgres' to be a dict")
        pulumi.set(__self__, "postgres", postgres)
        if snowflake and not isinstance(snowflake, dict):
            raise TypeError("Expected argument 'snowflake' to be a dict")
        pulumi.set(__self__, "snowflake", snowflake)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="confluentKafka")
    def confluent_kafka(self) -> Optional['outputs.GetStoreConfluentKafkaResult']:
        """
        Confluent Kafka specific configuration
        """
        return pulumi.get(self, "confluent_kafka")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        Creation date of the Store
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kafka(self) -> Optional['outputs.GetStoreKafkaResult']:
        """
        Kafka specific configuration
        """
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter
    def kinesis(self) -> Optional['outputs.GetStoreKinesisResult']:
        """
        Kinesis specific configuration
        """
        return pulumi.get(self, "kinesis")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Store
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> builtins.str:
        """
        Owning role of the Store
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def postgres(self) -> Optional['outputs.GetStorePostgresResult']:
        """
        Postgres specific configuration
        """
        return pulumi.get(self, "postgres")

    @property
    @pulumi.getter
    def snowflake(self) -> Optional['outputs.GetStoreSnowflakeResult']:
        """
        Snowflake specific configuration
        """
        return pulumi.get(self, "snowflake")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        State of the Store
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        Type of the Store
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        Last update date of the Store
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetStoreResult(GetStoreResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStoreResult(
            confluent_kafka=self.confluent_kafka,
            created_at=self.created_at,
            id=self.id,
            kafka=self.kafka,
            kinesis=self.kinesis,
            name=self.name,
            owner=self.owner,
            postgres=self.postgres,
            snowflake=self.snowflake,
            state=self.state,
            type=self.type,
            updated_at=self.updated_at)


def get_store(confluent_kafka: Optional[Union['GetStoreConfluentKafkaArgs', 'GetStoreConfluentKafkaArgsDict']] = None,
              kafka: Optional[Union['GetStoreKafkaArgs', 'GetStoreKafkaArgsDict']] = None,
              kinesis: Optional[Union['GetStoreKinesisArgs', 'GetStoreKinesisArgsDict']] = None,
              name: Optional[builtins.str] = None,
              postgres: Optional[Union['GetStorePostgresArgs', 'GetStorePostgresArgsDict']] = None,
              snowflake: Optional[Union['GetStoreSnowflakeArgs', 'GetStoreSnowflakeArgsDict']] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStoreResult:
    """
    Store resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_deltastream as deltastream

    example = deltastream.get_store(name="example_store")
    ```


    :param Union['GetStoreConfluentKafkaArgs', 'GetStoreConfluentKafkaArgsDict'] confluent_kafka: Confluent Kafka specific configuration
    :param Union['GetStoreKafkaArgs', 'GetStoreKafkaArgsDict'] kafka: Kafka specific configuration
    :param Union['GetStoreKinesisArgs', 'GetStoreKinesisArgsDict'] kinesis: Kinesis specific configuration
    :param builtins.str name: Name of the Store
    :param Union['GetStorePostgresArgs', 'GetStorePostgresArgsDict'] postgres: Postgres specific configuration
    :param Union['GetStoreSnowflakeArgs', 'GetStoreSnowflakeArgsDict'] snowflake: Snowflake specific configuration
    """
    __args__ = dict()
    __args__['confluentKafka'] = confluent_kafka
    __args__['kafka'] = kafka
    __args__['kinesis'] = kinesis
    __args__['name'] = name
    __args__['postgres'] = postgres
    __args__['snowflake'] = snowflake
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('deltastream:index/getStore:getStore', __args__, opts=opts, typ=GetStoreResult).value

    return AwaitableGetStoreResult(
        confluent_kafka=pulumi.get(__ret__, 'confluent_kafka'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        kafka=pulumi.get(__ret__, 'kafka'),
        kinesis=pulumi.get(__ret__, 'kinesis'),
        name=pulumi.get(__ret__, 'name'),
        owner=pulumi.get(__ret__, 'owner'),
        postgres=pulumi.get(__ret__, 'postgres'),
        snowflake=pulumi.get(__ret__, 'snowflake'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_store_output(confluent_kafka: Optional[pulumi.Input[Optional[Union['GetStoreConfluentKafkaArgs', 'GetStoreConfluentKafkaArgsDict']]]] = None,
                     kafka: Optional[pulumi.Input[Optional[Union['GetStoreKafkaArgs', 'GetStoreKafkaArgsDict']]]] = None,
                     kinesis: Optional[pulumi.Input[Optional[Union['GetStoreKinesisArgs', 'GetStoreKinesisArgsDict']]]] = None,
                     name: Optional[pulumi.Input[builtins.str]] = None,
                     postgres: Optional[pulumi.Input[Optional[Union['GetStorePostgresArgs', 'GetStorePostgresArgsDict']]]] = None,
                     snowflake: Optional[pulumi.Input[Optional[Union['GetStoreSnowflakeArgs', 'GetStoreSnowflakeArgsDict']]]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStoreResult]:
    """
    Store resource

    ## Example Usage

    ```python
    import pulumi
    import pulumi_deltastream as deltastream

    example = deltastream.get_store(name="example_store")
    ```


    :param Union['GetStoreConfluentKafkaArgs', 'GetStoreConfluentKafkaArgsDict'] confluent_kafka: Confluent Kafka specific configuration
    :param Union['GetStoreKafkaArgs', 'GetStoreKafkaArgsDict'] kafka: Kafka specific configuration
    :param Union['GetStoreKinesisArgs', 'GetStoreKinesisArgsDict'] kinesis: Kinesis specific configuration
    :param builtins.str name: Name of the Store
    :param Union['GetStorePostgresArgs', 'GetStorePostgresArgsDict'] postgres: Postgres specific configuration
    :param Union['GetStoreSnowflakeArgs', 'GetStoreSnowflakeArgsDict'] snowflake: Snowflake specific configuration
    """
    __args__ = dict()
    __args__['confluentKafka'] = confluent_kafka
    __args__['kafka'] = kafka
    __args__['kinesis'] = kinesis
    __args__['name'] = name
    __args__['postgres'] = postgres
    __args__['snowflake'] = snowflake
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('deltastream:index/getStore:getStore', __args__, opts=opts, typ=GetStoreResult)
    return __ret__.apply(lambda __response__: GetStoreResult(
        confluent_kafka=pulumi.get(__response__, 'confluent_kafka'),
        created_at=pulumi.get(__response__, 'created_at'),
        id=pulumi.get(__response__, 'id'),
        kafka=pulumi.get(__response__, 'kafka'),
        kinesis=pulumi.get(__response__, 'kinesis'),
        name=pulumi.get(__response__, 'name'),
        owner=pulumi.get(__response__, 'owner'),
        postgres=pulumi.get(__response__, 'postgres'),
        snowflake=pulumi.get(__response__, 'snowflake'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
