# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['QueryArgs', 'Query']

@pulumi.input_type
class QueryArgs:
    def __init__(__self__, *,
                 sink_relation_fqn: pulumi.Input[builtins.str],
                 source_relation_fqns: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 sql: pulumi.Input[builtins.str],
                 owner: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Query resource.
        :param pulumi.Input[builtins.str] sink_relation_fqn: Fully qualified sink relation name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_relation_fqns: List of fully qualified source relation names
        :param pulumi.Input[builtins.str] sql: SQL statement to create the relation
        :param pulumi.Input[builtins.str] owner: Owning role of the query
        """
        pulumi.set(__self__, "sink_relation_fqn", sink_relation_fqn)
        pulumi.set(__self__, "source_relation_fqns", source_relation_fqns)
        pulumi.set(__self__, "sql", sql)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="sinkRelationFqn")
    def sink_relation_fqn(self) -> pulumi.Input[builtins.str]:
        """
        Fully qualified sink relation name
        """
        return pulumi.get(self, "sink_relation_fqn")

    @sink_relation_fqn.setter
    def sink_relation_fqn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sink_relation_fqn", value)

    @property
    @pulumi.getter(name="sourceRelationFqns")
    def source_relation_fqns(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        List of fully qualified source relation names
        """
        return pulumi.get(self, "source_relation_fqns")

    @source_relation_fqns.setter
    def source_relation_fqns(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "source_relation_fqns", value)

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Input[builtins.str]:
        """
        SQL statement to create the relation
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the query
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)


@pulumi.input_type
class _QueryState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 query_id: Optional[pulumi.Input[builtins.str]] = None,
                 query_name: Optional[pulumi.Input[builtins.str]] = None,
                 query_version: Optional[pulumi.Input[builtins.int]] = None,
                 sink_relation_fqn: Optional[pulumi.Input[builtins.str]] = None,
                 source_relation_fqns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Query resources.
        :param pulumi.Input[builtins.str] created_at: Creation date of the query
        :param pulumi.Input[builtins.str] owner: Owning role of the query
        :param pulumi.Input[builtins.str] query_id: Query ID
        :param pulumi.Input[builtins.str] query_name: Query Name
        :param pulumi.Input[builtins.int] query_version: Query version
        :param pulumi.Input[builtins.str] sink_relation_fqn: Fully qualified sink relation name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_relation_fqns: List of fully qualified source relation names
        :param pulumi.Input[builtins.str] sql: SQL statement to create the relation
        :param pulumi.Input[builtins.str] state: State of the Relation
        :param pulumi.Input[builtins.str] updated_at: Creation date of the query
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if query_name is not None:
            pulumi.set(__self__, "query_name", query_name)
        if query_version is not None:
            pulumi.set(__self__, "query_version", query_version)
        if sink_relation_fqn is not None:
            pulumi.set(__self__, "sink_relation_fqn", sink_relation_fqn)
        if source_relation_fqns is not None:
            pulumi.set(__self__, "source_relation_fqns", source_relation_fqns)
        if sql is not None:
            pulumi.set(__self__, "sql", sql)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Creation date of the query
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Owning role of the query
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Query ID
        """
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Query Name
        """
        return pulumi.get(self, "query_name")

    @query_name.setter
    def query_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "query_name", value)

    @property
    @pulumi.getter(name="queryVersion")
    def query_version(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Query version
        """
        return pulumi.get(self, "query_version")

    @query_version.setter
    def query_version(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "query_version", value)

    @property
    @pulumi.getter(name="sinkRelationFqn")
    def sink_relation_fqn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Fully qualified sink relation name
        """
        return pulumi.get(self, "sink_relation_fqn")

    @sink_relation_fqn.setter
    def sink_relation_fqn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sink_relation_fqn", value)

    @property
    @pulumi.getter(name="sourceRelationFqns")
    def source_relation_fqns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of fully qualified source relation names
        """
        return pulumi.get(self, "source_relation_fqns")

    @source_relation_fqns.setter
    def source_relation_fqns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "source_relation_fqns", value)

    @property
    @pulumi.getter
    def sql(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        SQL statement to create the relation
        """
        return pulumi.get(self, "sql")

    @sql.setter
    def sql(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sql", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        State of the Relation
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Creation date of the query
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.type_token("deltastream:index/query:Query")
class Query(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 sink_relation_fqn: Optional[pulumi.Input[builtins.str]] = None,
                 source_relation_fqns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Query resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] owner: Owning role of the query
        :param pulumi.Input[builtins.str] sink_relation_fqn: Fully qualified sink relation name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_relation_fqns: List of fully qualified source relation names
        :param pulumi.Input[builtins.str] sql: SQL statement to create the relation
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QueryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Query resource

        :param str resource_name: The name of the resource.
        :param QueryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QueryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 owner: Optional[pulumi.Input[builtins.str]] = None,
                 sink_relation_fqn: Optional[pulumi.Input[builtins.str]] = None,
                 source_relation_fqns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sql: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QueryArgs.__new__(QueryArgs)

            __props__.__dict__["owner"] = owner
            if sink_relation_fqn is None and not opts.urn:
                raise TypeError("Missing required property 'sink_relation_fqn'")
            __props__.__dict__["sink_relation_fqn"] = sink_relation_fqn
            if source_relation_fqns is None and not opts.urn:
                raise TypeError("Missing required property 'source_relation_fqns'")
            __props__.__dict__["source_relation_fqns"] = source_relation_fqns
            if sql is None and not opts.urn:
                raise TypeError("Missing required property 'sql'")
            __props__.__dict__["sql"] = sql
            __props__.__dict__["created_at"] = None
            __props__.__dict__["query_id"] = None
            __props__.__dict__["query_name"] = None
            __props__.__dict__["query_version"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["updated_at"] = None
        super(Query, __self__).__init__(
            'deltastream:index/query:Query',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            owner: Optional[pulumi.Input[builtins.str]] = None,
            query_id: Optional[pulumi.Input[builtins.str]] = None,
            query_name: Optional[pulumi.Input[builtins.str]] = None,
            query_version: Optional[pulumi.Input[builtins.int]] = None,
            sink_relation_fqn: Optional[pulumi.Input[builtins.str]] = None,
            source_relation_fqns: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            sql: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None) -> 'Query':
        """
        Get an existing Query resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] created_at: Creation date of the query
        :param pulumi.Input[builtins.str] owner: Owning role of the query
        :param pulumi.Input[builtins.str] query_id: Query ID
        :param pulumi.Input[builtins.str] query_name: Query Name
        :param pulumi.Input[builtins.int] query_version: Query version
        :param pulumi.Input[builtins.str] sink_relation_fqn: Fully qualified sink relation name
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_relation_fqns: List of fully qualified source relation names
        :param pulumi.Input[builtins.str] sql: SQL statement to create the relation
        :param pulumi.Input[builtins.str] state: State of the Relation
        :param pulumi.Input[builtins.str] updated_at: Creation date of the query
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _QueryState.__new__(_QueryState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["owner"] = owner
        __props__.__dict__["query_id"] = query_id
        __props__.__dict__["query_name"] = query_name
        __props__.__dict__["query_version"] = query_version
        __props__.__dict__["sink_relation_fqn"] = sink_relation_fqn
        __props__.__dict__["source_relation_fqns"] = source_relation_fqns
        __props__.__dict__["sql"] = sql
        __props__.__dict__["state"] = state
        __props__.__dict__["updated_at"] = updated_at
        return Query(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Creation date of the query
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Output[builtins.str]:
        """
        Owning role of the query
        """
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> pulumi.Output[builtins.str]:
        """
        Query ID
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryName")
    def query_name(self) -> pulumi.Output[builtins.str]:
        """
        Query Name
        """
        return pulumi.get(self, "query_name")

    @property
    @pulumi.getter(name="queryVersion")
    def query_version(self) -> pulumi.Output[builtins.int]:
        """
        Query version
        """
        return pulumi.get(self, "query_version")

    @property
    @pulumi.getter(name="sinkRelationFqn")
    def sink_relation_fqn(self) -> pulumi.Output[builtins.str]:
        """
        Fully qualified sink relation name
        """
        return pulumi.get(self, "sink_relation_fqn")

    @property
    @pulumi.getter(name="sourceRelationFqns")
    def source_relation_fqns(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of fully qualified source relation names
        """
        return pulumi.get(self, "source_relation_fqns")

    @property
    @pulumi.getter
    def sql(self) -> pulumi.Output[builtins.str]:
        """
        SQL statement to create the relation
        """
        return pulumi.get(self, "sql")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        State of the Relation
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Creation date of the query
        """
        return pulumi.get(self, "updated_at")

