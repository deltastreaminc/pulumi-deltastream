# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EntityArgs', 'Entity']

@pulumi.input_type
class EntityArgs:
    def __init__(__self__, *,
                 entity_paths: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 store: pulumi.Input[builtins.str],
                 kafka_properties: Optional[pulumi.Input['EntityKafkaPropertiesArgs']] = None,
                 kinesis_properties: Optional[pulumi.Input['EntityKinesisPropertiesArgs']] = None,
                 postgres_properties: Optional[pulumi.Input['EntityPostgresPropertiesArgs']] = None,
                 snowflake_properties: Optional[pulumi.Input['EntitySnowflakePropertiesArgs']] = None):
        """
        The set of arguments for constructing a Entity resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] entity_paths: Entity path
        :param pulumi.Input[builtins.str] store: Store name
        :param pulumi.Input['EntityKafkaPropertiesArgs'] kafka_properties: Kafka properties
        :param pulumi.Input['EntityKinesisPropertiesArgs'] kinesis_properties: Kinesis properties
        :param pulumi.Input['EntityPostgresPropertiesArgs'] postgres_properties: Postgres properties
        :param pulumi.Input['EntitySnowflakePropertiesArgs'] snowflake_properties: Snowflake properties
        """
        pulumi.set(__self__, "entity_paths", entity_paths)
        pulumi.set(__self__, "store", store)
        if kafka_properties is not None:
            pulumi.set(__self__, "kafka_properties", kafka_properties)
        if kinesis_properties is not None:
            pulumi.set(__self__, "kinesis_properties", kinesis_properties)
        if postgres_properties is not None:
            pulumi.set(__self__, "postgres_properties", postgres_properties)
        if snowflake_properties is not None:
            pulumi.set(__self__, "snowflake_properties", snowflake_properties)

    @property
    @pulumi.getter(name="entityPaths")
    def entity_paths(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Entity path
        """
        return pulumi.get(self, "entity_paths")

    @entity_paths.setter
    def entity_paths(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "entity_paths", value)

    @property
    @pulumi.getter
    def store(self) -> pulumi.Input[builtins.str]:
        """
        Store name
        """
        return pulumi.get(self, "store")

    @store.setter
    def store(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "store", value)

    @property
    @pulumi.getter(name="kafkaProperties")
    def kafka_properties(self) -> Optional[pulumi.Input['EntityKafkaPropertiesArgs']]:
        """
        Kafka properties
        """
        return pulumi.get(self, "kafka_properties")

    @kafka_properties.setter
    def kafka_properties(self, value: Optional[pulumi.Input['EntityKafkaPropertiesArgs']]):
        pulumi.set(self, "kafka_properties", value)

    @property
    @pulumi.getter(name="kinesisProperties")
    def kinesis_properties(self) -> Optional[pulumi.Input['EntityKinesisPropertiesArgs']]:
        """
        Kinesis properties
        """
        return pulumi.get(self, "kinesis_properties")

    @kinesis_properties.setter
    def kinesis_properties(self, value: Optional[pulumi.Input['EntityKinesisPropertiesArgs']]):
        pulumi.set(self, "kinesis_properties", value)

    @property
    @pulumi.getter(name="postgresProperties")
    def postgres_properties(self) -> Optional[pulumi.Input['EntityPostgresPropertiesArgs']]:
        """
        Postgres properties
        """
        return pulumi.get(self, "postgres_properties")

    @postgres_properties.setter
    def postgres_properties(self, value: Optional[pulumi.Input['EntityPostgresPropertiesArgs']]):
        pulumi.set(self, "postgres_properties", value)

    @property
    @pulumi.getter(name="snowflakeProperties")
    def snowflake_properties(self) -> Optional[pulumi.Input['EntitySnowflakePropertiesArgs']]:
        """
        Snowflake properties
        """
        return pulumi.get(self, "snowflake_properties")

    @snowflake_properties.setter
    def snowflake_properties(self, value: Optional[pulumi.Input['EntitySnowflakePropertiesArgs']]):
        pulumi.set(self, "snowflake_properties", value)


@pulumi.input_type
class _EntityState:
    def __init__(__self__, *,
                 entity_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kafka_properties: Optional[pulumi.Input['EntityKafkaPropertiesArgs']] = None,
                 kinesis_properties: Optional[pulumi.Input['EntityKinesisPropertiesArgs']] = None,
                 postgres_properties: Optional[pulumi.Input['EntityPostgresPropertiesArgs']] = None,
                 snowflake_properties: Optional[pulumi.Input['EntitySnowflakePropertiesArgs']] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Entity resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] entity_paths: Entity path
        :param pulumi.Input['EntityKafkaPropertiesArgs'] kafka_properties: Kafka properties
        :param pulumi.Input['EntityKinesisPropertiesArgs'] kinesis_properties: Kinesis properties
        :param pulumi.Input['EntityPostgresPropertiesArgs'] postgres_properties: Postgres properties
        :param pulumi.Input['EntitySnowflakePropertiesArgs'] snowflake_properties: Snowflake properties
        :param pulumi.Input[builtins.str] store: Store name
        """
        if entity_paths is not None:
            pulumi.set(__self__, "entity_paths", entity_paths)
        if kafka_properties is not None:
            pulumi.set(__self__, "kafka_properties", kafka_properties)
        if kinesis_properties is not None:
            pulumi.set(__self__, "kinesis_properties", kinesis_properties)
        if postgres_properties is not None:
            pulumi.set(__self__, "postgres_properties", postgres_properties)
        if snowflake_properties is not None:
            pulumi.set(__self__, "snowflake_properties", snowflake_properties)
        if store is not None:
            pulumi.set(__self__, "store", store)

    @property
    @pulumi.getter(name="entityPaths")
    def entity_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Entity path
        """
        return pulumi.get(self, "entity_paths")

    @entity_paths.setter
    def entity_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "entity_paths", value)

    @property
    @pulumi.getter(name="kafkaProperties")
    def kafka_properties(self) -> Optional[pulumi.Input['EntityKafkaPropertiesArgs']]:
        """
        Kafka properties
        """
        return pulumi.get(self, "kafka_properties")

    @kafka_properties.setter
    def kafka_properties(self, value: Optional[pulumi.Input['EntityKafkaPropertiesArgs']]):
        pulumi.set(self, "kafka_properties", value)

    @property
    @pulumi.getter(name="kinesisProperties")
    def kinesis_properties(self) -> Optional[pulumi.Input['EntityKinesisPropertiesArgs']]:
        """
        Kinesis properties
        """
        return pulumi.get(self, "kinesis_properties")

    @kinesis_properties.setter
    def kinesis_properties(self, value: Optional[pulumi.Input['EntityKinesisPropertiesArgs']]):
        pulumi.set(self, "kinesis_properties", value)

    @property
    @pulumi.getter(name="postgresProperties")
    def postgres_properties(self) -> Optional[pulumi.Input['EntityPostgresPropertiesArgs']]:
        """
        Postgres properties
        """
        return pulumi.get(self, "postgres_properties")

    @postgres_properties.setter
    def postgres_properties(self, value: Optional[pulumi.Input['EntityPostgresPropertiesArgs']]):
        pulumi.set(self, "postgres_properties", value)

    @property
    @pulumi.getter(name="snowflakeProperties")
    def snowflake_properties(self) -> Optional[pulumi.Input['EntitySnowflakePropertiesArgs']]:
        """
        Snowflake properties
        """
        return pulumi.get(self, "snowflake_properties")

    @snowflake_properties.setter
    def snowflake_properties(self, value: Optional[pulumi.Input['EntitySnowflakePropertiesArgs']]):
        pulumi.set(self, "snowflake_properties", value)

    @property
    @pulumi.getter
    def store(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Store name
        """
        return pulumi.get(self, "store")

    @store.setter
    def store(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "store", value)


@pulumi.type_token("deltastream:index/entity:Entity")
class Entity(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kafka_properties: Optional[pulumi.Input[Union['EntityKafkaPropertiesArgs', 'EntityKafkaPropertiesArgsDict']]] = None,
                 kinesis_properties: Optional[pulumi.Input[Union['EntityKinesisPropertiesArgs', 'EntityKinesisPropertiesArgsDict']]] = None,
                 postgres_properties: Optional[pulumi.Input[Union['EntityPostgresPropertiesArgs', 'EntityPostgresPropertiesArgsDict']]] = None,
                 snowflake_properties: Optional[pulumi.Input[Union['EntitySnowflakePropertiesArgs', 'EntitySnowflakePropertiesArgsDict']]] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Database resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] entity_paths: Entity path
        :param pulumi.Input[Union['EntityKafkaPropertiesArgs', 'EntityKafkaPropertiesArgsDict']] kafka_properties: Kafka properties
        :param pulumi.Input[Union['EntityKinesisPropertiesArgs', 'EntityKinesisPropertiesArgsDict']] kinesis_properties: Kinesis properties
        :param pulumi.Input[Union['EntityPostgresPropertiesArgs', 'EntityPostgresPropertiesArgsDict']] postgres_properties: Postgres properties
        :param pulumi.Input[Union['EntitySnowflakePropertiesArgs', 'EntitySnowflakePropertiesArgsDict']] snowflake_properties: Snowflake properties
        :param pulumi.Input[builtins.str] store: Store name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EntityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Database resource

        :param str resource_name: The name of the resource.
        :param EntityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EntityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 entity_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kafka_properties: Optional[pulumi.Input[Union['EntityKafkaPropertiesArgs', 'EntityKafkaPropertiesArgsDict']]] = None,
                 kinesis_properties: Optional[pulumi.Input[Union['EntityKinesisPropertiesArgs', 'EntityKinesisPropertiesArgsDict']]] = None,
                 postgres_properties: Optional[pulumi.Input[Union['EntityPostgresPropertiesArgs', 'EntityPostgresPropertiesArgsDict']]] = None,
                 snowflake_properties: Optional[pulumi.Input[Union['EntitySnowflakePropertiesArgs', 'EntitySnowflakePropertiesArgsDict']]] = None,
                 store: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EntityArgs.__new__(EntityArgs)

            if entity_paths is None and not opts.urn:
                raise TypeError("Missing required property 'entity_paths'")
            __props__.__dict__["entity_paths"] = entity_paths
            __props__.__dict__["kafka_properties"] = kafka_properties
            __props__.__dict__["kinesis_properties"] = kinesis_properties
            __props__.__dict__["postgres_properties"] = postgres_properties
            __props__.__dict__["snowflake_properties"] = snowflake_properties
            if store is None and not opts.urn:
                raise TypeError("Missing required property 'store'")
            __props__.__dict__["store"] = store
        super(Entity, __self__).__init__(
            'deltastream:index/entity:Entity',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            entity_paths: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kafka_properties: Optional[pulumi.Input[Union['EntityKafkaPropertiesArgs', 'EntityKafkaPropertiesArgsDict']]] = None,
            kinesis_properties: Optional[pulumi.Input[Union['EntityKinesisPropertiesArgs', 'EntityKinesisPropertiesArgsDict']]] = None,
            postgres_properties: Optional[pulumi.Input[Union['EntityPostgresPropertiesArgs', 'EntityPostgresPropertiesArgsDict']]] = None,
            snowflake_properties: Optional[pulumi.Input[Union['EntitySnowflakePropertiesArgs', 'EntitySnowflakePropertiesArgsDict']]] = None,
            store: Optional[pulumi.Input[builtins.str]] = None) -> 'Entity':
        """
        Get an existing Entity resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] entity_paths: Entity path
        :param pulumi.Input[Union['EntityKafkaPropertiesArgs', 'EntityKafkaPropertiesArgsDict']] kafka_properties: Kafka properties
        :param pulumi.Input[Union['EntityKinesisPropertiesArgs', 'EntityKinesisPropertiesArgsDict']] kinesis_properties: Kinesis properties
        :param pulumi.Input[Union['EntityPostgresPropertiesArgs', 'EntityPostgresPropertiesArgsDict']] postgres_properties: Postgres properties
        :param pulumi.Input[Union['EntitySnowflakePropertiesArgs', 'EntitySnowflakePropertiesArgsDict']] snowflake_properties: Snowflake properties
        :param pulumi.Input[builtins.str] store: Store name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EntityState.__new__(_EntityState)

        __props__.__dict__["entity_paths"] = entity_paths
        __props__.__dict__["kafka_properties"] = kafka_properties
        __props__.__dict__["kinesis_properties"] = kinesis_properties
        __props__.__dict__["postgres_properties"] = postgres_properties
        __props__.__dict__["snowflake_properties"] = snowflake_properties
        __props__.__dict__["store"] = store
        return Entity(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="entityPaths")
    def entity_paths(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Entity path
        """
        return pulumi.get(self, "entity_paths")

    @property
    @pulumi.getter(name="kafkaProperties")
    def kafka_properties(self) -> pulumi.Output['outputs.EntityKafkaProperties']:
        """
        Kafka properties
        """
        return pulumi.get(self, "kafka_properties")

    @property
    @pulumi.getter(name="kinesisProperties")
    def kinesis_properties(self) -> pulumi.Output['outputs.EntityKinesisProperties']:
        """
        Kinesis properties
        """
        return pulumi.get(self, "kinesis_properties")

    @property
    @pulumi.getter(name="postgresProperties")
    def postgres_properties(self) -> pulumi.Output['outputs.EntityPostgresProperties']:
        """
        Postgres properties
        """
        return pulumi.get(self, "postgres_properties")

    @property
    @pulumi.getter(name="snowflakeProperties")
    def snowflake_properties(self) -> pulumi.Output['outputs.EntitySnowflakeProperties']:
        """
        Snowflake properties
        """
        return pulumi.get(self, "snowflake_properties")

    @property
    @pulumi.getter
    def store(self) -> pulumi.Output[builtins.str]:
        """
        Store name
        """
        return pulumi.get(self, "store")

