// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumideltastream

import (
	"context"
	"reflect"

	"errors"
	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Continuous query resource (INSERT INTO ... SELECT ...) streaming data from source relations into a sink relation.
type Query struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	Owner     pulumi.StringOutput `pulumi:"owner"`
	// System-generated query identifier
	QueryId            pulumi.StringOutput      `pulumi:"queryId"`
	QueryName          pulumi.StringPtrOutput   `pulumi:"queryName"`
	QueryVersion       pulumi.IntPtrOutput      `pulumi:"queryVersion"`
	SinkRelationFqn    pulumi.StringOutput      `pulumi:"sinkRelationFqn"`
	SourceRelationFqns pulumi.StringArrayOutput `pulumi:"sourceRelationFqns"`
	Sql                pulumi.StringOutput      `pulumi:"sql"`
	// Lifecycle state of the query (starting|running|terminate_requested|terminated|errored)
	State     pulumi.StringOutput `pulumi:"state"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewQuery registers a new resource with the given unique name, arguments, and options.
func NewQuery(ctx *pulumi.Context,
	name string, args *QueryArgs, opts ...pulumi.ResourceOption) (*Query, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SinkRelationFqn == nil {
		return nil, errors.New("invalid value for required argument 'SinkRelationFqn'")
	}
	if args.SourceRelationFqns == nil {
		return nil, errors.New("invalid value for required argument 'SourceRelationFqns'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Query
	err := ctx.RegisterResource("deltastream:index:Query", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetQuery gets an existing Query resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQuery(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *QueryState, opts ...pulumi.ResourceOption) (*Query, error) {
	var resource Query
	err := ctx.ReadResource("deltastream:index:Query", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Query resources.
type queryState struct {
}

type QueryState struct {
}

func (QueryState) ElementType() reflect.Type {
	return reflect.TypeOf((*queryState)(nil)).Elem()
}

type queryArgs struct {
	Owner              *string  `pulumi:"owner"`
	SinkRelationFqn    string   `pulumi:"sinkRelationFqn"`
	SourceRelationFqns []string `pulumi:"sourceRelationFqns"`
	Sql                string   `pulumi:"sql"`
}

// The set of arguments for constructing a Query resource.
type QueryArgs struct {
	Owner              pulumi.StringPtrInput
	SinkRelationFqn    pulumi.StringInput
	SourceRelationFqns pulumi.StringArrayInput
	Sql                pulumi.StringInput
}

func (QueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*queryArgs)(nil)).Elem()
}

type QueryInput interface {
	pulumi.Input

	ToQueryOutput() QueryOutput
	ToQueryOutputWithContext(ctx context.Context) QueryOutput
}

func (*Query) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (i *Query) ToQueryOutput() QueryOutput {
	return i.ToQueryOutputWithContext(context.Background())
}

func (i *Query) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryOutput)
}

// QueryArrayInput is an input type that accepts QueryArray and QueryArrayOutput values.
// You can construct a concrete instance of `QueryArrayInput` via:
//
//	QueryArray{ QueryArgs{...} }
type QueryArrayInput interface {
	pulumi.Input

	ToQueryArrayOutput() QueryArrayOutput
	ToQueryArrayOutputWithContext(context.Context) QueryArrayOutput
}

type QueryArray []QueryInput

func (QueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (i QueryArray) ToQueryArrayOutput() QueryArrayOutput {
	return i.ToQueryArrayOutputWithContext(context.Background())
}

func (i QueryArray) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryArrayOutput)
}

// QueryMapInput is an input type that accepts QueryMap and QueryMapOutput values.
// You can construct a concrete instance of `QueryMapInput` via:
//
//	QueryMap{ "key": QueryArgs{...} }
type QueryMapInput interface {
	pulumi.Input

	ToQueryMapOutput() QueryMapOutput
	ToQueryMapOutputWithContext(context.Context) QueryMapOutput
}

type QueryMap map[string]QueryInput

func (QueryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (i QueryMap) ToQueryMapOutput() QueryMapOutput {
	return i.ToQueryMapOutputWithContext(context.Background())
}

func (i QueryMap) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueryMapOutput)
}

type QueryOutput struct{ *pulumi.OutputState }

func (QueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Query)(nil)).Elem()
}

func (o QueryOutput) ToQueryOutput() QueryOutput {
	return o
}

func (o QueryOutput) ToQueryOutputWithContext(ctx context.Context) QueryOutput {
	return o
}

func (o QueryOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o QueryOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// System-generated query identifier
func (o QueryOutput) QueryId() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.QueryId }).(pulumi.StringOutput)
}

func (o QueryOutput) QueryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.StringPtrOutput { return v.QueryName }).(pulumi.StringPtrOutput)
}

func (o QueryOutput) QueryVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Query) pulumi.IntPtrOutput { return v.QueryVersion }).(pulumi.IntPtrOutput)
}

func (o QueryOutput) SinkRelationFqn() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.SinkRelationFqn }).(pulumi.StringOutput)
}

func (o QueryOutput) SourceRelationFqns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Query) pulumi.StringArrayOutput { return v.SourceRelationFqns }).(pulumi.StringArrayOutput)
}

func (o QueryOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

// Lifecycle state of the query (starting|running|terminate_requested|terminated|errored)
func (o QueryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

func (o QueryOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Query) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type QueryArrayOutput struct{ *pulumi.OutputState }

func (QueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Query)(nil)).Elem()
}

func (o QueryArrayOutput) ToQueryArrayOutput() QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) ToQueryArrayOutputWithContext(ctx context.Context) QueryArrayOutput {
	return o
}

func (o QueryArrayOutput) Index(i pulumi.IntInput) QueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Query {
		return vs[0].([]*Query)[vs[1].(int)]
	}).(QueryOutput)
}

type QueryMapOutput struct{ *pulumi.OutputState }

func (QueryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Query)(nil)).Elem()
}

func (o QueryMapOutput) ToQueryMapOutput() QueryMapOutput {
	return o
}

func (o QueryMapOutput) ToQueryMapOutputWithContext(ctx context.Context) QueryMapOutput {
	return o
}

func (o QueryMapOutput) MapIndex(k pulumi.StringInput) QueryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Query {
		return vs[0].(map[string]*Query)[vs[1].(string)]
	}).(QueryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*QueryInput)(nil)).Elem(), &Query{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryArrayInput)(nil)).Elem(), QueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueryMapInput)(nil)).Elem(), QueryMap{})
	pulumi.RegisterOutputType(QueryOutput{})
	pulumi.RegisterOutputType(QueryArrayOutput{})
	pulumi.RegisterOutputType(QueryMapOutput{})
}
