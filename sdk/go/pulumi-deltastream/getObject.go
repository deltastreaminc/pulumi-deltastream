// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumideltastream

import (
	"context"
	"reflect"

	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupObject(ctx *pulumi.Context, args *LookupObjectArgs, opts ...pulumi.InvokeOption) (*LookupObjectResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupObjectResult
	err := ctx.Invoke("deltastream:index:getObject", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupObjectArgs struct {
	Database  string `pulumi:"database"`
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
}

type LookupObjectResult struct {
	CreatedAt string `pulumi:"createdAt"`
	Database  string `pulumi:"database"`
	Fqn       string `pulumi:"fqn"`
	Name      string `pulumi:"name"`
	Namespace string `pulumi:"namespace"`
	Owner     string `pulumi:"owner"`
	State     string `pulumi:"state"`
	Type      string `pulumi:"type"`
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupObjectOutput(ctx *pulumi.Context, args LookupObjectOutputArgs, opts ...pulumi.InvokeOption) LookupObjectResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupObjectResultOutput, error) {
			args := v.(LookupObjectArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("deltastream:index:getObject", args, LookupObjectResultOutput{}, options).(LookupObjectResultOutput), nil
		}).(LookupObjectResultOutput)
}

type LookupObjectOutputArgs struct {
	Database  pulumi.StringInput `pulumi:"database"`
	Name      pulumi.StringInput `pulumi:"name"`
	Namespace pulumi.StringInput `pulumi:"namespace"`
}

func (LookupObjectOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObjectArgs)(nil)).Elem()
}

type LookupObjectResultOutput struct{ *pulumi.OutputState }

func (LookupObjectResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupObjectResult)(nil)).Elem()
}

func (o LookupObjectResultOutput) ToLookupObjectResultOutput() LookupObjectResultOutput {
	return o
}

func (o LookupObjectResultOutput) ToLookupObjectResultOutputWithContext(ctx context.Context) LookupObjectResultOutput {
	return o
}

func (o LookupObjectResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Database }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Fqn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Fqn }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Namespace }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Owner }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupObjectResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupObjectResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupObjectResultOutput{})
}
