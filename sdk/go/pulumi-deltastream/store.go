// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumideltastream

import (
	"context"
	"reflect"

	"errors"
	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Store resource supporting external data store connectivity (initial Kafka support)
type Store struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput      `pulumi:"createdAt"`
	Kafka     KafkaInputsPtrOutput     `pulumi:"kafka"`
	Name      pulumi.StringOutput      `pulumi:"name"`
	Owner     pulumi.StringOutput      `pulumi:"owner"`
	Postgres  PostgresInputsPtrOutput  `pulumi:"postgres"`
	Snowflake SnowflakeInputsPtrOutput `pulumi:"snowflake"`
	// Provisioning state of the store
	State pulumi.StringOutput `pulumi:"state"`
	// Type of the store
	Type      pulumi.StringOutput `pulumi:"type"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewStore registers a new resource with the given unique name, arguments, and options.
func NewStore(ctx *pulumi.Context,
	name string, args *StoreArgs, opts ...pulumi.ResourceOption) (*Store, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Store
	err := ctx.RegisterResource("deltastream:index:Store", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStore gets an existing Store resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StoreState, opts ...pulumi.ResourceOption) (*Store, error) {
	var resource Store
	err := ctx.ReadResource("deltastream:index:Store", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Store resources.
type storeState struct {
}

type StoreState struct {
}

func (StoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*storeState)(nil)).Elem()
}

type storeArgs struct {
	Kafka     *KafkaInputs     `pulumi:"kafka"`
	Name      string           `pulumi:"name"`
	Owner     *string          `pulumi:"owner"`
	Postgres  *PostgresInputs  `pulumi:"postgres"`
	Snowflake *SnowflakeInputs `pulumi:"snowflake"`
}

// The set of arguments for constructing a Store resource.
type StoreArgs struct {
	Kafka     KafkaInputsPtrInput
	Name      pulumi.StringInput
	Owner     pulumi.StringPtrInput
	Postgres  PostgresInputsPtrInput
	Snowflake SnowflakeInputsPtrInput
}

func (StoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storeArgs)(nil)).Elem()
}

type StoreInput interface {
	pulumi.Input

	ToStoreOutput() StoreOutput
	ToStoreOutputWithContext(ctx context.Context) StoreOutput
}

func (*Store) ElementType() reflect.Type {
	return reflect.TypeOf((**Store)(nil)).Elem()
}

func (i *Store) ToStoreOutput() StoreOutput {
	return i.ToStoreOutputWithContext(context.Background())
}

func (i *Store) ToStoreOutputWithContext(ctx context.Context) StoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreOutput)
}

// StoreArrayInput is an input type that accepts StoreArray and StoreArrayOutput values.
// You can construct a concrete instance of `StoreArrayInput` via:
//
//	StoreArray{ StoreArgs{...} }
type StoreArrayInput interface {
	pulumi.Input

	ToStoreArrayOutput() StoreArrayOutput
	ToStoreArrayOutputWithContext(context.Context) StoreArrayOutput
}

type StoreArray []StoreInput

func (StoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Store)(nil)).Elem()
}

func (i StoreArray) ToStoreArrayOutput() StoreArrayOutput {
	return i.ToStoreArrayOutputWithContext(context.Background())
}

func (i StoreArray) ToStoreArrayOutputWithContext(ctx context.Context) StoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreArrayOutput)
}

// StoreMapInput is an input type that accepts StoreMap and StoreMapOutput values.
// You can construct a concrete instance of `StoreMapInput` via:
//
//	StoreMap{ "key": StoreArgs{...} }
type StoreMapInput interface {
	pulumi.Input

	ToStoreMapOutput() StoreMapOutput
	ToStoreMapOutputWithContext(context.Context) StoreMapOutput
}

type StoreMap map[string]StoreInput

func (StoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Store)(nil)).Elem()
}

func (i StoreMap) ToStoreMapOutput() StoreMapOutput {
	return i.ToStoreMapOutputWithContext(context.Background())
}

func (i StoreMap) ToStoreMapOutputWithContext(ctx context.Context) StoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreMapOutput)
}

type StoreOutput struct{ *pulumi.OutputState }

func (StoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Store)(nil)).Elem()
}

func (o StoreOutput) ToStoreOutput() StoreOutput {
	return o
}

func (o StoreOutput) ToStoreOutputWithContext(ctx context.Context) StoreOutput {
	return o
}

func (o StoreOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o StoreOutput) Kafka() KafkaInputsPtrOutput {
	return o.ApplyT(func(v *Store) KafkaInputsPtrOutput { return v.Kafka }).(KafkaInputsPtrOutput)
}

func (o StoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o StoreOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

func (o StoreOutput) Postgres() PostgresInputsPtrOutput {
	return o.ApplyT(func(v *Store) PostgresInputsPtrOutput { return v.Postgres }).(PostgresInputsPtrOutput)
}

func (o StoreOutput) Snowflake() SnowflakeInputsPtrOutput {
	return o.ApplyT(func(v *Store) SnowflakeInputsPtrOutput { return v.Snowflake }).(SnowflakeInputsPtrOutput)
}

// Provisioning state of the store
func (o StoreOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Type of the store
func (o StoreOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o StoreOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Store) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type StoreArrayOutput struct{ *pulumi.OutputState }

func (StoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Store)(nil)).Elem()
}

func (o StoreArrayOutput) ToStoreArrayOutput() StoreArrayOutput {
	return o
}

func (o StoreArrayOutput) ToStoreArrayOutputWithContext(ctx context.Context) StoreArrayOutput {
	return o
}

func (o StoreArrayOutput) Index(i pulumi.IntInput) StoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Store {
		return vs[0].([]*Store)[vs[1].(int)]
	}).(StoreOutput)
}

type StoreMapOutput struct{ *pulumi.OutputState }

func (StoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Store)(nil)).Elem()
}

func (o StoreMapOutput) ToStoreMapOutput() StoreMapOutput {
	return o
}

func (o StoreMapOutput) ToStoreMapOutputWithContext(ctx context.Context) StoreMapOutput {
	return o
}

func (o StoreMapOutput) MapIndex(k pulumi.StringInput) StoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Store {
		return vs[0].(map[string]*Store)[vs[1].(string)]
	}).(StoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StoreInput)(nil)).Elem(), &Store{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreArrayInput)(nil)).Elem(), StoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreMapInput)(nil)).Elem(), StoreMap{})
	pulumi.RegisterOutputType(StoreOutput{})
	pulumi.RegisterOutputType(StoreArrayOutput{})
	pulumi.RegisterOutputType(StoreMapOutput{})
}
