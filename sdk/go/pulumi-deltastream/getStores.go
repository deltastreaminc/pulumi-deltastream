// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pulumideltastream

import (
	"context"
	"reflect"

	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/pulumi-deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetStores(ctx *pulumi.Context, args *GetStoresArgs, opts ...pulumi.InvokeOption) (*GetStoresResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetStoresResult
	err := ctx.Invoke("deltastream:index:getStores", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetStoresArgs struct {
}

type GetStoresResult struct {
	Stores []GetStoreResult `pulumi:"stores"`
}

func GetStoresOutput(ctx *pulumi.Context, args GetStoresOutputArgs, opts ...pulumi.InvokeOption) GetStoresResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetStoresResultOutput, error) {
			args := v.(GetStoresArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("deltastream:index:getStores", args, GetStoresResultOutput{}, options).(GetStoresResultOutput), nil
		}).(GetStoresResultOutput)
}

type GetStoresOutputArgs struct {
}

func (GetStoresOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoresArgs)(nil)).Elem()
}

type GetStoresResultOutput struct{ *pulumi.OutputState }

func (GetStoresResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoresResult)(nil)).Elem()
}

func (o GetStoresResultOutput) ToGetStoresResultOutput() GetStoresResultOutput {
	return o
}

func (o GetStoresResultOutput) ToGetStoresResultOutputWithContext(ctx context.Context) GetStoresResultOutput {
	return o
}

func (o GetStoresResultOutput) Stores() GetStoreResultArrayOutput {
	return o.ApplyT(func(v GetStoresResult) []GetStoreResult { return v.Stores }).(GetStoreResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetStoresResultOutput{})
}
