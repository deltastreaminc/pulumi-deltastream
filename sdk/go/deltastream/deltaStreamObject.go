// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"errors"
	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Object resource
type DeltaStreamObject struct {
	pulumi.CustomResourceState

	// Creation date of the object
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the Database
	Database pulumi.StringOutput `pulumi:"database"`
	// Fully qualified name of the Object
	Fqn pulumi.StringOutput `pulumi:"fqn"`
	// Name of the Object
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of the Namespace
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// Owning role of the object
	Owner pulumi.StringOutput `pulumi:"owner"`
	// SQL statement to create the object
	Sql pulumi.StringOutput `pulumi:"sql"`
	// State of the Object
	State pulumi.StringOutput `pulumi:"state"`
	// Name of the Store
	Store pulumi.StringOutput `pulumi:"store"`
	// Type of the Object
	Type pulumi.StringOutput `pulumi:"type"`
	// Last update date of the object
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewDeltaStreamObject registers a new resource with the given unique name, arguments, and options.
func NewDeltaStreamObject(ctx *pulumi.Context,
	name string, args *DeltaStreamObjectArgs, opts ...pulumi.ResourceOption) (*DeltaStreamObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.Store == nil {
		return nil, errors.New("invalid value for required argument 'Store'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DeltaStreamObject
	err := ctx.RegisterResource("deltastream:index/object:DeltaStreamObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeltaStreamObject gets an existing DeltaStreamObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeltaStreamObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeltaStreamObjectState, opts ...pulumi.ResourceOption) (*DeltaStreamObject, error) {
	var resource DeltaStreamObject
	err := ctx.ReadResource("deltastream:index/object:DeltaStreamObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeltaStreamObject resources.
type deltaStreamObjectState struct {
	// Creation date of the object
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the Database
	Database *string `pulumi:"database"`
	// Fully qualified name of the Object
	Fqn *string `pulumi:"fqn"`
	// Name of the Object
	Name *string `pulumi:"name"`
	// Name of the Namespace
	Namespace *string `pulumi:"namespace"`
	// Owning role of the object
	Owner *string `pulumi:"owner"`
	// SQL statement to create the object
	Sql *string `pulumi:"sql"`
	// State of the Object
	State *string `pulumi:"state"`
	// Name of the Store
	Store *string `pulumi:"store"`
	// Type of the Object
	Type *string `pulumi:"type"`
	// Last update date of the object
	UpdatedAt *string `pulumi:"updatedAt"`
}

type DeltaStreamObjectState struct {
	// Creation date of the object
	CreatedAt pulumi.StringPtrInput
	// Name of the Database
	Database pulumi.StringPtrInput
	// Fully qualified name of the Object
	Fqn pulumi.StringPtrInput
	// Name of the Object
	Name pulumi.StringPtrInput
	// Name of the Namespace
	Namespace pulumi.StringPtrInput
	// Owning role of the object
	Owner pulumi.StringPtrInput
	// SQL statement to create the object
	Sql pulumi.StringPtrInput
	// State of the Object
	State pulumi.StringPtrInput
	// Name of the Store
	Store pulumi.StringPtrInput
	// Type of the Object
	Type pulumi.StringPtrInput
	// Last update date of the object
	UpdatedAt pulumi.StringPtrInput
}

func (DeltaStreamObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*deltaStreamObjectState)(nil)).Elem()
}

type deltaStreamObjectArgs struct {
	// Name of the Database
	Database string `pulumi:"database"`
	// Name of the Namespace
	Namespace string `pulumi:"namespace"`
	// Owning role of the object
	Owner *string `pulumi:"owner"`
	// SQL statement to create the object
	Sql string `pulumi:"sql"`
	// Name of the Store
	Store string `pulumi:"store"`
}

// The set of arguments for constructing a DeltaStreamObject resource.
type DeltaStreamObjectArgs struct {
	// Name of the Database
	Database pulumi.StringInput
	// Name of the Namespace
	Namespace pulumi.StringInput
	// Owning role of the object
	Owner pulumi.StringPtrInput
	// SQL statement to create the object
	Sql pulumi.StringInput
	// Name of the Store
	Store pulumi.StringInput
}

func (DeltaStreamObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deltaStreamObjectArgs)(nil)).Elem()
}

type DeltaStreamObjectInput interface {
	pulumi.Input

	ToDeltaStreamObjectOutput() DeltaStreamObjectOutput
	ToDeltaStreamObjectOutputWithContext(ctx context.Context) DeltaStreamObjectOutput
}

func (*DeltaStreamObject) ElementType() reflect.Type {
	return reflect.TypeOf((**DeltaStreamObject)(nil)).Elem()
}

func (i *DeltaStreamObject) ToDeltaStreamObjectOutput() DeltaStreamObjectOutput {
	return i.ToDeltaStreamObjectOutputWithContext(context.Background())
}

func (i *DeltaStreamObject) ToDeltaStreamObjectOutputWithContext(ctx context.Context) DeltaStreamObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaStreamObjectOutput)
}

// DeltaStreamObjectArrayInput is an input type that accepts DeltaStreamObjectArray and DeltaStreamObjectArrayOutput values.
// You can construct a concrete instance of `DeltaStreamObjectArrayInput` via:
//
//	DeltaStreamObjectArray{ DeltaStreamObjectArgs{...} }
type DeltaStreamObjectArrayInput interface {
	pulumi.Input

	ToDeltaStreamObjectArrayOutput() DeltaStreamObjectArrayOutput
	ToDeltaStreamObjectArrayOutputWithContext(context.Context) DeltaStreamObjectArrayOutput
}

type DeltaStreamObjectArray []DeltaStreamObjectInput

func (DeltaStreamObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeltaStreamObject)(nil)).Elem()
}

func (i DeltaStreamObjectArray) ToDeltaStreamObjectArrayOutput() DeltaStreamObjectArrayOutput {
	return i.ToDeltaStreamObjectArrayOutputWithContext(context.Background())
}

func (i DeltaStreamObjectArray) ToDeltaStreamObjectArrayOutputWithContext(ctx context.Context) DeltaStreamObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaStreamObjectArrayOutput)
}

// DeltaStreamObjectMapInput is an input type that accepts DeltaStreamObjectMap and DeltaStreamObjectMapOutput values.
// You can construct a concrete instance of `DeltaStreamObjectMapInput` via:
//
//	DeltaStreamObjectMap{ "key": DeltaStreamObjectArgs{...} }
type DeltaStreamObjectMapInput interface {
	pulumi.Input

	ToDeltaStreamObjectMapOutput() DeltaStreamObjectMapOutput
	ToDeltaStreamObjectMapOutputWithContext(context.Context) DeltaStreamObjectMapOutput
}

type DeltaStreamObjectMap map[string]DeltaStreamObjectInput

func (DeltaStreamObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeltaStreamObject)(nil)).Elem()
}

func (i DeltaStreamObjectMap) ToDeltaStreamObjectMapOutput() DeltaStreamObjectMapOutput {
	return i.ToDeltaStreamObjectMapOutputWithContext(context.Background())
}

func (i DeltaStreamObjectMap) ToDeltaStreamObjectMapOutputWithContext(ctx context.Context) DeltaStreamObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeltaStreamObjectMapOutput)
}

type DeltaStreamObjectOutput struct{ *pulumi.OutputState }

func (DeltaStreamObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeltaStreamObject)(nil)).Elem()
}

func (o DeltaStreamObjectOutput) ToDeltaStreamObjectOutput() DeltaStreamObjectOutput {
	return o
}

func (o DeltaStreamObjectOutput) ToDeltaStreamObjectOutputWithContext(ctx context.Context) DeltaStreamObjectOutput {
	return o
}

// Creation date of the object
func (o DeltaStreamObjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the Database
func (o DeltaStreamObjectOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

// Fully qualified name of the Object
func (o DeltaStreamObjectOutput) Fqn() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Fqn }).(pulumi.StringOutput)
}

// Name of the Object
func (o DeltaStreamObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of the Namespace
func (o DeltaStreamObjectOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// Owning role of the object
func (o DeltaStreamObjectOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// SQL statement to create the object
func (o DeltaStreamObjectOutput) Sql() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Sql }).(pulumi.StringOutput)
}

// State of the Object
func (o DeltaStreamObjectOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Name of the Store
func (o DeltaStreamObjectOutput) Store() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Store }).(pulumi.StringOutput)
}

// Type of the Object
func (o DeltaStreamObjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the object
func (o DeltaStreamObjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *DeltaStreamObject) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type DeltaStreamObjectArrayOutput struct{ *pulumi.OutputState }

func (DeltaStreamObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeltaStreamObject)(nil)).Elem()
}

func (o DeltaStreamObjectArrayOutput) ToDeltaStreamObjectArrayOutput() DeltaStreamObjectArrayOutput {
	return o
}

func (o DeltaStreamObjectArrayOutput) ToDeltaStreamObjectArrayOutputWithContext(ctx context.Context) DeltaStreamObjectArrayOutput {
	return o
}

func (o DeltaStreamObjectArrayOutput) Index(i pulumi.IntInput) DeltaStreamObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeltaStreamObject {
		return vs[0].([]*DeltaStreamObject)[vs[1].(int)]
	}).(DeltaStreamObjectOutput)
}

type DeltaStreamObjectMapOutput struct{ *pulumi.OutputState }

func (DeltaStreamObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeltaStreamObject)(nil)).Elem()
}

func (o DeltaStreamObjectMapOutput) ToDeltaStreamObjectMapOutput() DeltaStreamObjectMapOutput {
	return o
}

func (o DeltaStreamObjectMapOutput) ToDeltaStreamObjectMapOutputWithContext(ctx context.Context) DeltaStreamObjectMapOutput {
	return o
}

func (o DeltaStreamObjectMapOutput) MapIndex(k pulumi.StringInput) DeltaStreamObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeltaStreamObject {
		return vs[0].(map[string]*DeltaStreamObject)[vs[1].(string)]
	}).(DeltaStreamObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeltaStreamObjectInput)(nil)).Elem(), &DeltaStreamObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeltaStreamObjectArrayInput)(nil)).Elem(), DeltaStreamObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeltaStreamObjectMapInput)(nil)).Elem(), DeltaStreamObjectMap{})
	pulumi.RegisterOutputType(DeltaStreamObjectOutput{})
	pulumi.RegisterOutputType(DeltaStreamObjectArrayOutput{})
	pulumi.RegisterOutputType(DeltaStreamObjectMapOutput{})
}
