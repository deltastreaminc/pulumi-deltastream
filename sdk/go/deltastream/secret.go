// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"errors"
	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Secret resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deltastream.NewSecret(ctx, "example", &deltastream.SecretArgs{
//				Name:        pulumi.String("example_secret"),
//				Type:        pulumi.String("generic_string"),
//				Description: pulumi.String("secret description"),
//				StringValue: pulumi.String("some value"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Secret struct {
	pulumi.CustomResourceState

	// Creation date of the Secret
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Custom properties of the Secret
	CustomProperties pulumi.StringMapOutput `pulumi:"customProperties"`
	// Description of the Secret
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the Secret
	Name pulumi.StringOutput `pulumi:"name"`
	// Owning role of the Secret
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Status of the Secret
	Status pulumi.StringOutput `pulumi:"status"`
	// Secret value
	StringValue pulumi.StringPtrOutput `pulumi:"stringValue"`
	// Secret type. (Valid values: generic_string)
	Type pulumi.StringOutput `pulumi:"type"`
	// Last update date of the Secret
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("deltastream:index/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("deltastream:index/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// Creation date of the Secret
	CreatedAt *string `pulumi:"createdAt"`
	// Custom properties of the Secret
	CustomProperties map[string]string `pulumi:"customProperties"`
	// Description of the Secret
	Description *string `pulumi:"description"`
	// Name of the Secret
	Name *string `pulumi:"name"`
	// Owning role of the Secret
	Owner *string `pulumi:"owner"`
	// Status of the Secret
	Status *string `pulumi:"status"`
	// Secret value
	StringValue *string `pulumi:"stringValue"`
	// Secret type. (Valid values: generic_string)
	Type *string `pulumi:"type"`
	// Last update date of the Secret
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SecretState struct {
	// Creation date of the Secret
	CreatedAt pulumi.StringPtrInput
	// Custom properties of the Secret
	CustomProperties pulumi.StringMapInput
	// Description of the Secret
	Description pulumi.StringPtrInput
	// Name of the Secret
	Name pulumi.StringPtrInput
	// Owning role of the Secret
	Owner pulumi.StringPtrInput
	// Status of the Secret
	Status pulumi.StringPtrInput
	// Secret value
	StringValue pulumi.StringPtrInput
	// Secret type. (Valid values: generic_string)
	Type pulumi.StringPtrInput
	// Last update date of the Secret
	UpdatedAt pulumi.StringPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// Custom properties of the Secret
	CustomProperties map[string]string `pulumi:"customProperties"`
	// Description of the Secret
	Description *string `pulumi:"description"`
	// Name of the Secret
	Name *string `pulumi:"name"`
	// Owning role of the Secret
	Owner *string `pulumi:"owner"`
	// Secret value
	StringValue *string `pulumi:"stringValue"`
	// Secret type. (Valid values: generic_string)
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// Custom properties of the Secret
	CustomProperties pulumi.StringMapInput
	// Description of the Secret
	Description pulumi.StringPtrInput
	// Name of the Secret
	Name pulumi.StringPtrInput
	// Owning role of the Secret
	Owner pulumi.StringPtrInput
	// Secret value
	StringValue pulumi.StringPtrInput
	// Secret type. (Valid values: generic_string)
	Type pulumi.StringInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// Creation date of the Secret
func (o SecretOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Custom properties of the Secret
func (o SecretOutput) CustomProperties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringMapOutput { return v.CustomProperties }).(pulumi.StringMapOutput)
}

// Description of the Secret
func (o SecretOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the Secret
func (o SecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Secret
func (o SecretOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Status of the Secret
func (o SecretOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Secret value
func (o SecretOutput) StringValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringPtrOutput { return v.StringValue }).(pulumi.StringPtrOutput)
}

// Secret type. (Valid values: generic_string)
func (o SecretOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the Secret
func (o SecretOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}
