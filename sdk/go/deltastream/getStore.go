// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Store resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := deltastream.LookupStore(ctx, &deltastream.LookupStoreArgs{
//				Name: "example_store",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStore(ctx *pulumi.Context, args *LookupStoreArgs, opts ...pulumi.InvokeOption) (*LookupStoreResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStoreResult
	err := ctx.Invoke("deltastream:index/getStore:getStore", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStore.
type LookupStoreArgs struct {
	// Confluent Kafka specific configuration
	ConfluentKafka *GetStoreConfluentKafka `pulumi:"confluentKafka"`
	// Kafka specific configuration
	Kafka *GetStoreKafka `pulumi:"kafka"`
	// Kinesis specific configuration
	Kinesis *GetStoreKinesis `pulumi:"kinesis"`
	// Name of the Store
	Name string `pulumi:"name"`
	// Postgres specific configuration
	Postgres *GetStorePostgres `pulumi:"postgres"`
	// Snowflake specific configuration
	Snowflake *GetStoreSnowflake `pulumi:"snowflake"`
}

// A collection of values returned by getStore.
type LookupStoreResult struct {
	// Confluent Kafka specific configuration
	ConfluentKafka *GetStoreConfluentKafka `pulumi:"confluentKafka"`
	// Creation date of the Store
	CreatedAt string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Kafka specific configuration
	Kafka *GetStoreKafka `pulumi:"kafka"`
	// Kinesis specific configuration
	Kinesis *GetStoreKinesis `pulumi:"kinesis"`
	// Name of the Store
	Name string `pulumi:"name"`
	// Owning role of the Store
	Owner string `pulumi:"owner"`
	// Postgres specific configuration
	Postgres *GetStorePostgres `pulumi:"postgres"`
	// Snowflake specific configuration
	Snowflake *GetStoreSnowflake `pulumi:"snowflake"`
	// State of the Store
	State string `pulumi:"state"`
	// Type of the Store
	Type string `pulumi:"type"`
	// Last update date of the Store
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupStoreOutput(ctx *pulumi.Context, args LookupStoreOutputArgs, opts ...pulumi.InvokeOption) LookupStoreResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStoreResultOutput, error) {
			args := v.(LookupStoreArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("deltastream:index/getStore:getStore", args, LookupStoreResultOutput{}, options).(LookupStoreResultOutput), nil
		}).(LookupStoreResultOutput)
}

// A collection of arguments for invoking getStore.
type LookupStoreOutputArgs struct {
	// Confluent Kafka specific configuration
	ConfluentKafka GetStoreConfluentKafkaPtrInput `pulumi:"confluentKafka"`
	// Kafka specific configuration
	Kafka GetStoreKafkaPtrInput `pulumi:"kafka"`
	// Kinesis specific configuration
	Kinesis GetStoreKinesisPtrInput `pulumi:"kinesis"`
	// Name of the Store
	Name pulumi.StringInput `pulumi:"name"`
	// Postgres specific configuration
	Postgres GetStorePostgresPtrInput `pulumi:"postgres"`
	// Snowflake specific configuration
	Snowflake GetStoreSnowflakePtrInput `pulumi:"snowflake"`
}

func (LookupStoreOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoreArgs)(nil)).Elem()
}

// A collection of values returned by getStore.
type LookupStoreResultOutput struct{ *pulumi.OutputState }

func (LookupStoreResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStoreResult)(nil)).Elem()
}

func (o LookupStoreResultOutput) ToLookupStoreResultOutput() LookupStoreResultOutput {
	return o
}

func (o LookupStoreResultOutput) ToLookupStoreResultOutputWithContext(ctx context.Context) LookupStoreResultOutput {
	return o
}

// Confluent Kafka specific configuration
func (o LookupStoreResultOutput) ConfluentKafka() GetStoreConfluentKafkaPtrOutput {
	return o.ApplyT(func(v LookupStoreResult) *GetStoreConfluentKafka { return v.ConfluentKafka }).(GetStoreConfluentKafkaPtrOutput)
}

// Creation date of the Store
func (o LookupStoreResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStoreResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Id }).(pulumi.StringOutput)
}

// Kafka specific configuration
func (o LookupStoreResultOutput) Kafka() GetStoreKafkaPtrOutput {
	return o.ApplyT(func(v LookupStoreResult) *GetStoreKafka { return v.Kafka }).(GetStoreKafkaPtrOutput)
}

// Kinesis specific configuration
func (o LookupStoreResultOutput) Kinesis() GetStoreKinesisPtrOutput {
	return o.ApplyT(func(v LookupStoreResult) *GetStoreKinesis { return v.Kinesis }).(GetStoreKinesisPtrOutput)
}

// Name of the Store
func (o LookupStoreResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Store
func (o LookupStoreResultOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Owner }).(pulumi.StringOutput)
}

// Postgres specific configuration
func (o LookupStoreResultOutput) Postgres() GetStorePostgresPtrOutput {
	return o.ApplyT(func(v LookupStoreResult) *GetStorePostgres { return v.Postgres }).(GetStorePostgresPtrOutput)
}

// Snowflake specific configuration
func (o LookupStoreResultOutput) Snowflake() GetStoreSnowflakePtrOutput {
	return o.ApplyT(func(v LookupStoreResult) *GetStoreSnowflake { return v.Snowflake }).(GetStoreSnowflakePtrOutput)
}

// State of the Store
func (o LookupStoreResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.State }).(pulumi.StringOutput)
}

// Type of the Store
func (o LookupStoreResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the Store
func (o LookupStoreResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStoreResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStoreResultOutput{})
}
