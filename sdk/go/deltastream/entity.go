// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"errors"
	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Database resource
type Entity struct {
	pulumi.CustomResourceState

	// Entity path
	EntityPaths pulumi.StringArrayOutput `pulumi:"entityPaths"`
	// Kafka properties
	KafkaProperties EntityKafkaPropertiesOutput `pulumi:"kafkaProperties"`
	// Kinesis properties
	KinesisProperties EntityKinesisPropertiesOutput `pulumi:"kinesisProperties"`
	// Postgres properties
	PostgresProperties EntityPostgresPropertiesOutput `pulumi:"postgresProperties"`
	// Snowflake properties
	SnowflakeProperties EntitySnowflakePropertiesOutput `pulumi:"snowflakeProperties"`
	// Store name
	Store pulumi.StringOutput `pulumi:"store"`
}

// NewEntity registers a new resource with the given unique name, arguments, and options.
func NewEntity(ctx *pulumi.Context,
	name string, args *EntityArgs, opts ...pulumi.ResourceOption) (*Entity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EntityPaths == nil {
		return nil, errors.New("invalid value for required argument 'EntityPaths'")
	}
	if args.Store == nil {
		return nil, errors.New("invalid value for required argument 'Store'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Entity
	err := ctx.RegisterResource("deltastream:index/entity:Entity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEntity gets an existing Entity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEntity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EntityState, opts ...pulumi.ResourceOption) (*Entity, error) {
	var resource Entity
	err := ctx.ReadResource("deltastream:index/entity:Entity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Entity resources.
type entityState struct {
	// Entity path
	EntityPaths []string `pulumi:"entityPaths"`
	// Kafka properties
	KafkaProperties *EntityKafkaProperties `pulumi:"kafkaProperties"`
	// Kinesis properties
	KinesisProperties *EntityKinesisProperties `pulumi:"kinesisProperties"`
	// Postgres properties
	PostgresProperties *EntityPostgresProperties `pulumi:"postgresProperties"`
	// Snowflake properties
	SnowflakeProperties *EntitySnowflakeProperties `pulumi:"snowflakeProperties"`
	// Store name
	Store *string `pulumi:"store"`
}

type EntityState struct {
	// Entity path
	EntityPaths pulumi.StringArrayInput
	// Kafka properties
	KafkaProperties EntityKafkaPropertiesPtrInput
	// Kinesis properties
	KinesisProperties EntityKinesisPropertiesPtrInput
	// Postgres properties
	PostgresProperties EntityPostgresPropertiesPtrInput
	// Snowflake properties
	SnowflakeProperties EntitySnowflakePropertiesPtrInput
	// Store name
	Store pulumi.StringPtrInput
}

func (EntityState) ElementType() reflect.Type {
	return reflect.TypeOf((*entityState)(nil)).Elem()
}

type entityArgs struct {
	// Entity path
	EntityPaths []string `pulumi:"entityPaths"`
	// Kafka properties
	KafkaProperties *EntityKafkaProperties `pulumi:"kafkaProperties"`
	// Kinesis properties
	KinesisProperties *EntityKinesisProperties `pulumi:"kinesisProperties"`
	// Postgres properties
	PostgresProperties *EntityPostgresProperties `pulumi:"postgresProperties"`
	// Snowflake properties
	SnowflakeProperties *EntitySnowflakeProperties `pulumi:"snowflakeProperties"`
	// Store name
	Store string `pulumi:"store"`
}

// The set of arguments for constructing a Entity resource.
type EntityArgs struct {
	// Entity path
	EntityPaths pulumi.StringArrayInput
	// Kafka properties
	KafkaProperties EntityKafkaPropertiesPtrInput
	// Kinesis properties
	KinesisProperties EntityKinesisPropertiesPtrInput
	// Postgres properties
	PostgresProperties EntityPostgresPropertiesPtrInput
	// Snowflake properties
	SnowflakeProperties EntitySnowflakePropertiesPtrInput
	// Store name
	Store pulumi.StringInput
}

func (EntityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*entityArgs)(nil)).Elem()
}

type EntityInput interface {
	pulumi.Input

	ToEntityOutput() EntityOutput
	ToEntityOutputWithContext(ctx context.Context) EntityOutput
}

func (*Entity) ElementType() reflect.Type {
	return reflect.TypeOf((**Entity)(nil)).Elem()
}

func (i *Entity) ToEntityOutput() EntityOutput {
	return i.ToEntityOutputWithContext(context.Background())
}

func (i *Entity) ToEntityOutputWithContext(ctx context.Context) EntityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityOutput)
}

// EntityArrayInput is an input type that accepts EntityArray and EntityArrayOutput values.
// You can construct a concrete instance of `EntityArrayInput` via:
//
//	EntityArray{ EntityArgs{...} }
type EntityArrayInput interface {
	pulumi.Input

	ToEntityArrayOutput() EntityArrayOutput
	ToEntityArrayOutputWithContext(context.Context) EntityArrayOutput
}

type EntityArray []EntityInput

func (EntityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entity)(nil)).Elem()
}

func (i EntityArray) ToEntityArrayOutput() EntityArrayOutput {
	return i.ToEntityArrayOutputWithContext(context.Background())
}

func (i EntityArray) ToEntityArrayOutputWithContext(ctx context.Context) EntityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityArrayOutput)
}

// EntityMapInput is an input type that accepts EntityMap and EntityMapOutput values.
// You can construct a concrete instance of `EntityMapInput` via:
//
//	EntityMap{ "key": EntityArgs{...} }
type EntityMapInput interface {
	pulumi.Input

	ToEntityMapOutput() EntityMapOutput
	ToEntityMapOutputWithContext(context.Context) EntityMapOutput
}

type EntityMap map[string]EntityInput

func (EntityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entity)(nil)).Elem()
}

func (i EntityMap) ToEntityMapOutput() EntityMapOutput {
	return i.ToEntityMapOutputWithContext(context.Background())
}

func (i EntityMap) ToEntityMapOutputWithContext(ctx context.Context) EntityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityMapOutput)
}

type EntityOutput struct{ *pulumi.OutputState }

func (EntityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Entity)(nil)).Elem()
}

func (o EntityOutput) ToEntityOutput() EntityOutput {
	return o
}

func (o EntityOutput) ToEntityOutputWithContext(ctx context.Context) EntityOutput {
	return o
}

// Entity path
func (o EntityOutput) EntityPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringArrayOutput { return v.EntityPaths }).(pulumi.StringArrayOutput)
}

// Kafka properties
func (o EntityOutput) KafkaProperties() EntityKafkaPropertiesOutput {
	return o.ApplyT(func(v *Entity) EntityKafkaPropertiesOutput { return v.KafkaProperties }).(EntityKafkaPropertiesOutput)
}

// Kinesis properties
func (o EntityOutput) KinesisProperties() EntityKinesisPropertiesOutput {
	return o.ApplyT(func(v *Entity) EntityKinesisPropertiesOutput { return v.KinesisProperties }).(EntityKinesisPropertiesOutput)
}

// Postgres properties
func (o EntityOutput) PostgresProperties() EntityPostgresPropertiesOutput {
	return o.ApplyT(func(v *Entity) EntityPostgresPropertiesOutput { return v.PostgresProperties }).(EntityPostgresPropertiesOutput)
}

// Snowflake properties
func (o EntityOutput) SnowflakeProperties() EntitySnowflakePropertiesOutput {
	return o.ApplyT(func(v *Entity) EntitySnowflakePropertiesOutput { return v.SnowflakeProperties }).(EntitySnowflakePropertiesOutput)
}

// Store name
func (o EntityOutput) Store() pulumi.StringOutput {
	return o.ApplyT(func(v *Entity) pulumi.StringOutput { return v.Store }).(pulumi.StringOutput)
}

type EntityArrayOutput struct{ *pulumi.OutputState }

func (EntityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Entity)(nil)).Elem()
}

func (o EntityArrayOutput) ToEntityArrayOutput() EntityArrayOutput {
	return o
}

func (o EntityArrayOutput) ToEntityArrayOutputWithContext(ctx context.Context) EntityArrayOutput {
	return o
}

func (o EntityArrayOutput) Index(i pulumi.IntInput) EntityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Entity {
		return vs[0].([]*Entity)[vs[1].(int)]
	}).(EntityOutput)
}

type EntityMapOutput struct{ *pulumi.OutputState }

func (EntityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Entity)(nil)).Elem()
}

func (o EntityMapOutput) ToEntityMapOutput() EntityMapOutput {
	return o
}

func (o EntityMapOutput) ToEntityMapOutputWithContext(ctx context.Context) EntityMapOutput {
	return o
}

func (o EntityMapOutput) MapIndex(k pulumi.StringInput) EntityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Entity {
		return vs[0].(map[string]*Entity)[vs[1].(string)]
	}).(EntityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityInput)(nil)).Elem(), &Entity{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityArrayInput)(nil)).Elem(), EntityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityMapInput)(nil)).Elem(), EntityMap{})
	pulumi.RegisterOutputType(EntityOutput{})
	pulumi.RegisterOutputType(EntityArrayOutput{})
	pulumi.RegisterOutputType(EntityMapOutput{})
}
