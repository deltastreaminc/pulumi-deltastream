// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Schema registry resource
type SchemaRegistry struct {
	pulumi.CustomResourceState

	// Confluent specific configuration
	Confluent SchemaRegistryConfluentPtrOutput `pulumi:"confluent"`
	// Confluent cloud specific configuration
	ConfluentCloud SchemaRegistryConfluentCloudPtrOutput `pulumi:"confluentCloud"`
	// Creation date of the schema registry
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the schema registry
	Name pulumi.StringOutput `pulumi:"name"`
	// Owning role of the schema registry
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Status of the schema registry
	State pulumi.StringOutput `pulumi:"state"`
	// Type of the schema registry
	Type pulumi.StringOutput `pulumi:"type"`
	// Last update date of the schema registry
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewSchemaRegistry registers a new resource with the given unique name, arguments, and options.
func NewSchemaRegistry(ctx *pulumi.Context,
	name string, args *SchemaRegistryArgs, opts ...pulumi.ResourceOption) (*SchemaRegistry, error) {
	if args == nil {
		args = &SchemaRegistryArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SchemaRegistry
	err := ctx.RegisterResource("deltastream:index/schemaRegistry:SchemaRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchemaRegistry gets an existing SchemaRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchemaRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaRegistryState, opts ...pulumi.ResourceOption) (*SchemaRegistry, error) {
	var resource SchemaRegistry
	err := ctx.ReadResource("deltastream:index/schemaRegistry:SchemaRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SchemaRegistry resources.
type schemaRegistryState struct {
	// Confluent specific configuration
	Confluent *SchemaRegistryConfluent `pulumi:"confluent"`
	// Confluent cloud specific configuration
	ConfluentCloud *SchemaRegistryConfluentCloud `pulumi:"confluentCloud"`
	// Creation date of the schema registry
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the schema registry
	Name *string `pulumi:"name"`
	// Owning role of the schema registry
	Owner *string `pulumi:"owner"`
	// Status of the schema registry
	State *string `pulumi:"state"`
	// Type of the schema registry
	Type *string `pulumi:"type"`
	// Last update date of the schema registry
	UpdatedAt *string `pulumi:"updatedAt"`
}

type SchemaRegistryState struct {
	// Confluent specific configuration
	Confluent SchemaRegistryConfluentPtrInput
	// Confluent cloud specific configuration
	ConfluentCloud SchemaRegistryConfluentCloudPtrInput
	// Creation date of the schema registry
	CreatedAt pulumi.StringPtrInput
	// Name of the schema registry
	Name pulumi.StringPtrInput
	// Owning role of the schema registry
	Owner pulumi.StringPtrInput
	// Status of the schema registry
	State pulumi.StringPtrInput
	// Type of the schema registry
	Type pulumi.StringPtrInput
	// Last update date of the schema registry
	UpdatedAt pulumi.StringPtrInput
}

func (SchemaRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryState)(nil)).Elem()
}

type schemaRegistryArgs struct {
	// Confluent specific configuration
	Confluent *SchemaRegistryConfluent `pulumi:"confluent"`
	// Confluent cloud specific configuration
	ConfluentCloud *SchemaRegistryConfluentCloud `pulumi:"confluentCloud"`
	// Name of the schema registry
	Name *string `pulumi:"name"`
	// Owning role of the schema registry
	Owner *string `pulumi:"owner"`
}

// The set of arguments for constructing a SchemaRegistry resource.
type SchemaRegistryArgs struct {
	// Confluent specific configuration
	Confluent SchemaRegistryConfluentPtrInput
	// Confluent cloud specific configuration
	ConfluentCloud SchemaRegistryConfluentCloudPtrInput
	// Name of the schema registry
	Name pulumi.StringPtrInput
	// Owning role of the schema registry
	Owner pulumi.StringPtrInput
}

func (SchemaRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaRegistryArgs)(nil)).Elem()
}

type SchemaRegistryInput interface {
	pulumi.Input

	ToSchemaRegistryOutput() SchemaRegistryOutput
	ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput
}

func (*SchemaRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (i *SchemaRegistry) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return i.ToSchemaRegistryOutputWithContext(context.Background())
}

func (i *SchemaRegistry) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryOutput)
}

// SchemaRegistryArrayInput is an input type that accepts SchemaRegistryArray and SchemaRegistryArrayOutput values.
// You can construct a concrete instance of `SchemaRegistryArrayInput` via:
//
//	SchemaRegistryArray{ SchemaRegistryArgs{...} }
type SchemaRegistryArrayInput interface {
	pulumi.Input

	ToSchemaRegistryArrayOutput() SchemaRegistryArrayOutput
	ToSchemaRegistryArrayOutputWithContext(context.Context) SchemaRegistryArrayOutput
}

type SchemaRegistryArray []SchemaRegistryInput

func (SchemaRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryArray) ToSchemaRegistryArrayOutput() SchemaRegistryArrayOutput {
	return i.ToSchemaRegistryArrayOutputWithContext(context.Background())
}

func (i SchemaRegistryArray) ToSchemaRegistryArrayOutputWithContext(ctx context.Context) SchemaRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryArrayOutput)
}

// SchemaRegistryMapInput is an input type that accepts SchemaRegistryMap and SchemaRegistryMapOutput values.
// You can construct a concrete instance of `SchemaRegistryMapInput` via:
//
//	SchemaRegistryMap{ "key": SchemaRegistryArgs{...} }
type SchemaRegistryMapInput interface {
	pulumi.Input

	ToSchemaRegistryMapOutput() SchemaRegistryMapOutput
	ToSchemaRegistryMapOutputWithContext(context.Context) SchemaRegistryMapOutput
}

type SchemaRegistryMap map[string]SchemaRegistryInput

func (SchemaRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistry)(nil)).Elem()
}

func (i SchemaRegistryMap) ToSchemaRegistryMapOutput() SchemaRegistryMapOutput {
	return i.ToSchemaRegistryMapOutputWithContext(context.Background())
}

func (i SchemaRegistryMap) ToSchemaRegistryMapOutputWithContext(ctx context.Context) SchemaRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryMapOutput)
}

type SchemaRegistryOutput struct{ *pulumi.OutputState }

func (SchemaRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutput() SchemaRegistryOutput {
	return o
}

func (o SchemaRegistryOutput) ToSchemaRegistryOutputWithContext(ctx context.Context) SchemaRegistryOutput {
	return o
}

// Confluent specific configuration
func (o SchemaRegistryOutput) Confluent() SchemaRegistryConfluentPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistryConfluentPtrOutput { return v.Confluent }).(SchemaRegistryConfluentPtrOutput)
}

// Confluent cloud specific configuration
func (o SchemaRegistryOutput) ConfluentCloud() SchemaRegistryConfluentCloudPtrOutput {
	return o.ApplyT(func(v *SchemaRegistry) SchemaRegistryConfluentCloudPtrOutput { return v.ConfluentCloud }).(SchemaRegistryConfluentCloudPtrOutput)
}

// Creation date of the schema registry
func (o SchemaRegistryOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the schema registry
func (o SchemaRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the schema registry
func (o SchemaRegistryOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Status of the schema registry
func (o SchemaRegistryOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Type of the schema registry
func (o SchemaRegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the schema registry
func (o SchemaRegistryOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *SchemaRegistry) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type SchemaRegistryArrayOutput struct{ *pulumi.OutputState }

func (SchemaRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryArrayOutput) ToSchemaRegistryArrayOutput() SchemaRegistryArrayOutput {
	return o
}

func (o SchemaRegistryArrayOutput) ToSchemaRegistryArrayOutputWithContext(ctx context.Context) SchemaRegistryArrayOutput {
	return o
}

func (o SchemaRegistryArrayOutput) Index(i pulumi.IntInput) SchemaRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SchemaRegistry {
		return vs[0].([]*SchemaRegistry)[vs[1].(int)]
	}).(SchemaRegistryOutput)
}

type SchemaRegistryMapOutput struct{ *pulumi.OutputState }

func (SchemaRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SchemaRegistry)(nil)).Elem()
}

func (o SchemaRegistryMapOutput) ToSchemaRegistryMapOutput() SchemaRegistryMapOutput {
	return o
}

func (o SchemaRegistryMapOutput) ToSchemaRegistryMapOutputWithContext(ctx context.Context) SchemaRegistryMapOutput {
	return o
}

func (o SchemaRegistryMapOutput) MapIndex(k pulumi.StringInput) SchemaRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SchemaRegistry {
		return vs[0].(map[string]*SchemaRegistry)[vs[1].(string)]
	}).(SchemaRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryInput)(nil)).Elem(), &SchemaRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryArrayInput)(nil)).Elem(), SchemaRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryMapInput)(nil)).Elem(), SchemaRegistryMap{})
	pulumi.RegisterOutputType(SchemaRegistryOutput{})
	pulumi.RegisterOutputType(SchemaRegistryArrayOutput{})
	pulumi.RegisterOutputType(SchemaRegistryMapOutput{})
}
