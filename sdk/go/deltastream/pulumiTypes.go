// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package deltastream

import (
	"context"
	"reflect"

	"github.com/deltastreaminc/pulumi-deltastream/sdk/go/deltastream/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type EntityKafkaProperties struct {
	// All topic configurations including any server set configurations
	AllConfigs map[string]string `pulumi:"allConfigs"`
	// Additional topic configurations
	Configs map[string]string `pulumi:"configs"`
	// Protobuf descriptor for key
	KeyDescriptor *string `pulumi:"keyDescriptor"`
	// Number of partitions
	TopicPartitions *int `pulumi:"topicPartitions"`
	// Number of replicas
	TopicReplicas *int `pulumi:"topicReplicas"`
	// Protobuf descriptor for value
	ValueDescriptor *string `pulumi:"valueDescriptor"`
}

// EntityKafkaPropertiesInput is an input type that accepts EntityKafkaPropertiesArgs and EntityKafkaPropertiesOutput values.
// You can construct a concrete instance of `EntityKafkaPropertiesInput` via:
//
//	EntityKafkaPropertiesArgs{...}
type EntityKafkaPropertiesInput interface {
	pulumi.Input

	ToEntityKafkaPropertiesOutput() EntityKafkaPropertiesOutput
	ToEntityKafkaPropertiesOutputWithContext(context.Context) EntityKafkaPropertiesOutput
}

type EntityKafkaPropertiesArgs struct {
	// All topic configurations including any server set configurations
	AllConfigs pulumi.StringMapInput `pulumi:"allConfigs"`
	// Additional topic configurations
	Configs pulumi.StringMapInput `pulumi:"configs"`
	// Protobuf descriptor for key
	KeyDescriptor pulumi.StringPtrInput `pulumi:"keyDescriptor"`
	// Number of partitions
	TopicPartitions pulumi.IntPtrInput `pulumi:"topicPartitions"`
	// Number of replicas
	TopicReplicas pulumi.IntPtrInput `pulumi:"topicReplicas"`
	// Protobuf descriptor for value
	ValueDescriptor pulumi.StringPtrInput `pulumi:"valueDescriptor"`
}

func (EntityKafkaPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKafkaProperties)(nil)).Elem()
}

func (i EntityKafkaPropertiesArgs) ToEntityKafkaPropertiesOutput() EntityKafkaPropertiesOutput {
	return i.ToEntityKafkaPropertiesOutputWithContext(context.Background())
}

func (i EntityKafkaPropertiesArgs) ToEntityKafkaPropertiesOutputWithContext(ctx context.Context) EntityKafkaPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKafkaPropertiesOutput)
}

func (i EntityKafkaPropertiesArgs) ToEntityKafkaPropertiesPtrOutput() EntityKafkaPropertiesPtrOutput {
	return i.ToEntityKafkaPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityKafkaPropertiesArgs) ToEntityKafkaPropertiesPtrOutputWithContext(ctx context.Context) EntityKafkaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKafkaPropertiesOutput).ToEntityKafkaPropertiesPtrOutputWithContext(ctx)
}

// EntityKafkaPropertiesPtrInput is an input type that accepts EntityKafkaPropertiesArgs, EntityKafkaPropertiesPtr and EntityKafkaPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityKafkaPropertiesPtrInput` via:
//
//	        EntityKafkaPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityKafkaPropertiesPtrInput interface {
	pulumi.Input

	ToEntityKafkaPropertiesPtrOutput() EntityKafkaPropertiesPtrOutput
	ToEntityKafkaPropertiesPtrOutputWithContext(context.Context) EntityKafkaPropertiesPtrOutput
}

type entityKafkaPropertiesPtrType EntityKafkaPropertiesArgs

func EntityKafkaPropertiesPtr(v *EntityKafkaPropertiesArgs) EntityKafkaPropertiesPtrInput {
	return (*entityKafkaPropertiesPtrType)(v)
}

func (*entityKafkaPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKafkaProperties)(nil)).Elem()
}

func (i *entityKafkaPropertiesPtrType) ToEntityKafkaPropertiesPtrOutput() EntityKafkaPropertiesPtrOutput {
	return i.ToEntityKafkaPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityKafkaPropertiesPtrType) ToEntityKafkaPropertiesPtrOutputWithContext(ctx context.Context) EntityKafkaPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKafkaPropertiesPtrOutput)
}

type EntityKafkaPropertiesOutput struct{ *pulumi.OutputState }

func (EntityKafkaPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKafkaProperties)(nil)).Elem()
}

func (o EntityKafkaPropertiesOutput) ToEntityKafkaPropertiesOutput() EntityKafkaPropertiesOutput {
	return o
}

func (o EntityKafkaPropertiesOutput) ToEntityKafkaPropertiesOutputWithContext(ctx context.Context) EntityKafkaPropertiesOutput {
	return o
}

func (o EntityKafkaPropertiesOutput) ToEntityKafkaPropertiesPtrOutput() EntityKafkaPropertiesPtrOutput {
	return o.ToEntityKafkaPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityKafkaPropertiesOutput) ToEntityKafkaPropertiesPtrOutputWithContext(ctx context.Context) EntityKafkaPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityKafkaProperties) *EntityKafkaProperties {
		return &v
	}).(EntityKafkaPropertiesPtrOutput)
}

// All topic configurations including any server set configurations
func (o EntityKafkaPropertiesOutput) AllConfigs() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityKafkaProperties) map[string]string { return v.AllConfigs }).(pulumi.StringMapOutput)
}

// Additional topic configurations
func (o EntityKafkaPropertiesOutput) Configs() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityKafkaProperties) map[string]string { return v.Configs }).(pulumi.StringMapOutput)
}

// Protobuf descriptor for key
func (o EntityKafkaPropertiesOutput) KeyDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKafkaProperties) *string { return v.KeyDescriptor }).(pulumi.StringPtrOutput)
}

// Number of partitions
func (o EntityKafkaPropertiesOutput) TopicPartitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EntityKafkaProperties) *int { return v.TopicPartitions }).(pulumi.IntPtrOutput)
}

// Number of replicas
func (o EntityKafkaPropertiesOutput) TopicReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EntityKafkaProperties) *int { return v.TopicReplicas }).(pulumi.IntPtrOutput)
}

// Protobuf descriptor for value
func (o EntityKafkaPropertiesOutput) ValueDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKafkaProperties) *string { return v.ValueDescriptor }).(pulumi.StringPtrOutput)
}

type EntityKafkaPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityKafkaPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKafkaProperties)(nil)).Elem()
}

func (o EntityKafkaPropertiesPtrOutput) ToEntityKafkaPropertiesPtrOutput() EntityKafkaPropertiesPtrOutput {
	return o
}

func (o EntityKafkaPropertiesPtrOutput) ToEntityKafkaPropertiesPtrOutputWithContext(ctx context.Context) EntityKafkaPropertiesPtrOutput {
	return o
}

func (o EntityKafkaPropertiesPtrOutput) Elem() EntityKafkaPropertiesOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) EntityKafkaProperties {
		if v != nil {
			return *v
		}
		var ret EntityKafkaProperties
		return ret
	}).(EntityKafkaPropertiesOutput)
}

// All topic configurations including any server set configurations
func (o EntityKafkaPropertiesPtrOutput) AllConfigs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllConfigs
	}).(pulumi.StringMapOutput)
}

// Additional topic configurations
func (o EntityKafkaPropertiesPtrOutput) Configs() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Configs
	}).(pulumi.StringMapOutput)
}

// Protobuf descriptor for key
func (o EntityKafkaPropertiesPtrOutput) KeyDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) *string {
		if v == nil {
			return nil
		}
		return v.KeyDescriptor
	}).(pulumi.StringPtrOutput)
}

// Number of partitions
func (o EntityKafkaPropertiesPtrOutput) TopicPartitions() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) *int {
		if v == nil {
			return nil
		}
		return v.TopicPartitions
	}).(pulumi.IntPtrOutput)
}

// Number of replicas
func (o EntityKafkaPropertiesPtrOutput) TopicReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) *int {
		if v == nil {
			return nil
		}
		return v.TopicReplicas
	}).(pulumi.IntPtrOutput)
}

// Protobuf descriptor for value
func (o EntityKafkaPropertiesPtrOutput) ValueDescriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKafkaProperties) *string {
		if v == nil {
			return nil
		}
		return v.ValueDescriptor
	}).(pulumi.StringPtrOutput)
}

type EntityKinesisProperties struct {
	// Protobuf descriptor for the value
	Descriptor *string `pulumi:"descriptor"`
	// Number of shards
	KinesisShards *int `pulumi:"kinesisShards"`
}

// EntityKinesisPropertiesInput is an input type that accepts EntityKinesisPropertiesArgs and EntityKinesisPropertiesOutput values.
// You can construct a concrete instance of `EntityKinesisPropertiesInput` via:
//
//	EntityKinesisPropertiesArgs{...}
type EntityKinesisPropertiesInput interface {
	pulumi.Input

	ToEntityKinesisPropertiesOutput() EntityKinesisPropertiesOutput
	ToEntityKinesisPropertiesOutputWithContext(context.Context) EntityKinesisPropertiesOutput
}

type EntityKinesisPropertiesArgs struct {
	// Protobuf descriptor for the value
	Descriptor pulumi.StringPtrInput `pulumi:"descriptor"`
	// Number of shards
	KinesisShards pulumi.IntPtrInput `pulumi:"kinesisShards"`
}

func (EntityKinesisPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKinesisProperties)(nil)).Elem()
}

func (i EntityKinesisPropertiesArgs) ToEntityKinesisPropertiesOutput() EntityKinesisPropertiesOutput {
	return i.ToEntityKinesisPropertiesOutputWithContext(context.Background())
}

func (i EntityKinesisPropertiesArgs) ToEntityKinesisPropertiesOutputWithContext(ctx context.Context) EntityKinesisPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKinesisPropertiesOutput)
}

func (i EntityKinesisPropertiesArgs) ToEntityKinesisPropertiesPtrOutput() EntityKinesisPropertiesPtrOutput {
	return i.ToEntityKinesisPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityKinesisPropertiesArgs) ToEntityKinesisPropertiesPtrOutputWithContext(ctx context.Context) EntityKinesisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKinesisPropertiesOutput).ToEntityKinesisPropertiesPtrOutputWithContext(ctx)
}

// EntityKinesisPropertiesPtrInput is an input type that accepts EntityKinesisPropertiesArgs, EntityKinesisPropertiesPtr and EntityKinesisPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityKinesisPropertiesPtrInput` via:
//
//	        EntityKinesisPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityKinesisPropertiesPtrInput interface {
	pulumi.Input

	ToEntityKinesisPropertiesPtrOutput() EntityKinesisPropertiesPtrOutput
	ToEntityKinesisPropertiesPtrOutputWithContext(context.Context) EntityKinesisPropertiesPtrOutput
}

type entityKinesisPropertiesPtrType EntityKinesisPropertiesArgs

func EntityKinesisPropertiesPtr(v *EntityKinesisPropertiesArgs) EntityKinesisPropertiesPtrInput {
	return (*entityKinesisPropertiesPtrType)(v)
}

func (*entityKinesisPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKinesisProperties)(nil)).Elem()
}

func (i *entityKinesisPropertiesPtrType) ToEntityKinesisPropertiesPtrOutput() EntityKinesisPropertiesPtrOutput {
	return i.ToEntityKinesisPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityKinesisPropertiesPtrType) ToEntityKinesisPropertiesPtrOutputWithContext(ctx context.Context) EntityKinesisPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityKinesisPropertiesPtrOutput)
}

type EntityKinesisPropertiesOutput struct{ *pulumi.OutputState }

func (EntityKinesisPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityKinesisProperties)(nil)).Elem()
}

func (o EntityKinesisPropertiesOutput) ToEntityKinesisPropertiesOutput() EntityKinesisPropertiesOutput {
	return o
}

func (o EntityKinesisPropertiesOutput) ToEntityKinesisPropertiesOutputWithContext(ctx context.Context) EntityKinesisPropertiesOutput {
	return o
}

func (o EntityKinesisPropertiesOutput) ToEntityKinesisPropertiesPtrOutput() EntityKinesisPropertiesPtrOutput {
	return o.ToEntityKinesisPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityKinesisPropertiesOutput) ToEntityKinesisPropertiesPtrOutputWithContext(ctx context.Context) EntityKinesisPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityKinesisProperties) *EntityKinesisProperties {
		return &v
	}).(EntityKinesisPropertiesPtrOutput)
}

// Protobuf descriptor for the value
func (o EntityKinesisPropertiesOutput) Descriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EntityKinesisProperties) *string { return v.Descriptor }).(pulumi.StringPtrOutput)
}

// Number of shards
func (o EntityKinesisPropertiesOutput) KinesisShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v EntityKinesisProperties) *int { return v.KinesisShards }).(pulumi.IntPtrOutput)
}

type EntityKinesisPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityKinesisPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityKinesisProperties)(nil)).Elem()
}

func (o EntityKinesisPropertiesPtrOutput) ToEntityKinesisPropertiesPtrOutput() EntityKinesisPropertiesPtrOutput {
	return o
}

func (o EntityKinesisPropertiesPtrOutput) ToEntityKinesisPropertiesPtrOutputWithContext(ctx context.Context) EntityKinesisPropertiesPtrOutput {
	return o
}

func (o EntityKinesisPropertiesPtrOutput) Elem() EntityKinesisPropertiesOutput {
	return o.ApplyT(func(v *EntityKinesisProperties) EntityKinesisProperties {
		if v != nil {
			return *v
		}
		var ret EntityKinesisProperties
		return ret
	}).(EntityKinesisPropertiesOutput)
}

// Protobuf descriptor for the value
func (o EntityKinesisPropertiesPtrOutput) Descriptor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EntityKinesisProperties) *string {
		if v == nil {
			return nil
		}
		return v.Descriptor
	}).(pulumi.StringPtrOutput)
}

// Number of shards
func (o EntityKinesisPropertiesPtrOutput) KinesisShards() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EntityKinesisProperties) *int {
		if v == nil {
			return nil
		}
		return v.KinesisShards
	}).(pulumi.IntPtrOutput)
}

type EntityPostgresProperties struct {
	Details map[string]string `pulumi:"details"`
}

// EntityPostgresPropertiesInput is an input type that accepts EntityPostgresPropertiesArgs and EntityPostgresPropertiesOutput values.
// You can construct a concrete instance of `EntityPostgresPropertiesInput` via:
//
//	EntityPostgresPropertiesArgs{...}
type EntityPostgresPropertiesInput interface {
	pulumi.Input

	ToEntityPostgresPropertiesOutput() EntityPostgresPropertiesOutput
	ToEntityPostgresPropertiesOutputWithContext(context.Context) EntityPostgresPropertiesOutput
}

type EntityPostgresPropertiesArgs struct {
	Details pulumi.StringMapInput `pulumi:"details"`
}

func (EntityPostgresPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPostgresProperties)(nil)).Elem()
}

func (i EntityPostgresPropertiesArgs) ToEntityPostgresPropertiesOutput() EntityPostgresPropertiesOutput {
	return i.ToEntityPostgresPropertiesOutputWithContext(context.Background())
}

func (i EntityPostgresPropertiesArgs) ToEntityPostgresPropertiesOutputWithContext(ctx context.Context) EntityPostgresPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPostgresPropertiesOutput)
}

func (i EntityPostgresPropertiesArgs) ToEntityPostgresPropertiesPtrOutput() EntityPostgresPropertiesPtrOutput {
	return i.ToEntityPostgresPropertiesPtrOutputWithContext(context.Background())
}

func (i EntityPostgresPropertiesArgs) ToEntityPostgresPropertiesPtrOutputWithContext(ctx context.Context) EntityPostgresPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPostgresPropertiesOutput).ToEntityPostgresPropertiesPtrOutputWithContext(ctx)
}

// EntityPostgresPropertiesPtrInput is an input type that accepts EntityPostgresPropertiesArgs, EntityPostgresPropertiesPtr and EntityPostgresPropertiesPtrOutput values.
// You can construct a concrete instance of `EntityPostgresPropertiesPtrInput` via:
//
//	        EntityPostgresPropertiesArgs{...}
//
//	or:
//
//	        nil
type EntityPostgresPropertiesPtrInput interface {
	pulumi.Input

	ToEntityPostgresPropertiesPtrOutput() EntityPostgresPropertiesPtrOutput
	ToEntityPostgresPropertiesPtrOutputWithContext(context.Context) EntityPostgresPropertiesPtrOutput
}

type entityPostgresPropertiesPtrType EntityPostgresPropertiesArgs

func EntityPostgresPropertiesPtr(v *EntityPostgresPropertiesArgs) EntityPostgresPropertiesPtrInput {
	return (*entityPostgresPropertiesPtrType)(v)
}

func (*entityPostgresPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPostgresProperties)(nil)).Elem()
}

func (i *entityPostgresPropertiesPtrType) ToEntityPostgresPropertiesPtrOutput() EntityPostgresPropertiesPtrOutput {
	return i.ToEntityPostgresPropertiesPtrOutputWithContext(context.Background())
}

func (i *entityPostgresPropertiesPtrType) ToEntityPostgresPropertiesPtrOutputWithContext(ctx context.Context) EntityPostgresPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntityPostgresPropertiesPtrOutput)
}

type EntityPostgresPropertiesOutput struct{ *pulumi.OutputState }

func (EntityPostgresPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntityPostgresProperties)(nil)).Elem()
}

func (o EntityPostgresPropertiesOutput) ToEntityPostgresPropertiesOutput() EntityPostgresPropertiesOutput {
	return o
}

func (o EntityPostgresPropertiesOutput) ToEntityPostgresPropertiesOutputWithContext(ctx context.Context) EntityPostgresPropertiesOutput {
	return o
}

func (o EntityPostgresPropertiesOutput) ToEntityPostgresPropertiesPtrOutput() EntityPostgresPropertiesPtrOutput {
	return o.ToEntityPostgresPropertiesPtrOutputWithContext(context.Background())
}

func (o EntityPostgresPropertiesOutput) ToEntityPostgresPropertiesPtrOutputWithContext(ctx context.Context) EntityPostgresPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntityPostgresProperties) *EntityPostgresProperties {
		return &v
	}).(EntityPostgresPropertiesPtrOutput)
}

func (o EntityPostgresPropertiesOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntityPostgresProperties) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

type EntityPostgresPropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntityPostgresPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntityPostgresProperties)(nil)).Elem()
}

func (o EntityPostgresPropertiesPtrOutput) ToEntityPostgresPropertiesPtrOutput() EntityPostgresPropertiesPtrOutput {
	return o
}

func (o EntityPostgresPropertiesPtrOutput) ToEntityPostgresPropertiesPtrOutputWithContext(ctx context.Context) EntityPostgresPropertiesPtrOutput {
	return o
}

func (o EntityPostgresPropertiesPtrOutput) Elem() EntityPostgresPropertiesOutput {
	return o.ApplyT(func(v *EntityPostgresProperties) EntityPostgresProperties {
		if v != nil {
			return *v
		}
		var ret EntityPostgresProperties
		return ret
	}).(EntityPostgresPropertiesOutput)
}

func (o EntityPostgresPropertiesPtrOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntityPostgresProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapOutput)
}

type EntitySnowflakeProperties struct {
	Details map[string]string `pulumi:"details"`
}

// EntitySnowflakePropertiesInput is an input type that accepts EntitySnowflakePropertiesArgs and EntitySnowflakePropertiesOutput values.
// You can construct a concrete instance of `EntitySnowflakePropertiesInput` via:
//
//	EntitySnowflakePropertiesArgs{...}
type EntitySnowflakePropertiesInput interface {
	pulumi.Input

	ToEntitySnowflakePropertiesOutput() EntitySnowflakePropertiesOutput
	ToEntitySnowflakePropertiesOutputWithContext(context.Context) EntitySnowflakePropertiesOutput
}

type EntitySnowflakePropertiesArgs struct {
	Details pulumi.StringMapInput `pulumi:"details"`
}

func (EntitySnowflakePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EntitySnowflakeProperties)(nil)).Elem()
}

func (i EntitySnowflakePropertiesArgs) ToEntitySnowflakePropertiesOutput() EntitySnowflakePropertiesOutput {
	return i.ToEntitySnowflakePropertiesOutputWithContext(context.Background())
}

func (i EntitySnowflakePropertiesArgs) ToEntitySnowflakePropertiesOutputWithContext(ctx context.Context) EntitySnowflakePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitySnowflakePropertiesOutput)
}

func (i EntitySnowflakePropertiesArgs) ToEntitySnowflakePropertiesPtrOutput() EntitySnowflakePropertiesPtrOutput {
	return i.ToEntitySnowflakePropertiesPtrOutputWithContext(context.Background())
}

func (i EntitySnowflakePropertiesArgs) ToEntitySnowflakePropertiesPtrOutputWithContext(ctx context.Context) EntitySnowflakePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitySnowflakePropertiesOutput).ToEntitySnowflakePropertiesPtrOutputWithContext(ctx)
}

// EntitySnowflakePropertiesPtrInput is an input type that accepts EntitySnowflakePropertiesArgs, EntitySnowflakePropertiesPtr and EntitySnowflakePropertiesPtrOutput values.
// You can construct a concrete instance of `EntitySnowflakePropertiesPtrInput` via:
//
//	        EntitySnowflakePropertiesArgs{...}
//
//	or:
//
//	        nil
type EntitySnowflakePropertiesPtrInput interface {
	pulumi.Input

	ToEntitySnowflakePropertiesPtrOutput() EntitySnowflakePropertiesPtrOutput
	ToEntitySnowflakePropertiesPtrOutputWithContext(context.Context) EntitySnowflakePropertiesPtrOutput
}

type entitySnowflakePropertiesPtrType EntitySnowflakePropertiesArgs

func EntitySnowflakePropertiesPtr(v *EntitySnowflakePropertiesArgs) EntitySnowflakePropertiesPtrInput {
	return (*entitySnowflakePropertiesPtrType)(v)
}

func (*entitySnowflakePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitySnowflakeProperties)(nil)).Elem()
}

func (i *entitySnowflakePropertiesPtrType) ToEntitySnowflakePropertiesPtrOutput() EntitySnowflakePropertiesPtrOutput {
	return i.ToEntitySnowflakePropertiesPtrOutputWithContext(context.Background())
}

func (i *entitySnowflakePropertiesPtrType) ToEntitySnowflakePropertiesPtrOutputWithContext(ctx context.Context) EntitySnowflakePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EntitySnowflakePropertiesPtrOutput)
}

type EntitySnowflakePropertiesOutput struct{ *pulumi.OutputState }

func (EntitySnowflakePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EntitySnowflakeProperties)(nil)).Elem()
}

func (o EntitySnowflakePropertiesOutput) ToEntitySnowflakePropertiesOutput() EntitySnowflakePropertiesOutput {
	return o
}

func (o EntitySnowflakePropertiesOutput) ToEntitySnowflakePropertiesOutputWithContext(ctx context.Context) EntitySnowflakePropertiesOutput {
	return o
}

func (o EntitySnowflakePropertiesOutput) ToEntitySnowflakePropertiesPtrOutput() EntitySnowflakePropertiesPtrOutput {
	return o.ToEntitySnowflakePropertiesPtrOutputWithContext(context.Background())
}

func (o EntitySnowflakePropertiesOutput) ToEntitySnowflakePropertiesPtrOutputWithContext(ctx context.Context) EntitySnowflakePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EntitySnowflakeProperties) *EntitySnowflakeProperties {
		return &v
	}).(EntitySnowflakePropertiesPtrOutput)
}

func (o EntitySnowflakePropertiesOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v EntitySnowflakeProperties) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

type EntitySnowflakePropertiesPtrOutput struct{ *pulumi.OutputState }

func (EntitySnowflakePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EntitySnowflakeProperties)(nil)).Elem()
}

func (o EntitySnowflakePropertiesPtrOutput) ToEntitySnowflakePropertiesPtrOutput() EntitySnowflakePropertiesPtrOutput {
	return o
}

func (o EntitySnowflakePropertiesPtrOutput) ToEntitySnowflakePropertiesPtrOutputWithContext(ctx context.Context) EntitySnowflakePropertiesPtrOutput {
	return o
}

func (o EntitySnowflakePropertiesPtrOutput) Elem() EntitySnowflakePropertiesOutput {
	return o.ApplyT(func(v *EntitySnowflakeProperties) EntitySnowflakeProperties {
		if v != nil {
			return *v
		}
		var ret EntitySnowflakeProperties
		return ret
	}).(EntitySnowflakePropertiesOutput)
}

func (o EntitySnowflakePropertiesPtrOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v *EntitySnowflakeProperties) map[string]string {
		if v == nil {
			return nil
		}
		return v.Details
	}).(pulumi.StringMapOutput)
}

type SchemaRegistryConfluent struct {
	// Password to use when authenticating with confluent schema registry
	Password *string `pulumi:"password"`
	// List of host:port URIs to connect to the schema registry
	Uris string `pulumi:"uris"`
	// Username to use when authenticating with confluent schema registry
	Username *string `pulumi:"username"`
}

// SchemaRegistryConfluentInput is an input type that accepts SchemaRegistryConfluentArgs and SchemaRegistryConfluentOutput values.
// You can construct a concrete instance of `SchemaRegistryConfluentInput` via:
//
//	SchemaRegistryConfluentArgs{...}
type SchemaRegistryConfluentInput interface {
	pulumi.Input

	ToSchemaRegistryConfluentOutput() SchemaRegistryConfluentOutput
	ToSchemaRegistryConfluentOutputWithContext(context.Context) SchemaRegistryConfluentOutput
}

type SchemaRegistryConfluentArgs struct {
	// Password to use when authenticating with confluent schema registry
	Password pulumi.StringPtrInput `pulumi:"password"`
	// List of host:port URIs to connect to the schema registry
	Uris pulumi.StringInput `pulumi:"uris"`
	// Username to use when authenticating with confluent schema registry
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (SchemaRegistryConfluentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryConfluent)(nil)).Elem()
}

func (i SchemaRegistryConfluentArgs) ToSchemaRegistryConfluentOutput() SchemaRegistryConfluentOutput {
	return i.ToSchemaRegistryConfluentOutputWithContext(context.Background())
}

func (i SchemaRegistryConfluentArgs) ToSchemaRegistryConfluentOutputWithContext(ctx context.Context) SchemaRegistryConfluentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentOutput)
}

func (i SchemaRegistryConfluentArgs) ToSchemaRegistryConfluentPtrOutput() SchemaRegistryConfluentPtrOutput {
	return i.ToSchemaRegistryConfluentPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryConfluentArgs) ToSchemaRegistryConfluentPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentOutput).ToSchemaRegistryConfluentPtrOutputWithContext(ctx)
}

// SchemaRegistryConfluentPtrInput is an input type that accepts SchemaRegistryConfluentArgs, SchemaRegistryConfluentPtr and SchemaRegistryConfluentPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryConfluentPtrInput` via:
//
//	        SchemaRegistryConfluentArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryConfluentPtrInput interface {
	pulumi.Input

	ToSchemaRegistryConfluentPtrOutput() SchemaRegistryConfluentPtrOutput
	ToSchemaRegistryConfluentPtrOutputWithContext(context.Context) SchemaRegistryConfluentPtrOutput
}

type schemaRegistryConfluentPtrType SchemaRegistryConfluentArgs

func SchemaRegistryConfluentPtr(v *SchemaRegistryConfluentArgs) SchemaRegistryConfluentPtrInput {
	return (*schemaRegistryConfluentPtrType)(v)
}

func (*schemaRegistryConfluentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryConfluent)(nil)).Elem()
}

func (i *schemaRegistryConfluentPtrType) ToSchemaRegistryConfluentPtrOutput() SchemaRegistryConfluentPtrOutput {
	return i.ToSchemaRegistryConfluentPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryConfluentPtrType) ToSchemaRegistryConfluentPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentPtrOutput)
}

type SchemaRegistryConfluentOutput struct{ *pulumi.OutputState }

func (SchemaRegistryConfluentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryConfluent)(nil)).Elem()
}

func (o SchemaRegistryConfluentOutput) ToSchemaRegistryConfluentOutput() SchemaRegistryConfluentOutput {
	return o
}

func (o SchemaRegistryConfluentOutput) ToSchemaRegistryConfluentOutputWithContext(ctx context.Context) SchemaRegistryConfluentOutput {
	return o
}

func (o SchemaRegistryConfluentOutput) ToSchemaRegistryConfluentPtrOutput() SchemaRegistryConfluentPtrOutput {
	return o.ToSchemaRegistryConfluentPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryConfluentOutput) ToSchemaRegistryConfluentPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryConfluent) *SchemaRegistryConfluent {
		return &v
	}).(SchemaRegistryConfluentPtrOutput)
}

// Password to use when authenticating with confluent schema registry
func (o SchemaRegistryConfluentOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistryConfluent) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the schema registry
func (o SchemaRegistryConfluentOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryConfluent) string { return v.Uris }).(pulumi.StringOutput)
}

// Username to use when authenticating with confluent schema registry
func (o SchemaRegistryConfluentOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistryConfluent) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type SchemaRegistryConfluentPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryConfluentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryConfluent)(nil)).Elem()
}

func (o SchemaRegistryConfluentPtrOutput) ToSchemaRegistryConfluentPtrOutput() SchemaRegistryConfluentPtrOutput {
	return o
}

func (o SchemaRegistryConfluentPtrOutput) ToSchemaRegistryConfluentPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentPtrOutput {
	return o
}

func (o SchemaRegistryConfluentPtrOutput) Elem() SchemaRegistryConfluentOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluent) SchemaRegistryConfluent {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryConfluent
		return ret
	}).(SchemaRegistryConfluentOutput)
}

// Password to use when authenticating with confluent schema registry
func (o SchemaRegistryConfluentPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluent) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the schema registry
func (o SchemaRegistryConfluentPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluent) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

// Username to use when authenticating with confluent schema registry
func (o SchemaRegistryConfluentPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluent) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type SchemaRegistryConfluentCloud struct {
	// Key to use when authenticating with confluent cloud schema registry
	Key *string `pulumi:"key"`
	// Secret to use when authenticating with confluent cloud schema registry
	Secret *string `pulumi:"secret"`
	// List of host:port URIs to connect to the schema registry
	Uris string `pulumi:"uris"`
}

// SchemaRegistryConfluentCloudInput is an input type that accepts SchemaRegistryConfluentCloudArgs and SchemaRegistryConfluentCloudOutput values.
// You can construct a concrete instance of `SchemaRegistryConfluentCloudInput` via:
//
//	SchemaRegistryConfluentCloudArgs{...}
type SchemaRegistryConfluentCloudInput interface {
	pulumi.Input

	ToSchemaRegistryConfluentCloudOutput() SchemaRegistryConfluentCloudOutput
	ToSchemaRegistryConfluentCloudOutputWithContext(context.Context) SchemaRegistryConfluentCloudOutput
}

type SchemaRegistryConfluentCloudArgs struct {
	// Key to use when authenticating with confluent cloud schema registry
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Secret to use when authenticating with confluent cloud schema registry
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// List of host:port URIs to connect to the schema registry
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (SchemaRegistryConfluentCloudArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryConfluentCloud)(nil)).Elem()
}

func (i SchemaRegistryConfluentCloudArgs) ToSchemaRegistryConfluentCloudOutput() SchemaRegistryConfluentCloudOutput {
	return i.ToSchemaRegistryConfluentCloudOutputWithContext(context.Background())
}

func (i SchemaRegistryConfluentCloudArgs) ToSchemaRegistryConfluentCloudOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentCloudOutput)
}

func (i SchemaRegistryConfluentCloudArgs) ToSchemaRegistryConfluentCloudPtrOutput() SchemaRegistryConfluentCloudPtrOutput {
	return i.ToSchemaRegistryConfluentCloudPtrOutputWithContext(context.Background())
}

func (i SchemaRegistryConfluentCloudArgs) ToSchemaRegistryConfluentCloudPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentCloudOutput).ToSchemaRegistryConfluentCloudPtrOutputWithContext(ctx)
}

// SchemaRegistryConfluentCloudPtrInput is an input type that accepts SchemaRegistryConfluentCloudArgs, SchemaRegistryConfluentCloudPtr and SchemaRegistryConfluentCloudPtrOutput values.
// You can construct a concrete instance of `SchemaRegistryConfluentCloudPtrInput` via:
//
//	        SchemaRegistryConfluentCloudArgs{...}
//
//	or:
//
//	        nil
type SchemaRegistryConfluentCloudPtrInput interface {
	pulumi.Input

	ToSchemaRegistryConfluentCloudPtrOutput() SchemaRegistryConfluentCloudPtrOutput
	ToSchemaRegistryConfluentCloudPtrOutputWithContext(context.Context) SchemaRegistryConfluentCloudPtrOutput
}

type schemaRegistryConfluentCloudPtrType SchemaRegistryConfluentCloudArgs

func SchemaRegistryConfluentCloudPtr(v *SchemaRegistryConfluentCloudArgs) SchemaRegistryConfluentCloudPtrInput {
	return (*schemaRegistryConfluentCloudPtrType)(v)
}

func (*schemaRegistryConfluentCloudPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryConfluentCloud)(nil)).Elem()
}

func (i *schemaRegistryConfluentCloudPtrType) ToSchemaRegistryConfluentCloudPtrOutput() SchemaRegistryConfluentCloudPtrOutput {
	return i.ToSchemaRegistryConfluentCloudPtrOutputWithContext(context.Background())
}

func (i *schemaRegistryConfluentCloudPtrType) ToSchemaRegistryConfluentCloudPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaRegistryConfluentCloudPtrOutput)
}

type SchemaRegistryConfluentCloudOutput struct{ *pulumi.OutputState }

func (SchemaRegistryConfluentCloudOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaRegistryConfluentCloud)(nil)).Elem()
}

func (o SchemaRegistryConfluentCloudOutput) ToSchemaRegistryConfluentCloudOutput() SchemaRegistryConfluentCloudOutput {
	return o
}

func (o SchemaRegistryConfluentCloudOutput) ToSchemaRegistryConfluentCloudOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudOutput {
	return o
}

func (o SchemaRegistryConfluentCloudOutput) ToSchemaRegistryConfluentCloudPtrOutput() SchemaRegistryConfluentCloudPtrOutput {
	return o.ToSchemaRegistryConfluentCloudPtrOutputWithContext(context.Background())
}

func (o SchemaRegistryConfluentCloudOutput) ToSchemaRegistryConfluentCloudPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaRegistryConfluentCloud) *SchemaRegistryConfluentCloud {
		return &v
	}).(SchemaRegistryConfluentCloudPtrOutput)
}

// Key to use when authenticating with confluent cloud schema registry
func (o SchemaRegistryConfluentCloudOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistryConfluentCloud) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Secret to use when authenticating with confluent cloud schema registry
func (o SchemaRegistryConfluentCloudOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaRegistryConfluentCloud) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the schema registry
func (o SchemaRegistryConfluentCloudOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaRegistryConfluentCloud) string { return v.Uris }).(pulumi.StringOutput)
}

type SchemaRegistryConfluentCloudPtrOutput struct{ *pulumi.OutputState }

func (SchemaRegistryConfluentCloudPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaRegistryConfluentCloud)(nil)).Elem()
}

func (o SchemaRegistryConfluentCloudPtrOutput) ToSchemaRegistryConfluentCloudPtrOutput() SchemaRegistryConfluentCloudPtrOutput {
	return o
}

func (o SchemaRegistryConfluentCloudPtrOutput) ToSchemaRegistryConfluentCloudPtrOutputWithContext(ctx context.Context) SchemaRegistryConfluentCloudPtrOutput {
	return o
}

func (o SchemaRegistryConfluentCloudPtrOutput) Elem() SchemaRegistryConfluentCloudOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluentCloud) SchemaRegistryConfluentCloud {
		if v != nil {
			return *v
		}
		var ret SchemaRegistryConfluentCloud
		return ret
	}).(SchemaRegistryConfluentCloudOutput)
}

// Key to use when authenticating with confluent cloud schema registry
func (o SchemaRegistryConfluentCloudPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluentCloud) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Secret to use when authenticating with confluent cloud schema registry
func (o SchemaRegistryConfluentCloudPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluentCloud) *string {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the schema registry
func (o SchemaRegistryConfluentCloudPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SchemaRegistryConfluentCloud) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type StoreConfluentKafka struct {
	// SASL hash function to use when authenticating with Confluent Kafka brokers
	SaslHashFunction string `pulumi:"saslHashFunction"`
	// Password to use when authenticating with Apache Kafka brokers
	SaslPassword string `pulumi:"saslPassword"`
	// Username to use when authenticating with Apache Kafka brokers
	SaslUsername string `pulumi:"saslUsername"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// StoreConfluentKafkaInput is an input type that accepts StoreConfluentKafkaArgs and StoreConfluentKafkaOutput values.
// You can construct a concrete instance of `StoreConfluentKafkaInput` via:
//
//	StoreConfluentKafkaArgs{...}
type StoreConfluentKafkaInput interface {
	pulumi.Input

	ToStoreConfluentKafkaOutput() StoreConfluentKafkaOutput
	ToStoreConfluentKafkaOutputWithContext(context.Context) StoreConfluentKafkaOutput
}

type StoreConfluentKafkaArgs struct {
	// SASL hash function to use when authenticating with Confluent Kafka brokers
	SaslHashFunction pulumi.StringInput `pulumi:"saslHashFunction"`
	// Password to use when authenticating with Apache Kafka brokers
	SaslPassword pulumi.StringInput `pulumi:"saslPassword"`
	// Username to use when authenticating with Apache Kafka brokers
	SaslUsername pulumi.StringInput `pulumi:"saslUsername"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (StoreConfluentKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreConfluentKafka)(nil)).Elem()
}

func (i StoreConfluentKafkaArgs) ToStoreConfluentKafkaOutput() StoreConfluentKafkaOutput {
	return i.ToStoreConfluentKafkaOutputWithContext(context.Background())
}

func (i StoreConfluentKafkaArgs) ToStoreConfluentKafkaOutputWithContext(ctx context.Context) StoreConfluentKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreConfluentKafkaOutput)
}

func (i StoreConfluentKafkaArgs) ToStoreConfluentKafkaPtrOutput() StoreConfluentKafkaPtrOutput {
	return i.ToStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (i StoreConfluentKafkaArgs) ToStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) StoreConfluentKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreConfluentKafkaOutput).ToStoreConfluentKafkaPtrOutputWithContext(ctx)
}

// StoreConfluentKafkaPtrInput is an input type that accepts StoreConfluentKafkaArgs, StoreConfluentKafkaPtr and StoreConfluentKafkaPtrOutput values.
// You can construct a concrete instance of `StoreConfluentKafkaPtrInput` via:
//
//	        StoreConfluentKafkaArgs{...}
//
//	or:
//
//	        nil
type StoreConfluentKafkaPtrInput interface {
	pulumi.Input

	ToStoreConfluentKafkaPtrOutput() StoreConfluentKafkaPtrOutput
	ToStoreConfluentKafkaPtrOutputWithContext(context.Context) StoreConfluentKafkaPtrOutput
}

type storeConfluentKafkaPtrType StoreConfluentKafkaArgs

func StoreConfluentKafkaPtr(v *StoreConfluentKafkaArgs) StoreConfluentKafkaPtrInput {
	return (*storeConfluentKafkaPtrType)(v)
}

func (*storeConfluentKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreConfluentKafka)(nil)).Elem()
}

func (i *storeConfluentKafkaPtrType) ToStoreConfluentKafkaPtrOutput() StoreConfluentKafkaPtrOutput {
	return i.ToStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (i *storeConfluentKafkaPtrType) ToStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) StoreConfluentKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreConfluentKafkaPtrOutput)
}

type StoreConfluentKafkaOutput struct{ *pulumi.OutputState }

func (StoreConfluentKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreConfluentKafka)(nil)).Elem()
}

func (o StoreConfluentKafkaOutput) ToStoreConfluentKafkaOutput() StoreConfluentKafkaOutput {
	return o
}

func (o StoreConfluentKafkaOutput) ToStoreConfluentKafkaOutputWithContext(ctx context.Context) StoreConfluentKafkaOutput {
	return o
}

func (o StoreConfluentKafkaOutput) ToStoreConfluentKafkaPtrOutput() StoreConfluentKafkaPtrOutput {
	return o.ToStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (o StoreConfluentKafkaOutput) ToStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) StoreConfluentKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StoreConfluentKafka) *StoreConfluentKafka {
		return &v
	}).(StoreConfluentKafkaPtrOutput)
}

// SASL hash function to use when authenticating with Confluent Kafka brokers
func (o StoreConfluentKafkaOutput) SaslHashFunction() pulumi.StringOutput {
	return o.ApplyT(func(v StoreConfluentKafka) string { return v.SaslHashFunction }).(pulumi.StringOutput)
}

// Password to use when authenticating with Apache Kafka brokers
func (o StoreConfluentKafkaOutput) SaslPassword() pulumi.StringOutput {
	return o.ApplyT(func(v StoreConfluentKafka) string { return v.SaslPassword }).(pulumi.StringOutput)
}

// Username to use when authenticating with Apache Kafka brokers
func (o StoreConfluentKafkaOutput) SaslUsername() pulumi.StringOutput {
	return o.ApplyT(func(v StoreConfluentKafka) string { return v.SaslUsername }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o StoreConfluentKafkaOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v StoreConfluentKafka) string { return v.Uris }).(pulumi.StringOutput)
}

type StoreConfluentKafkaPtrOutput struct{ *pulumi.OutputState }

func (StoreConfluentKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreConfluentKafka)(nil)).Elem()
}

func (o StoreConfluentKafkaPtrOutput) ToStoreConfluentKafkaPtrOutput() StoreConfluentKafkaPtrOutput {
	return o
}

func (o StoreConfluentKafkaPtrOutput) ToStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) StoreConfluentKafkaPtrOutput {
	return o
}

func (o StoreConfluentKafkaPtrOutput) Elem() StoreConfluentKafkaOutput {
	return o.ApplyT(func(v *StoreConfluentKafka) StoreConfluentKafka {
		if v != nil {
			return *v
		}
		var ret StoreConfluentKafka
		return ret
	}).(StoreConfluentKafkaOutput)
}

// SASL hash function to use when authenticating with Confluent Kafka brokers
func (o StoreConfluentKafkaPtrOutput) SaslHashFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SaslHashFunction
	}).(pulumi.StringPtrOutput)
}

// Password to use when authenticating with Apache Kafka brokers
func (o StoreConfluentKafkaPtrOutput) SaslPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SaslPassword
	}).(pulumi.StringPtrOutput)
}

// Username to use when authenticating with Apache Kafka brokers
func (o StoreConfluentKafkaPtrOutput) SaslUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SaslUsername
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreConfluentKafkaPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type StoreKafka struct {
	// AWS region where the Amazon MSK cluster is located
	MskAwsRegion *string `pulumi:"mskAwsRegion"`
	// IAM role ARN to use when authenticating with Amazon MSK
	MskIamRoleArn *string `pulumi:"mskIamRoleArn"`
	// SASL hash function to use when authenticating with Apache Kafka brokers
	SaslHashFunction string `pulumi:"saslHashFunction"`
	// Password to use when authenticating with Apache Kafka brokers
	SaslPassword *string `pulumi:"saslPassword"`
	// Username to use when authenticating with Apache Kafka brokers
	SaslUsername *string `pulumi:"saslUsername"`
	// Name of the schema registry
	SchemaRegistryName *string `pulumi:"schemaRegistryName"`
	// CA certificate in PEM format
	TlsCaCertFile *string `pulumi:"tlsCaCertFile"`
	// Specifies if the store should be accessed over TLS
	TlsDisabled *bool `pulumi:"tlsDisabled"`
	// Specifies if the server CNAME should be validated against the certificate
	TlsVerifyServerHostname *bool `pulumi:"tlsVerifyServerHostname"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// StoreKafkaInput is an input type that accepts StoreKafkaArgs and StoreKafkaOutput values.
// You can construct a concrete instance of `StoreKafkaInput` via:
//
//	StoreKafkaArgs{...}
type StoreKafkaInput interface {
	pulumi.Input

	ToStoreKafkaOutput() StoreKafkaOutput
	ToStoreKafkaOutputWithContext(context.Context) StoreKafkaOutput
}

type StoreKafkaArgs struct {
	// AWS region where the Amazon MSK cluster is located
	MskAwsRegion pulumi.StringPtrInput `pulumi:"mskAwsRegion"`
	// IAM role ARN to use when authenticating with Amazon MSK
	MskIamRoleArn pulumi.StringPtrInput `pulumi:"mskIamRoleArn"`
	// SASL hash function to use when authenticating with Apache Kafka brokers
	SaslHashFunction pulumi.StringInput `pulumi:"saslHashFunction"`
	// Password to use when authenticating with Apache Kafka brokers
	SaslPassword pulumi.StringPtrInput `pulumi:"saslPassword"`
	// Username to use when authenticating with Apache Kafka brokers
	SaslUsername pulumi.StringPtrInput `pulumi:"saslUsername"`
	// Name of the schema registry
	SchemaRegistryName pulumi.StringPtrInput `pulumi:"schemaRegistryName"`
	// CA certificate in PEM format
	TlsCaCertFile pulumi.StringPtrInput `pulumi:"tlsCaCertFile"`
	// Specifies if the store should be accessed over TLS
	TlsDisabled pulumi.BoolPtrInput `pulumi:"tlsDisabled"`
	// Specifies if the server CNAME should be validated against the certificate
	TlsVerifyServerHostname pulumi.BoolPtrInput `pulumi:"tlsVerifyServerHostname"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (StoreKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreKafka)(nil)).Elem()
}

func (i StoreKafkaArgs) ToStoreKafkaOutput() StoreKafkaOutput {
	return i.ToStoreKafkaOutputWithContext(context.Background())
}

func (i StoreKafkaArgs) ToStoreKafkaOutputWithContext(ctx context.Context) StoreKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKafkaOutput)
}

func (i StoreKafkaArgs) ToStoreKafkaPtrOutput() StoreKafkaPtrOutput {
	return i.ToStoreKafkaPtrOutputWithContext(context.Background())
}

func (i StoreKafkaArgs) ToStoreKafkaPtrOutputWithContext(ctx context.Context) StoreKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKafkaOutput).ToStoreKafkaPtrOutputWithContext(ctx)
}

// StoreKafkaPtrInput is an input type that accepts StoreKafkaArgs, StoreKafkaPtr and StoreKafkaPtrOutput values.
// You can construct a concrete instance of `StoreKafkaPtrInput` via:
//
//	        StoreKafkaArgs{...}
//
//	or:
//
//	        nil
type StoreKafkaPtrInput interface {
	pulumi.Input

	ToStoreKafkaPtrOutput() StoreKafkaPtrOutput
	ToStoreKafkaPtrOutputWithContext(context.Context) StoreKafkaPtrOutput
}

type storeKafkaPtrType StoreKafkaArgs

func StoreKafkaPtr(v *StoreKafkaArgs) StoreKafkaPtrInput {
	return (*storeKafkaPtrType)(v)
}

func (*storeKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreKafka)(nil)).Elem()
}

func (i *storeKafkaPtrType) ToStoreKafkaPtrOutput() StoreKafkaPtrOutput {
	return i.ToStoreKafkaPtrOutputWithContext(context.Background())
}

func (i *storeKafkaPtrType) ToStoreKafkaPtrOutputWithContext(ctx context.Context) StoreKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKafkaPtrOutput)
}

type StoreKafkaOutput struct{ *pulumi.OutputState }

func (StoreKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreKafka)(nil)).Elem()
}

func (o StoreKafkaOutput) ToStoreKafkaOutput() StoreKafkaOutput {
	return o
}

func (o StoreKafkaOutput) ToStoreKafkaOutputWithContext(ctx context.Context) StoreKafkaOutput {
	return o
}

func (o StoreKafkaOutput) ToStoreKafkaPtrOutput() StoreKafkaPtrOutput {
	return o.ToStoreKafkaPtrOutputWithContext(context.Background())
}

func (o StoreKafkaOutput) ToStoreKafkaPtrOutputWithContext(ctx context.Context) StoreKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StoreKafka) *StoreKafka {
		return &v
	}).(StoreKafkaPtrOutput)
}

// AWS region where the Amazon MSK cluster is located
func (o StoreKafkaOutput) MskAwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.MskAwsRegion }).(pulumi.StringPtrOutput)
}

// IAM role ARN to use when authenticating with Amazon MSK
func (o StoreKafkaOutput) MskIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.MskIamRoleArn }).(pulumi.StringPtrOutput)
}

// SASL hash function to use when authenticating with Apache Kafka brokers
func (o StoreKafkaOutput) SaslHashFunction() pulumi.StringOutput {
	return o.ApplyT(func(v StoreKafka) string { return v.SaslHashFunction }).(pulumi.StringOutput)
}

// Password to use when authenticating with Apache Kafka brokers
func (o StoreKafkaOutput) SaslPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.SaslPassword }).(pulumi.StringPtrOutput)
}

// Username to use when authenticating with Apache Kafka brokers
func (o StoreKafkaOutput) SaslUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.SaslUsername }).(pulumi.StringPtrOutput)
}

// Name of the schema registry
func (o StoreKafkaOutput) SchemaRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.SchemaRegistryName }).(pulumi.StringPtrOutput)
}

// CA certificate in PEM format
func (o StoreKafkaOutput) TlsCaCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKafka) *string { return v.TlsCaCertFile }).(pulumi.StringPtrOutput)
}

// Specifies if the store should be accessed over TLS
func (o StoreKafkaOutput) TlsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StoreKafka) *bool { return v.TlsDisabled }).(pulumi.BoolPtrOutput)
}

// Specifies if the server CNAME should be validated against the certificate
func (o StoreKafkaOutput) TlsVerifyServerHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StoreKafka) *bool { return v.TlsVerifyServerHostname }).(pulumi.BoolPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreKafkaOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v StoreKafka) string { return v.Uris }).(pulumi.StringOutput)
}

type StoreKafkaPtrOutput struct{ *pulumi.OutputState }

func (StoreKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreKafka)(nil)).Elem()
}

func (o StoreKafkaPtrOutput) ToStoreKafkaPtrOutput() StoreKafkaPtrOutput {
	return o
}

func (o StoreKafkaPtrOutput) ToStoreKafkaPtrOutputWithContext(ctx context.Context) StoreKafkaPtrOutput {
	return o
}

func (o StoreKafkaPtrOutput) Elem() StoreKafkaOutput {
	return o.ApplyT(func(v *StoreKafka) StoreKafka {
		if v != nil {
			return *v
		}
		var ret StoreKafka
		return ret
	}).(StoreKafkaOutput)
}

// AWS region where the Amazon MSK cluster is located
func (o StoreKafkaPtrOutput) MskAwsRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.MskAwsRegion
	}).(pulumi.StringPtrOutput)
}

// IAM role ARN to use when authenticating with Amazon MSK
func (o StoreKafkaPtrOutput) MskIamRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.MskIamRoleArn
	}).(pulumi.StringPtrOutput)
}

// SASL hash function to use when authenticating with Apache Kafka brokers
func (o StoreKafkaPtrOutput) SaslHashFunction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SaslHashFunction
	}).(pulumi.StringPtrOutput)
}

// Password to use when authenticating with Apache Kafka brokers
func (o StoreKafkaPtrOutput) SaslPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.SaslPassword
	}).(pulumi.StringPtrOutput)
}

// Username to use when authenticating with Apache Kafka brokers
func (o StoreKafkaPtrOutput) SaslUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.SaslUsername
	}).(pulumi.StringPtrOutput)
}

// Name of the schema registry
func (o StoreKafkaPtrOutput) SchemaRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.SchemaRegistryName
	}).(pulumi.StringPtrOutput)
}

// CA certificate in PEM format
func (o StoreKafkaPtrOutput) TlsCaCertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return v.TlsCaCertFile
	}).(pulumi.StringPtrOutput)
}

// Specifies if the store should be accessed over TLS
func (o StoreKafkaPtrOutput) TlsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *bool {
		if v == nil {
			return nil
		}
		return v.TlsDisabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies if the server CNAME should be validated against the certificate
func (o StoreKafkaPtrOutput) TlsVerifyServerHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *bool {
		if v == nil {
			return nil
		}
		return v.TlsVerifyServerHostname
	}).(pulumi.BoolPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreKafkaPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKafka) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type StoreKinesis struct {
	// AWS IAM access key to use when authenticating with an Amazon Kinesis service
	AccessKeyId *string `pulumi:"accessKeyId"`
	// AWS account ID to use when authenticating with an Amazon Kinesis service
	AwsAccountId string `pulumi:"awsAccountId"`
	// AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// StoreKinesisInput is an input type that accepts StoreKinesisArgs and StoreKinesisOutput values.
// You can construct a concrete instance of `StoreKinesisInput` via:
//
//	StoreKinesisArgs{...}
type StoreKinesisInput interface {
	pulumi.Input

	ToStoreKinesisOutput() StoreKinesisOutput
	ToStoreKinesisOutputWithContext(context.Context) StoreKinesisOutput
}

type StoreKinesisArgs struct {
	// AWS IAM access key to use when authenticating with an Amazon Kinesis service
	AccessKeyId pulumi.StringPtrInput `pulumi:"accessKeyId"`
	// AWS account ID to use when authenticating with an Amazon Kinesis service
	AwsAccountId pulumi.StringInput `pulumi:"awsAccountId"`
	// AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
	SecretAccessKey pulumi.StringPtrInput `pulumi:"secretAccessKey"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (StoreKinesisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreKinesis)(nil)).Elem()
}

func (i StoreKinesisArgs) ToStoreKinesisOutput() StoreKinesisOutput {
	return i.ToStoreKinesisOutputWithContext(context.Background())
}

func (i StoreKinesisArgs) ToStoreKinesisOutputWithContext(ctx context.Context) StoreKinesisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKinesisOutput)
}

func (i StoreKinesisArgs) ToStoreKinesisPtrOutput() StoreKinesisPtrOutput {
	return i.ToStoreKinesisPtrOutputWithContext(context.Background())
}

func (i StoreKinesisArgs) ToStoreKinesisPtrOutputWithContext(ctx context.Context) StoreKinesisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKinesisOutput).ToStoreKinesisPtrOutputWithContext(ctx)
}

// StoreKinesisPtrInput is an input type that accepts StoreKinesisArgs, StoreKinesisPtr and StoreKinesisPtrOutput values.
// You can construct a concrete instance of `StoreKinesisPtrInput` via:
//
//	        StoreKinesisArgs{...}
//
//	or:
//
//	        nil
type StoreKinesisPtrInput interface {
	pulumi.Input

	ToStoreKinesisPtrOutput() StoreKinesisPtrOutput
	ToStoreKinesisPtrOutputWithContext(context.Context) StoreKinesisPtrOutput
}

type storeKinesisPtrType StoreKinesisArgs

func StoreKinesisPtr(v *StoreKinesisArgs) StoreKinesisPtrInput {
	return (*storeKinesisPtrType)(v)
}

func (*storeKinesisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreKinesis)(nil)).Elem()
}

func (i *storeKinesisPtrType) ToStoreKinesisPtrOutput() StoreKinesisPtrOutput {
	return i.ToStoreKinesisPtrOutputWithContext(context.Background())
}

func (i *storeKinesisPtrType) ToStoreKinesisPtrOutputWithContext(ctx context.Context) StoreKinesisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreKinesisPtrOutput)
}

type StoreKinesisOutput struct{ *pulumi.OutputState }

func (StoreKinesisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreKinesis)(nil)).Elem()
}

func (o StoreKinesisOutput) ToStoreKinesisOutput() StoreKinesisOutput {
	return o
}

func (o StoreKinesisOutput) ToStoreKinesisOutputWithContext(ctx context.Context) StoreKinesisOutput {
	return o
}

func (o StoreKinesisOutput) ToStoreKinesisPtrOutput() StoreKinesisPtrOutput {
	return o.ToStoreKinesisPtrOutputWithContext(context.Background())
}

func (o StoreKinesisOutput) ToStoreKinesisPtrOutputWithContext(ctx context.Context) StoreKinesisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StoreKinesis) *StoreKinesis {
		return &v
	}).(StoreKinesisPtrOutput)
}

// AWS IAM access key to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKinesis) *string { return v.AccessKeyId }).(pulumi.StringPtrOutput)
}

// AWS account ID to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisOutput) AwsAccountId() pulumi.StringOutput {
	return o.ApplyT(func(v StoreKinesis) string { return v.AwsAccountId }).(pulumi.StringOutput)
}

// AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StoreKinesis) *string { return v.SecretAccessKey }).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreKinesisOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v StoreKinesis) string { return v.Uris }).(pulumi.StringOutput)
}

type StoreKinesisPtrOutput struct{ *pulumi.OutputState }

func (StoreKinesisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreKinesis)(nil)).Elem()
}

func (o StoreKinesisPtrOutput) ToStoreKinesisPtrOutput() StoreKinesisPtrOutput {
	return o
}

func (o StoreKinesisPtrOutput) ToStoreKinesisPtrOutputWithContext(ctx context.Context) StoreKinesisPtrOutput {
	return o
}

func (o StoreKinesisPtrOutput) Elem() StoreKinesisOutput {
	return o.ApplyT(func(v *StoreKinesis) StoreKinesis {
		if v != nil {
			return *v
		}
		var ret StoreKinesis
		return ret
	}).(StoreKinesisOutput)
}

// AWS IAM access key to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisPtrOutput) AccessKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKinesis) *string {
		if v == nil {
			return nil
		}
		return v.AccessKeyId
	}).(pulumi.StringPtrOutput)
}

// AWS account ID to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisPtrOutput) AwsAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKinesis) *string {
		if v == nil {
			return nil
		}
		return &v.AwsAccountId
	}).(pulumi.StringPtrOutput)
}

// AWS IAM secret access key to use when authenticating with an Amazon Kinesis service
func (o StoreKinesisPtrOutput) SecretAccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKinesis) *string {
		if v == nil {
			return nil
		}
		return v.SecretAccessKey
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreKinesisPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreKinesis) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type StorePostgres struct {
	// Password to use when authenticating with a Postgres database
	Password string `pulumi:"password"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
	// Username to use when authenticating with a Postgres database
	Username string `pulumi:"username"`
}

// StorePostgresInput is an input type that accepts StorePostgresArgs and StorePostgresOutput values.
// You can construct a concrete instance of `StorePostgresInput` via:
//
//	StorePostgresArgs{...}
type StorePostgresInput interface {
	pulumi.Input

	ToStorePostgresOutput() StorePostgresOutput
	ToStorePostgresOutputWithContext(context.Context) StorePostgresOutput
}

type StorePostgresArgs struct {
	// Password to use when authenticating with a Postgres database
	Password pulumi.StringInput `pulumi:"password"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
	// Username to use when authenticating with a Postgres database
	Username pulumi.StringInput `pulumi:"username"`
}

func (StorePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StorePostgres)(nil)).Elem()
}

func (i StorePostgresArgs) ToStorePostgresOutput() StorePostgresOutput {
	return i.ToStorePostgresOutputWithContext(context.Background())
}

func (i StorePostgresArgs) ToStorePostgresOutputWithContext(ctx context.Context) StorePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorePostgresOutput)
}

func (i StorePostgresArgs) ToStorePostgresPtrOutput() StorePostgresPtrOutput {
	return i.ToStorePostgresPtrOutputWithContext(context.Background())
}

func (i StorePostgresArgs) ToStorePostgresPtrOutputWithContext(ctx context.Context) StorePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorePostgresOutput).ToStorePostgresPtrOutputWithContext(ctx)
}

// StorePostgresPtrInput is an input type that accepts StorePostgresArgs, StorePostgresPtr and StorePostgresPtrOutput values.
// You can construct a concrete instance of `StorePostgresPtrInput` via:
//
//	        StorePostgresArgs{...}
//
//	or:
//
//	        nil
type StorePostgresPtrInput interface {
	pulumi.Input

	ToStorePostgresPtrOutput() StorePostgresPtrOutput
	ToStorePostgresPtrOutputWithContext(context.Context) StorePostgresPtrOutput
}

type storePostgresPtrType StorePostgresArgs

func StorePostgresPtr(v *StorePostgresArgs) StorePostgresPtrInput {
	return (*storePostgresPtrType)(v)
}

func (*storePostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StorePostgres)(nil)).Elem()
}

func (i *storePostgresPtrType) ToStorePostgresPtrOutput() StorePostgresPtrOutput {
	return i.ToStorePostgresPtrOutputWithContext(context.Background())
}

func (i *storePostgresPtrType) ToStorePostgresPtrOutputWithContext(ctx context.Context) StorePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorePostgresPtrOutput)
}

type StorePostgresOutput struct{ *pulumi.OutputState }

func (StorePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StorePostgres)(nil)).Elem()
}

func (o StorePostgresOutput) ToStorePostgresOutput() StorePostgresOutput {
	return o
}

func (o StorePostgresOutput) ToStorePostgresOutputWithContext(ctx context.Context) StorePostgresOutput {
	return o
}

func (o StorePostgresOutput) ToStorePostgresPtrOutput() StorePostgresPtrOutput {
	return o.ToStorePostgresPtrOutputWithContext(context.Background())
}

func (o StorePostgresOutput) ToStorePostgresPtrOutputWithContext(ctx context.Context) StorePostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StorePostgres) *StorePostgres {
		return &v
	}).(StorePostgresPtrOutput)
}

// Password to use when authenticating with a Postgres database
func (o StorePostgresOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v StorePostgres) string { return v.Password }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o StorePostgresOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v StorePostgres) string { return v.Uris }).(pulumi.StringOutput)
}

// Username to use when authenticating with a Postgres database
func (o StorePostgresOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StorePostgres) string { return v.Username }).(pulumi.StringOutput)
}

type StorePostgresPtrOutput struct{ *pulumi.OutputState }

func (StorePostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorePostgres)(nil)).Elem()
}

func (o StorePostgresPtrOutput) ToStorePostgresPtrOutput() StorePostgresPtrOutput {
	return o
}

func (o StorePostgresPtrOutput) ToStorePostgresPtrOutputWithContext(ctx context.Context) StorePostgresPtrOutput {
	return o
}

func (o StorePostgresPtrOutput) Elem() StorePostgresOutput {
	return o.ApplyT(func(v *StorePostgres) StorePostgres {
		if v != nil {
			return *v
		}
		var ret StorePostgres
		return ret
	}).(StorePostgresOutput)
}

// Password to use when authenticating with a Postgres database
func (o StorePostgresPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StorePostgresPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

// Username to use when authenticating with a Postgres database
func (o StorePostgresPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type StoreSnowflake struct {
	// Snowflake account ID
	AccountId string `pulumi:"accountId"`
	// Snowflake account's private key in PEM format
	ClientKeyFile string `pulumi:"clientKeyFile"`
	// Passphrase for decrypting the Snowflake account's private key
	ClientKeyPassphrase string `pulumi:"clientKeyPassphrase"`
	// Snowflake cloud region name, where the account resources operate in
	CloudRegion string `pulumi:"cloudRegion"`
	// Access control role to use for the Store operations after connecting to Snowflake
	RoleName string `pulumi:"roleName"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
	// User login name for the Snowflake account
	Username string `pulumi:"username"`
	// Warehouse name to use for queries and other store operations that require compute resource
	WarehouseName string `pulumi:"warehouseName"`
}

// StoreSnowflakeInput is an input type that accepts StoreSnowflakeArgs and StoreSnowflakeOutput values.
// You can construct a concrete instance of `StoreSnowflakeInput` via:
//
//	StoreSnowflakeArgs{...}
type StoreSnowflakeInput interface {
	pulumi.Input

	ToStoreSnowflakeOutput() StoreSnowflakeOutput
	ToStoreSnowflakeOutputWithContext(context.Context) StoreSnowflakeOutput
}

type StoreSnowflakeArgs struct {
	// Snowflake account ID
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Snowflake account's private key in PEM format
	ClientKeyFile pulumi.StringInput `pulumi:"clientKeyFile"`
	// Passphrase for decrypting the Snowflake account's private key
	ClientKeyPassphrase pulumi.StringInput `pulumi:"clientKeyPassphrase"`
	// Snowflake cloud region name, where the account resources operate in
	CloudRegion pulumi.StringInput `pulumi:"cloudRegion"`
	// Access control role to use for the Store operations after connecting to Snowflake
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
	// User login name for the Snowflake account
	Username pulumi.StringInput `pulumi:"username"`
	// Warehouse name to use for queries and other store operations that require compute resource
	WarehouseName pulumi.StringInput `pulumi:"warehouseName"`
}

func (StoreSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreSnowflake)(nil)).Elem()
}

func (i StoreSnowflakeArgs) ToStoreSnowflakeOutput() StoreSnowflakeOutput {
	return i.ToStoreSnowflakeOutputWithContext(context.Background())
}

func (i StoreSnowflakeArgs) ToStoreSnowflakeOutputWithContext(ctx context.Context) StoreSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreSnowflakeOutput)
}

func (i StoreSnowflakeArgs) ToStoreSnowflakePtrOutput() StoreSnowflakePtrOutput {
	return i.ToStoreSnowflakePtrOutputWithContext(context.Background())
}

func (i StoreSnowflakeArgs) ToStoreSnowflakePtrOutputWithContext(ctx context.Context) StoreSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreSnowflakeOutput).ToStoreSnowflakePtrOutputWithContext(ctx)
}

// StoreSnowflakePtrInput is an input type that accepts StoreSnowflakeArgs, StoreSnowflakePtr and StoreSnowflakePtrOutput values.
// You can construct a concrete instance of `StoreSnowflakePtrInput` via:
//
//	        StoreSnowflakeArgs{...}
//
//	or:
//
//	        nil
type StoreSnowflakePtrInput interface {
	pulumi.Input

	ToStoreSnowflakePtrOutput() StoreSnowflakePtrOutput
	ToStoreSnowflakePtrOutputWithContext(context.Context) StoreSnowflakePtrOutput
}

type storeSnowflakePtrType StoreSnowflakeArgs

func StoreSnowflakePtr(v *StoreSnowflakeArgs) StoreSnowflakePtrInput {
	return (*storeSnowflakePtrType)(v)
}

func (*storeSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreSnowflake)(nil)).Elem()
}

func (i *storeSnowflakePtrType) ToStoreSnowflakePtrOutput() StoreSnowflakePtrOutput {
	return i.ToStoreSnowflakePtrOutputWithContext(context.Background())
}

func (i *storeSnowflakePtrType) ToStoreSnowflakePtrOutputWithContext(ctx context.Context) StoreSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StoreSnowflakePtrOutput)
}

type StoreSnowflakeOutput struct{ *pulumi.OutputState }

func (StoreSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StoreSnowflake)(nil)).Elem()
}

func (o StoreSnowflakeOutput) ToStoreSnowflakeOutput() StoreSnowflakeOutput {
	return o
}

func (o StoreSnowflakeOutput) ToStoreSnowflakeOutputWithContext(ctx context.Context) StoreSnowflakeOutput {
	return o
}

func (o StoreSnowflakeOutput) ToStoreSnowflakePtrOutput() StoreSnowflakePtrOutput {
	return o.ToStoreSnowflakePtrOutputWithContext(context.Background())
}

func (o StoreSnowflakeOutput) ToStoreSnowflakePtrOutputWithContext(ctx context.Context) StoreSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StoreSnowflake) *StoreSnowflake {
		return &v
	}).(StoreSnowflakePtrOutput)
}

// Snowflake account ID
func (o StoreSnowflakeOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.AccountId }).(pulumi.StringOutput)
}

// Snowflake account's private key in PEM format
func (o StoreSnowflakeOutput) ClientKeyFile() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.ClientKeyFile }).(pulumi.StringOutput)
}

// Passphrase for decrypting the Snowflake account's private key
func (o StoreSnowflakeOutput) ClientKeyPassphrase() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.ClientKeyPassphrase }).(pulumi.StringOutput)
}

// Snowflake cloud region name, where the account resources operate in
func (o StoreSnowflakeOutput) CloudRegion() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.CloudRegion }).(pulumi.StringOutput)
}

// Access control role to use for the Store operations after connecting to Snowflake
func (o StoreSnowflakeOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.RoleName }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o StoreSnowflakeOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.Uris }).(pulumi.StringOutput)
}

// User login name for the Snowflake account
func (o StoreSnowflakeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.Username }).(pulumi.StringOutput)
}

// Warehouse name to use for queries and other store operations that require compute resource
func (o StoreSnowflakeOutput) WarehouseName() pulumi.StringOutput {
	return o.ApplyT(func(v StoreSnowflake) string { return v.WarehouseName }).(pulumi.StringOutput)
}

type StoreSnowflakePtrOutput struct{ *pulumi.OutputState }

func (StoreSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StoreSnowflake)(nil)).Elem()
}

func (o StoreSnowflakePtrOutput) ToStoreSnowflakePtrOutput() StoreSnowflakePtrOutput {
	return o
}

func (o StoreSnowflakePtrOutput) ToStoreSnowflakePtrOutputWithContext(ctx context.Context) StoreSnowflakePtrOutput {
	return o
}

func (o StoreSnowflakePtrOutput) Elem() StoreSnowflakeOutput {
	return o.ApplyT(func(v *StoreSnowflake) StoreSnowflake {
		if v != nil {
			return *v
		}
		var ret StoreSnowflake
		return ret
	}).(StoreSnowflakeOutput)
}

// Snowflake account ID
func (o StoreSnowflakePtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.AccountId
	}).(pulumi.StringPtrOutput)
}

// Snowflake account's private key in PEM format
func (o StoreSnowflakePtrOutput) ClientKeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKeyFile
	}).(pulumi.StringPtrOutput)
}

// Passphrase for decrypting the Snowflake account's private key
func (o StoreSnowflakePtrOutput) ClientKeyPassphrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.ClientKeyPassphrase
	}).(pulumi.StringPtrOutput)
}

// Snowflake cloud region name, where the account resources operate in
func (o StoreSnowflakePtrOutput) CloudRegion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.CloudRegion
	}).(pulumi.StringPtrOutput)
}

// Access control role to use for the Store operations after connecting to Snowflake
func (o StoreSnowflakePtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.RoleName
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o StoreSnowflakePtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

// User login name for the Snowflake account
func (o StoreSnowflakePtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

// Warehouse name to use for queries and other store operations that require compute resource
func (o StoreSnowflakePtrOutput) WarehouseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.WarehouseName
	}).(pulumi.StringPtrOutput)
}

type GetDatabasesItem struct {
	// Creation date of the Database
	CreatedAt string `pulumi:"createdAt"`
	// Name of the Database
	Name string `pulumi:"name"`
	// Owning role of the Database
	Owner string `pulumi:"owner"`
}

// GetDatabasesItemInput is an input type that accepts GetDatabasesItemArgs and GetDatabasesItemOutput values.
// You can construct a concrete instance of `GetDatabasesItemInput` via:
//
//	GetDatabasesItemArgs{...}
type GetDatabasesItemInput interface {
	pulumi.Input

	ToGetDatabasesItemOutput() GetDatabasesItemOutput
	ToGetDatabasesItemOutputWithContext(context.Context) GetDatabasesItemOutput
}

type GetDatabasesItemArgs struct {
	// Creation date of the Database
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the Database
	Name pulumi.StringInput `pulumi:"name"`
	// Owning role of the Database
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (GetDatabasesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesItem)(nil)).Elem()
}

func (i GetDatabasesItemArgs) ToGetDatabasesItemOutput() GetDatabasesItemOutput {
	return i.ToGetDatabasesItemOutputWithContext(context.Background())
}

func (i GetDatabasesItemArgs) ToGetDatabasesItemOutputWithContext(ctx context.Context) GetDatabasesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesItemOutput)
}

// GetDatabasesItemArrayInput is an input type that accepts GetDatabasesItemArray and GetDatabasesItemArrayOutput values.
// You can construct a concrete instance of `GetDatabasesItemArrayInput` via:
//
//	GetDatabasesItemArray{ GetDatabasesItemArgs{...} }
type GetDatabasesItemArrayInput interface {
	pulumi.Input

	ToGetDatabasesItemArrayOutput() GetDatabasesItemArrayOutput
	ToGetDatabasesItemArrayOutputWithContext(context.Context) GetDatabasesItemArrayOutput
}

type GetDatabasesItemArray []GetDatabasesItemInput

func (GetDatabasesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesItem)(nil)).Elem()
}

func (i GetDatabasesItemArray) ToGetDatabasesItemArrayOutput() GetDatabasesItemArrayOutput {
	return i.ToGetDatabasesItemArrayOutputWithContext(context.Background())
}

func (i GetDatabasesItemArray) ToGetDatabasesItemArrayOutputWithContext(ctx context.Context) GetDatabasesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesItemArrayOutput)
}

type GetDatabasesItemOutput struct{ *pulumi.OutputState }

func (GetDatabasesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesItem)(nil)).Elem()
}

func (o GetDatabasesItemOutput) ToGetDatabasesItemOutput() GetDatabasesItemOutput {
	return o
}

func (o GetDatabasesItemOutput) ToGetDatabasesItemOutputWithContext(ctx context.Context) GetDatabasesItemOutput {
	return o
}

// Creation date of the Database
func (o GetDatabasesItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the Database
func (o GetDatabasesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesItem) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Database
func (o GetDatabasesItemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesItem) string { return v.Owner }).(pulumi.StringOutput)
}

type GetDatabasesItemArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesItem)(nil)).Elem()
}

func (o GetDatabasesItemArrayOutput) ToGetDatabasesItemArrayOutput() GetDatabasesItemArrayOutput {
	return o
}

func (o GetDatabasesItemArrayOutput) ToGetDatabasesItemArrayOutputWithContext(ctx context.Context) GetDatabasesItemArrayOutput {
	return o
}

func (o GetDatabasesItemArrayOutput) Index(i pulumi.IntInput) GetDatabasesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesItem {
		return vs[0].([]GetDatabasesItem)[vs[1].(int)]
	}).(GetDatabasesItemOutput)
}

type GetNamespacesItem struct {
	// Creation date of the Namespace
	CreatedAt string `pulumi:"createdAt"`
	// Name of the Database
	Database string `pulumi:"database"`
	// Name of the Namespace
	Name string `pulumi:"name"`
	// Owning role of the Namespace
	Owner string `pulumi:"owner"`
}

// GetNamespacesItemInput is an input type that accepts GetNamespacesItemArgs and GetNamespacesItemOutput values.
// You can construct a concrete instance of `GetNamespacesItemInput` via:
//
//	GetNamespacesItemArgs{...}
type GetNamespacesItemInput interface {
	pulumi.Input

	ToGetNamespacesItemOutput() GetNamespacesItemOutput
	ToGetNamespacesItemOutputWithContext(context.Context) GetNamespacesItemOutput
}

type GetNamespacesItemArgs struct {
	// Creation date of the Namespace
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the Database
	Database pulumi.StringInput `pulumi:"database"`
	// Name of the Namespace
	Name pulumi.StringInput `pulumi:"name"`
	// Owning role of the Namespace
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (GetNamespacesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesItem)(nil)).Elem()
}

func (i GetNamespacesItemArgs) ToGetNamespacesItemOutput() GetNamespacesItemOutput {
	return i.ToGetNamespacesItemOutputWithContext(context.Background())
}

func (i GetNamespacesItemArgs) ToGetNamespacesItemOutputWithContext(ctx context.Context) GetNamespacesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesItemOutput)
}

// GetNamespacesItemArrayInput is an input type that accepts GetNamespacesItemArray and GetNamespacesItemArrayOutput values.
// You can construct a concrete instance of `GetNamespacesItemArrayInput` via:
//
//	GetNamespacesItemArray{ GetNamespacesItemArgs{...} }
type GetNamespacesItemArrayInput interface {
	pulumi.Input

	ToGetNamespacesItemArrayOutput() GetNamespacesItemArrayOutput
	ToGetNamespacesItemArrayOutputWithContext(context.Context) GetNamespacesItemArrayOutput
}

type GetNamespacesItemArray []GetNamespacesItemInput

func (GetNamespacesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesItem)(nil)).Elem()
}

func (i GetNamespacesItemArray) ToGetNamespacesItemArrayOutput() GetNamespacesItemArrayOutput {
	return i.ToGetNamespacesItemArrayOutputWithContext(context.Background())
}

func (i GetNamespacesItemArray) ToGetNamespacesItemArrayOutputWithContext(ctx context.Context) GetNamespacesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesItemArrayOutput)
}

type GetNamespacesItemOutput struct{ *pulumi.OutputState }

func (GetNamespacesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesItem)(nil)).Elem()
}

func (o GetNamespacesItemOutput) ToGetNamespacesItemOutput() GetNamespacesItemOutput {
	return o
}

func (o GetNamespacesItemOutput) ToGetNamespacesItemOutputWithContext(ctx context.Context) GetNamespacesItemOutput {
	return o
}

// Creation date of the Namespace
func (o GetNamespacesItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the Database
func (o GetNamespacesItemOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesItem) string { return v.Database }).(pulumi.StringOutput)
}

// Name of the Namespace
func (o GetNamespacesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesItem) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Namespace
func (o GetNamespacesItemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesItem) string { return v.Owner }).(pulumi.StringOutput)
}

type GetNamespacesItemArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesItem)(nil)).Elem()
}

func (o GetNamespacesItemArrayOutput) ToGetNamespacesItemArrayOutput() GetNamespacesItemArrayOutput {
	return o
}

func (o GetNamespacesItemArrayOutput) ToGetNamespacesItemArrayOutputWithContext(ctx context.Context) GetNamespacesItemArrayOutput {
	return o
}

func (o GetNamespacesItemArrayOutput) Index(i pulumi.IntInput) GetNamespacesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesItem {
		return vs[0].([]GetNamespacesItem)[vs[1].(int)]
	}).(GetNamespacesItemOutput)
}

type GetObjectsObject struct {
	// Creation date of the object
	CreatedAt string `pulumi:"createdAt"`
	// Name of the Database
	Database string `pulumi:"database"`
	// Fully qualified name of the Object
	Fqn string `pulumi:"fqn"`
	// Name of the Object
	Name string `pulumi:"name"`
	// Name of the Namespace
	Namespace string `pulumi:"namespace"`
	// Owning role of the object
	Owner string `pulumi:"owner"`
	// State of the Object
	State string `pulumi:"state"`
	// Type of the Object
	Type string `pulumi:"type"`
	// Last update date of the object
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetObjectsObjectInput is an input type that accepts GetObjectsObjectArgs and GetObjectsObjectOutput values.
// You can construct a concrete instance of `GetObjectsObjectInput` via:
//
//	GetObjectsObjectArgs{...}
type GetObjectsObjectInput interface {
	pulumi.Input

	ToGetObjectsObjectOutput() GetObjectsObjectOutput
	ToGetObjectsObjectOutputWithContext(context.Context) GetObjectsObjectOutput
}

type GetObjectsObjectArgs struct {
	// Creation date of the object
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the Database
	Database pulumi.StringInput `pulumi:"database"`
	// Fully qualified name of the Object
	Fqn pulumi.StringInput `pulumi:"fqn"`
	// Name of the Object
	Name pulumi.StringInput `pulumi:"name"`
	// Name of the Namespace
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// Owning role of the object
	Owner pulumi.StringInput `pulumi:"owner"`
	// State of the Object
	State pulumi.StringInput `pulumi:"state"`
	// Type of the Object
	Type pulumi.StringInput `pulumi:"type"`
	// Last update date of the object
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetObjectsObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectsObject)(nil)).Elem()
}

func (i GetObjectsObjectArgs) ToGetObjectsObjectOutput() GetObjectsObjectOutput {
	return i.ToGetObjectsObjectOutputWithContext(context.Background())
}

func (i GetObjectsObjectArgs) ToGetObjectsObjectOutputWithContext(ctx context.Context) GetObjectsObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectsObjectOutput)
}

// GetObjectsObjectArrayInput is an input type that accepts GetObjectsObjectArray and GetObjectsObjectArrayOutput values.
// You can construct a concrete instance of `GetObjectsObjectArrayInput` via:
//
//	GetObjectsObjectArray{ GetObjectsObjectArgs{...} }
type GetObjectsObjectArrayInput interface {
	pulumi.Input

	ToGetObjectsObjectArrayOutput() GetObjectsObjectArrayOutput
	ToGetObjectsObjectArrayOutputWithContext(context.Context) GetObjectsObjectArrayOutput
}

type GetObjectsObjectArray []GetObjectsObjectInput

func (GetObjectsObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectsObject)(nil)).Elem()
}

func (i GetObjectsObjectArray) ToGetObjectsObjectArrayOutput() GetObjectsObjectArrayOutput {
	return i.ToGetObjectsObjectArrayOutputWithContext(context.Background())
}

func (i GetObjectsObjectArray) ToGetObjectsObjectArrayOutputWithContext(ctx context.Context) GetObjectsObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetObjectsObjectArrayOutput)
}

type GetObjectsObjectOutput struct{ *pulumi.OutputState }

func (GetObjectsObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetObjectsObject)(nil)).Elem()
}

func (o GetObjectsObjectOutput) ToGetObjectsObjectOutput() GetObjectsObjectOutput {
	return o
}

func (o GetObjectsObjectOutput) ToGetObjectsObjectOutputWithContext(ctx context.Context) GetObjectsObjectOutput {
	return o
}

// Creation date of the object
func (o GetObjectsObjectOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the Database
func (o GetObjectsObjectOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Database }).(pulumi.StringOutput)
}

// Fully qualified name of the Object
func (o GetObjectsObjectOutput) Fqn() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Fqn }).(pulumi.StringOutput)
}

// Name of the Object
func (o GetObjectsObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Name }).(pulumi.StringOutput)
}

// Name of the Namespace
func (o GetObjectsObjectOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Namespace }).(pulumi.StringOutput)
}

// Owning role of the object
func (o GetObjectsObjectOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Owner }).(pulumi.StringOutput)
}

// State of the Object
func (o GetObjectsObjectOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.State }).(pulumi.StringOutput)
}

// Type of the Object
func (o GetObjectsObjectOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the object
func (o GetObjectsObjectOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetObjectsObject) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetObjectsObjectArrayOutput struct{ *pulumi.OutputState }

func (GetObjectsObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetObjectsObject)(nil)).Elem()
}

func (o GetObjectsObjectArrayOutput) ToGetObjectsObjectArrayOutput() GetObjectsObjectArrayOutput {
	return o
}

func (o GetObjectsObjectArrayOutput) ToGetObjectsObjectArrayOutputWithContext(ctx context.Context) GetObjectsObjectArrayOutput {
	return o
}

func (o GetObjectsObjectArrayOutput) Index(i pulumi.IntInput) GetObjectsObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetObjectsObject {
		return vs[0].([]GetObjectsObject)[vs[1].(int)]
	}).(GetObjectsObjectOutput)
}

type GetSchemaRegistriesItem struct {
	// Creation date of the schema registry
	CreatedAt string `pulumi:"createdAt"`
	// Name of the schema registry
	Name string `pulumi:"name"`
	// Owning role of the schema registry
	Owner string `pulumi:"owner"`
	// State of the schema registry
	State string `pulumi:"state"`
	// Type of the schema registry
	Type string `pulumi:"type"`
	// Last update date of the schema registry
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetSchemaRegistriesItemInput is an input type that accepts GetSchemaRegistriesItemArgs and GetSchemaRegistriesItemOutput values.
// You can construct a concrete instance of `GetSchemaRegistriesItemInput` via:
//
//	GetSchemaRegistriesItemArgs{...}
type GetSchemaRegistriesItemInput interface {
	pulumi.Input

	ToGetSchemaRegistriesItemOutput() GetSchemaRegistriesItemOutput
	ToGetSchemaRegistriesItemOutputWithContext(context.Context) GetSchemaRegistriesItemOutput
}

type GetSchemaRegistriesItemArgs struct {
	// Creation date of the schema registry
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the schema registry
	Name pulumi.StringInput `pulumi:"name"`
	// Owning role of the schema registry
	Owner pulumi.StringInput `pulumi:"owner"`
	// State of the schema registry
	State pulumi.StringInput `pulumi:"state"`
	// Type of the schema registry
	Type pulumi.StringInput `pulumi:"type"`
	// Last update date of the schema registry
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetSchemaRegistriesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistriesItem)(nil)).Elem()
}

func (i GetSchemaRegistriesItemArgs) ToGetSchemaRegistriesItemOutput() GetSchemaRegistriesItemOutput {
	return i.ToGetSchemaRegistriesItemOutputWithContext(context.Background())
}

func (i GetSchemaRegistriesItemArgs) ToGetSchemaRegistriesItemOutputWithContext(ctx context.Context) GetSchemaRegistriesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistriesItemOutput)
}

// GetSchemaRegistriesItemArrayInput is an input type that accepts GetSchemaRegistriesItemArray and GetSchemaRegistriesItemArrayOutput values.
// You can construct a concrete instance of `GetSchemaRegistriesItemArrayInput` via:
//
//	GetSchemaRegistriesItemArray{ GetSchemaRegistriesItemArgs{...} }
type GetSchemaRegistriesItemArrayInput interface {
	pulumi.Input

	ToGetSchemaRegistriesItemArrayOutput() GetSchemaRegistriesItemArrayOutput
	ToGetSchemaRegistriesItemArrayOutputWithContext(context.Context) GetSchemaRegistriesItemArrayOutput
}

type GetSchemaRegistriesItemArray []GetSchemaRegistriesItemInput

func (GetSchemaRegistriesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistriesItem)(nil)).Elem()
}

func (i GetSchemaRegistriesItemArray) ToGetSchemaRegistriesItemArrayOutput() GetSchemaRegistriesItemArrayOutput {
	return i.ToGetSchemaRegistriesItemArrayOutputWithContext(context.Background())
}

func (i GetSchemaRegistriesItemArray) ToGetSchemaRegistriesItemArrayOutputWithContext(ctx context.Context) GetSchemaRegistriesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaRegistriesItemArrayOutput)
}

type GetSchemaRegistriesItemOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistriesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaRegistriesItem)(nil)).Elem()
}

func (o GetSchemaRegistriesItemOutput) ToGetSchemaRegistriesItemOutput() GetSchemaRegistriesItemOutput {
	return o
}

func (o GetSchemaRegistriesItemOutput) ToGetSchemaRegistriesItemOutputWithContext(ctx context.Context) GetSchemaRegistriesItemOutput {
	return o
}

// Creation date of the schema registry
func (o GetSchemaRegistriesItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the schema registry
func (o GetSchemaRegistriesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the schema registry
func (o GetSchemaRegistriesItemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.Owner }).(pulumi.StringOutput)
}

// State of the schema registry
func (o GetSchemaRegistriesItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.State }).(pulumi.StringOutput)
}

// Type of the schema registry
func (o GetSchemaRegistriesItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the schema registry
func (o GetSchemaRegistriesItemOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaRegistriesItem) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetSchemaRegistriesItemArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaRegistriesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaRegistriesItem)(nil)).Elem()
}

func (o GetSchemaRegistriesItemArrayOutput) ToGetSchemaRegistriesItemArrayOutput() GetSchemaRegistriesItemArrayOutput {
	return o
}

func (o GetSchemaRegistriesItemArrayOutput) ToGetSchemaRegistriesItemArrayOutputWithContext(ctx context.Context) GetSchemaRegistriesItemArrayOutput {
	return o
}

func (o GetSchemaRegistriesItemArrayOutput) Index(i pulumi.IntInput) GetSchemaRegistriesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaRegistriesItem {
		return vs[0].([]GetSchemaRegistriesItem)[vs[1].(int)]
	}).(GetSchemaRegistriesItemOutput)
}

type GetSecretsItem struct {
	// Creation date of the Secret
	CreatedAt string `pulumi:"createdAt"`
	// Description of the Secret
	Description string `pulumi:"description"`
	// Name of the Secret
	Name string `pulumi:"name"`
	// Owning role of the Secret
	Owner string `pulumi:"owner"`
	// Status of the Secret
	Status string `pulumi:"status"`
	// Secret type. (Valid values: generic_string)
	Type string `pulumi:"type"`
	// Last update date of the Secret
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetSecretsItemInput is an input type that accepts GetSecretsItemArgs and GetSecretsItemOutput values.
// You can construct a concrete instance of `GetSecretsItemInput` via:
//
//	GetSecretsItemArgs{...}
type GetSecretsItemInput interface {
	pulumi.Input

	ToGetSecretsItemOutput() GetSecretsItemOutput
	ToGetSecretsItemOutputWithContext(context.Context) GetSecretsItemOutput
}

type GetSecretsItemArgs struct {
	// Creation date of the Secret
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Description of the Secret
	Description pulumi.StringInput `pulumi:"description"`
	// Name of the Secret
	Name pulumi.StringInput `pulumi:"name"`
	// Owning role of the Secret
	Owner pulumi.StringInput `pulumi:"owner"`
	// Status of the Secret
	Status pulumi.StringInput `pulumi:"status"`
	// Secret type. (Valid values: generic_string)
	Type pulumi.StringInput `pulumi:"type"`
	// Last update date of the Secret
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetSecretsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsItem)(nil)).Elem()
}

func (i GetSecretsItemArgs) ToGetSecretsItemOutput() GetSecretsItemOutput {
	return i.ToGetSecretsItemOutputWithContext(context.Background())
}

func (i GetSecretsItemArgs) ToGetSecretsItemOutputWithContext(ctx context.Context) GetSecretsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsItemOutput)
}

// GetSecretsItemArrayInput is an input type that accepts GetSecretsItemArray and GetSecretsItemArrayOutput values.
// You can construct a concrete instance of `GetSecretsItemArrayInput` via:
//
//	GetSecretsItemArray{ GetSecretsItemArgs{...} }
type GetSecretsItemArrayInput interface {
	pulumi.Input

	ToGetSecretsItemArrayOutput() GetSecretsItemArrayOutput
	ToGetSecretsItemArrayOutputWithContext(context.Context) GetSecretsItemArrayOutput
}

type GetSecretsItemArray []GetSecretsItemInput

func (GetSecretsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsItem)(nil)).Elem()
}

func (i GetSecretsItemArray) ToGetSecretsItemArrayOutput() GetSecretsItemArrayOutput {
	return i.ToGetSecretsItemArrayOutputWithContext(context.Background())
}

func (i GetSecretsItemArray) ToGetSecretsItemArrayOutputWithContext(ctx context.Context) GetSecretsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsItemArrayOutput)
}

type GetSecretsItemOutput struct{ *pulumi.OutputState }

func (GetSecretsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsItem)(nil)).Elem()
}

func (o GetSecretsItemOutput) ToGetSecretsItemOutput() GetSecretsItemOutput {
	return o
}

func (o GetSecretsItemOutput) ToGetSecretsItemOutputWithContext(ctx context.Context) GetSecretsItemOutput {
	return o
}

// Creation date of the Secret
func (o GetSecretsItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the Secret
func (o GetSecretsItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.Description }).(pulumi.StringOutput)
}

// Name of the Secret
func (o GetSecretsItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Secret
func (o GetSecretsItemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.Owner }).(pulumi.StringOutput)
}

// Status of the Secret
func (o GetSecretsItemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.Status }).(pulumi.StringOutput)
}

// Secret type. (Valid values: generic_string)
func (o GetSecretsItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the Secret
func (o GetSecretsItemOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsItem) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetSecretsItemArrayOutput struct{ *pulumi.OutputState }

func (GetSecretsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsItem)(nil)).Elem()
}

func (o GetSecretsItemArrayOutput) ToGetSecretsItemArrayOutput() GetSecretsItemArrayOutput {
	return o
}

func (o GetSecretsItemArrayOutput) ToGetSecretsItemArrayOutputWithContext(ctx context.Context) GetSecretsItemArrayOutput {
	return o
}

func (o GetSecretsItemArrayOutput) Index(i pulumi.IntInput) GetSecretsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretsItem {
		return vs[0].([]GetSecretsItem)[vs[1].(int)]
	}).(GetSecretsItemOutput)
}

type GetStoreConfluentKafka struct {
	// Name of the schema registry
	SchemaRegistryName string `pulumi:"schemaRegistryName"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// GetStoreConfluentKafkaInput is an input type that accepts GetStoreConfluentKafkaArgs and GetStoreConfluentKafkaOutput values.
// You can construct a concrete instance of `GetStoreConfluentKafkaInput` via:
//
//	GetStoreConfluentKafkaArgs{...}
type GetStoreConfluentKafkaInput interface {
	pulumi.Input

	ToGetStoreConfluentKafkaOutput() GetStoreConfluentKafkaOutput
	ToGetStoreConfluentKafkaOutputWithContext(context.Context) GetStoreConfluentKafkaOutput
}

type GetStoreConfluentKafkaArgs struct {
	// Name of the schema registry
	SchemaRegistryName pulumi.StringInput `pulumi:"schemaRegistryName"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (GetStoreConfluentKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreConfluentKafka)(nil)).Elem()
}

func (i GetStoreConfluentKafkaArgs) ToGetStoreConfluentKafkaOutput() GetStoreConfluentKafkaOutput {
	return i.ToGetStoreConfluentKafkaOutputWithContext(context.Background())
}

func (i GetStoreConfluentKafkaArgs) ToGetStoreConfluentKafkaOutputWithContext(ctx context.Context) GetStoreConfluentKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreConfluentKafkaOutput)
}

func (i GetStoreConfluentKafkaArgs) ToGetStoreConfluentKafkaPtrOutput() GetStoreConfluentKafkaPtrOutput {
	return i.ToGetStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (i GetStoreConfluentKafkaArgs) ToGetStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) GetStoreConfluentKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreConfluentKafkaOutput).ToGetStoreConfluentKafkaPtrOutputWithContext(ctx)
}

// GetStoreConfluentKafkaPtrInput is an input type that accepts GetStoreConfluentKafkaArgs, GetStoreConfluentKafkaPtr and GetStoreConfluentKafkaPtrOutput values.
// You can construct a concrete instance of `GetStoreConfluentKafkaPtrInput` via:
//
//	        GetStoreConfluentKafkaArgs{...}
//
//	or:
//
//	        nil
type GetStoreConfluentKafkaPtrInput interface {
	pulumi.Input

	ToGetStoreConfluentKafkaPtrOutput() GetStoreConfluentKafkaPtrOutput
	ToGetStoreConfluentKafkaPtrOutputWithContext(context.Context) GetStoreConfluentKafkaPtrOutput
}

type getStoreConfluentKafkaPtrType GetStoreConfluentKafkaArgs

func GetStoreConfluentKafkaPtr(v *GetStoreConfluentKafkaArgs) GetStoreConfluentKafkaPtrInput {
	return (*getStoreConfluentKafkaPtrType)(v)
}

func (*getStoreConfluentKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreConfluentKafka)(nil)).Elem()
}

func (i *getStoreConfluentKafkaPtrType) ToGetStoreConfluentKafkaPtrOutput() GetStoreConfluentKafkaPtrOutput {
	return i.ToGetStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (i *getStoreConfluentKafkaPtrType) ToGetStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) GetStoreConfluentKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreConfluentKafkaPtrOutput)
}

type GetStoreConfluentKafkaOutput struct{ *pulumi.OutputState }

func (GetStoreConfluentKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreConfluentKafka)(nil)).Elem()
}

func (o GetStoreConfluentKafkaOutput) ToGetStoreConfluentKafkaOutput() GetStoreConfluentKafkaOutput {
	return o
}

func (o GetStoreConfluentKafkaOutput) ToGetStoreConfluentKafkaOutputWithContext(ctx context.Context) GetStoreConfluentKafkaOutput {
	return o
}

func (o GetStoreConfluentKafkaOutput) ToGetStoreConfluentKafkaPtrOutput() GetStoreConfluentKafkaPtrOutput {
	return o.ToGetStoreConfluentKafkaPtrOutputWithContext(context.Background())
}

func (o GetStoreConfluentKafkaOutput) ToGetStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) GetStoreConfluentKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetStoreConfluentKafka) *GetStoreConfluentKafka {
		return &v
	}).(GetStoreConfluentKafkaPtrOutput)
}

// Name of the schema registry
func (o GetStoreConfluentKafkaOutput) SchemaRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreConfluentKafka) string { return v.SchemaRegistryName }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreConfluentKafkaOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreConfluentKafka) string { return v.Uris }).(pulumi.StringOutput)
}

type GetStoreConfluentKafkaPtrOutput struct{ *pulumi.OutputState }

func (GetStoreConfluentKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreConfluentKafka)(nil)).Elem()
}

func (o GetStoreConfluentKafkaPtrOutput) ToGetStoreConfluentKafkaPtrOutput() GetStoreConfluentKafkaPtrOutput {
	return o
}

func (o GetStoreConfluentKafkaPtrOutput) ToGetStoreConfluentKafkaPtrOutputWithContext(ctx context.Context) GetStoreConfluentKafkaPtrOutput {
	return o
}

func (o GetStoreConfluentKafkaPtrOutput) Elem() GetStoreConfluentKafkaOutput {
	return o.ApplyT(func(v *GetStoreConfluentKafka) GetStoreConfluentKafka {
		if v != nil {
			return *v
		}
		var ret GetStoreConfluentKafka
		return ret
	}).(GetStoreConfluentKafkaOutput)
}

// Name of the schema registry
func (o GetStoreConfluentKafkaPtrOutput) SchemaRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryName
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreConfluentKafkaPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreConfluentKafka) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type GetStoreKafka struct {
	// Name of the schema registry
	SchemaRegistryName string `pulumi:"schemaRegistryName"`
	// Specifies if the store should be accessed over TLS
	TlsDisabled bool `pulumi:"tlsDisabled"`
	// Specifies if the server CNAME should be validated against the certificate
	TlsVerifyServerHostname bool `pulumi:"tlsVerifyServerHostname"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// GetStoreKafkaInput is an input type that accepts GetStoreKafkaArgs and GetStoreKafkaOutput values.
// You can construct a concrete instance of `GetStoreKafkaInput` via:
//
//	GetStoreKafkaArgs{...}
type GetStoreKafkaInput interface {
	pulumi.Input

	ToGetStoreKafkaOutput() GetStoreKafkaOutput
	ToGetStoreKafkaOutputWithContext(context.Context) GetStoreKafkaOutput
}

type GetStoreKafkaArgs struct {
	// Name of the schema registry
	SchemaRegistryName pulumi.StringInput `pulumi:"schemaRegistryName"`
	// Specifies if the store should be accessed over TLS
	TlsDisabled pulumi.BoolInput `pulumi:"tlsDisabled"`
	// Specifies if the server CNAME should be validated against the certificate
	TlsVerifyServerHostname pulumi.BoolInput `pulumi:"tlsVerifyServerHostname"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (GetStoreKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreKafka)(nil)).Elem()
}

func (i GetStoreKafkaArgs) ToGetStoreKafkaOutput() GetStoreKafkaOutput {
	return i.ToGetStoreKafkaOutputWithContext(context.Background())
}

func (i GetStoreKafkaArgs) ToGetStoreKafkaOutputWithContext(ctx context.Context) GetStoreKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKafkaOutput)
}

func (i GetStoreKafkaArgs) ToGetStoreKafkaPtrOutput() GetStoreKafkaPtrOutput {
	return i.ToGetStoreKafkaPtrOutputWithContext(context.Background())
}

func (i GetStoreKafkaArgs) ToGetStoreKafkaPtrOutputWithContext(ctx context.Context) GetStoreKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKafkaOutput).ToGetStoreKafkaPtrOutputWithContext(ctx)
}

// GetStoreKafkaPtrInput is an input type that accepts GetStoreKafkaArgs, GetStoreKafkaPtr and GetStoreKafkaPtrOutput values.
// You can construct a concrete instance of `GetStoreKafkaPtrInput` via:
//
//	        GetStoreKafkaArgs{...}
//
//	or:
//
//	        nil
type GetStoreKafkaPtrInput interface {
	pulumi.Input

	ToGetStoreKafkaPtrOutput() GetStoreKafkaPtrOutput
	ToGetStoreKafkaPtrOutputWithContext(context.Context) GetStoreKafkaPtrOutput
}

type getStoreKafkaPtrType GetStoreKafkaArgs

func GetStoreKafkaPtr(v *GetStoreKafkaArgs) GetStoreKafkaPtrInput {
	return (*getStoreKafkaPtrType)(v)
}

func (*getStoreKafkaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreKafka)(nil)).Elem()
}

func (i *getStoreKafkaPtrType) ToGetStoreKafkaPtrOutput() GetStoreKafkaPtrOutput {
	return i.ToGetStoreKafkaPtrOutputWithContext(context.Background())
}

func (i *getStoreKafkaPtrType) ToGetStoreKafkaPtrOutputWithContext(ctx context.Context) GetStoreKafkaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKafkaPtrOutput)
}

type GetStoreKafkaOutput struct{ *pulumi.OutputState }

func (GetStoreKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreKafka)(nil)).Elem()
}

func (o GetStoreKafkaOutput) ToGetStoreKafkaOutput() GetStoreKafkaOutput {
	return o
}

func (o GetStoreKafkaOutput) ToGetStoreKafkaOutputWithContext(ctx context.Context) GetStoreKafkaOutput {
	return o
}

func (o GetStoreKafkaOutput) ToGetStoreKafkaPtrOutput() GetStoreKafkaPtrOutput {
	return o.ToGetStoreKafkaPtrOutputWithContext(context.Background())
}

func (o GetStoreKafkaOutput) ToGetStoreKafkaPtrOutputWithContext(ctx context.Context) GetStoreKafkaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetStoreKafka) *GetStoreKafka {
		return &v
	}).(GetStoreKafkaPtrOutput)
}

// Name of the schema registry
func (o GetStoreKafkaOutput) SchemaRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreKafka) string { return v.SchemaRegistryName }).(pulumi.StringOutput)
}

// Specifies if the store should be accessed over TLS
func (o GetStoreKafkaOutput) TlsDisabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStoreKafka) bool { return v.TlsDisabled }).(pulumi.BoolOutput)
}

// Specifies if the server CNAME should be validated against the certificate
func (o GetStoreKafkaOutput) TlsVerifyServerHostname() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStoreKafka) bool { return v.TlsVerifyServerHostname }).(pulumi.BoolOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreKafkaOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreKafka) string { return v.Uris }).(pulumi.StringOutput)
}

type GetStoreKafkaPtrOutput struct{ *pulumi.OutputState }

func (GetStoreKafkaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreKafka)(nil)).Elem()
}

func (o GetStoreKafkaPtrOutput) ToGetStoreKafkaPtrOutput() GetStoreKafkaPtrOutput {
	return o
}

func (o GetStoreKafkaPtrOutput) ToGetStoreKafkaPtrOutputWithContext(ctx context.Context) GetStoreKafkaPtrOutput {
	return o
}

func (o GetStoreKafkaPtrOutput) Elem() GetStoreKafkaOutput {
	return o.ApplyT(func(v *GetStoreKafka) GetStoreKafka {
		if v != nil {
			return *v
		}
		var ret GetStoreKafka
		return ret
	}).(GetStoreKafkaOutput)
}

// Name of the schema registry
func (o GetStoreKafkaPtrOutput) SchemaRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreKafka) *string {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryName
	}).(pulumi.StringPtrOutput)
}

// Specifies if the store should be accessed over TLS
func (o GetStoreKafkaPtrOutput) TlsDisabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetStoreKafka) *bool {
		if v == nil {
			return nil
		}
		return &v.TlsDisabled
	}).(pulumi.BoolPtrOutput)
}

// Specifies if the server CNAME should be validated against the certificate
func (o GetStoreKafkaPtrOutput) TlsVerifyServerHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GetStoreKafka) *bool {
		if v == nil {
			return nil
		}
		return &v.TlsVerifyServerHostname
	}).(pulumi.BoolPtrOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreKafkaPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreKafka) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type GetStoreKinesis struct {
	// Name of the schema registry
	SchemaRegistryName string `pulumi:"schemaRegistryName"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// GetStoreKinesisInput is an input type that accepts GetStoreKinesisArgs and GetStoreKinesisOutput values.
// You can construct a concrete instance of `GetStoreKinesisInput` via:
//
//	GetStoreKinesisArgs{...}
type GetStoreKinesisInput interface {
	pulumi.Input

	ToGetStoreKinesisOutput() GetStoreKinesisOutput
	ToGetStoreKinesisOutputWithContext(context.Context) GetStoreKinesisOutput
}

type GetStoreKinesisArgs struct {
	// Name of the schema registry
	SchemaRegistryName pulumi.StringInput `pulumi:"schemaRegistryName"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (GetStoreKinesisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreKinesis)(nil)).Elem()
}

func (i GetStoreKinesisArgs) ToGetStoreKinesisOutput() GetStoreKinesisOutput {
	return i.ToGetStoreKinesisOutputWithContext(context.Background())
}

func (i GetStoreKinesisArgs) ToGetStoreKinesisOutputWithContext(ctx context.Context) GetStoreKinesisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKinesisOutput)
}

func (i GetStoreKinesisArgs) ToGetStoreKinesisPtrOutput() GetStoreKinesisPtrOutput {
	return i.ToGetStoreKinesisPtrOutputWithContext(context.Background())
}

func (i GetStoreKinesisArgs) ToGetStoreKinesisPtrOutputWithContext(ctx context.Context) GetStoreKinesisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKinesisOutput).ToGetStoreKinesisPtrOutputWithContext(ctx)
}

// GetStoreKinesisPtrInput is an input type that accepts GetStoreKinesisArgs, GetStoreKinesisPtr and GetStoreKinesisPtrOutput values.
// You can construct a concrete instance of `GetStoreKinesisPtrInput` via:
//
//	        GetStoreKinesisArgs{...}
//
//	or:
//
//	        nil
type GetStoreKinesisPtrInput interface {
	pulumi.Input

	ToGetStoreKinesisPtrOutput() GetStoreKinesisPtrOutput
	ToGetStoreKinesisPtrOutputWithContext(context.Context) GetStoreKinesisPtrOutput
}

type getStoreKinesisPtrType GetStoreKinesisArgs

func GetStoreKinesisPtr(v *GetStoreKinesisArgs) GetStoreKinesisPtrInput {
	return (*getStoreKinesisPtrType)(v)
}

func (*getStoreKinesisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreKinesis)(nil)).Elem()
}

func (i *getStoreKinesisPtrType) ToGetStoreKinesisPtrOutput() GetStoreKinesisPtrOutput {
	return i.ToGetStoreKinesisPtrOutputWithContext(context.Background())
}

func (i *getStoreKinesisPtrType) ToGetStoreKinesisPtrOutputWithContext(ctx context.Context) GetStoreKinesisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreKinesisPtrOutput)
}

type GetStoreKinesisOutput struct{ *pulumi.OutputState }

func (GetStoreKinesisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreKinesis)(nil)).Elem()
}

func (o GetStoreKinesisOutput) ToGetStoreKinesisOutput() GetStoreKinesisOutput {
	return o
}

func (o GetStoreKinesisOutput) ToGetStoreKinesisOutputWithContext(ctx context.Context) GetStoreKinesisOutput {
	return o
}

func (o GetStoreKinesisOutput) ToGetStoreKinesisPtrOutput() GetStoreKinesisPtrOutput {
	return o.ToGetStoreKinesisPtrOutputWithContext(context.Background())
}

func (o GetStoreKinesisOutput) ToGetStoreKinesisPtrOutputWithContext(ctx context.Context) GetStoreKinesisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetStoreKinesis) *GetStoreKinesis {
		return &v
	}).(GetStoreKinesisPtrOutput)
}

// Name of the schema registry
func (o GetStoreKinesisOutput) SchemaRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreKinesis) string { return v.SchemaRegistryName }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreKinesisOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreKinesis) string { return v.Uris }).(pulumi.StringOutput)
}

type GetStoreKinesisPtrOutput struct{ *pulumi.OutputState }

func (GetStoreKinesisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreKinesis)(nil)).Elem()
}

func (o GetStoreKinesisPtrOutput) ToGetStoreKinesisPtrOutput() GetStoreKinesisPtrOutput {
	return o
}

func (o GetStoreKinesisPtrOutput) ToGetStoreKinesisPtrOutputWithContext(ctx context.Context) GetStoreKinesisPtrOutput {
	return o
}

func (o GetStoreKinesisPtrOutput) Elem() GetStoreKinesisOutput {
	return o.ApplyT(func(v *GetStoreKinesis) GetStoreKinesis {
		if v != nil {
			return *v
		}
		var ret GetStoreKinesis
		return ret
	}).(GetStoreKinesisOutput)
}

// Name of the schema registry
func (o GetStoreKinesisPtrOutput) SchemaRegistryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreKinesis) *string {
		if v == nil {
			return nil
		}
		return &v.SchemaRegistryName
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreKinesisPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreKinesis) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type GetStorePostgres struct {
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
}

// GetStorePostgresInput is an input type that accepts GetStorePostgresArgs and GetStorePostgresOutput values.
// You can construct a concrete instance of `GetStorePostgresInput` via:
//
//	GetStorePostgresArgs{...}
type GetStorePostgresInput interface {
	pulumi.Input

	ToGetStorePostgresOutput() GetStorePostgresOutput
	ToGetStorePostgresOutputWithContext(context.Context) GetStorePostgresOutput
}

type GetStorePostgresArgs struct {
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
}

func (GetStorePostgresArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorePostgres)(nil)).Elem()
}

func (i GetStorePostgresArgs) ToGetStorePostgresOutput() GetStorePostgresOutput {
	return i.ToGetStorePostgresOutputWithContext(context.Background())
}

func (i GetStorePostgresArgs) ToGetStorePostgresOutputWithContext(ctx context.Context) GetStorePostgresOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorePostgresOutput)
}

func (i GetStorePostgresArgs) ToGetStorePostgresPtrOutput() GetStorePostgresPtrOutput {
	return i.ToGetStorePostgresPtrOutputWithContext(context.Background())
}

func (i GetStorePostgresArgs) ToGetStorePostgresPtrOutputWithContext(ctx context.Context) GetStorePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorePostgresOutput).ToGetStorePostgresPtrOutputWithContext(ctx)
}

// GetStorePostgresPtrInput is an input type that accepts GetStorePostgresArgs, GetStorePostgresPtr and GetStorePostgresPtrOutput values.
// You can construct a concrete instance of `GetStorePostgresPtrInput` via:
//
//	        GetStorePostgresArgs{...}
//
//	or:
//
//	        nil
type GetStorePostgresPtrInput interface {
	pulumi.Input

	ToGetStorePostgresPtrOutput() GetStorePostgresPtrOutput
	ToGetStorePostgresPtrOutputWithContext(context.Context) GetStorePostgresPtrOutput
}

type getStorePostgresPtrType GetStorePostgresArgs

func GetStorePostgresPtr(v *GetStorePostgresArgs) GetStorePostgresPtrInput {
	return (*getStorePostgresPtrType)(v)
}

func (*getStorePostgresPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStorePostgres)(nil)).Elem()
}

func (i *getStorePostgresPtrType) ToGetStorePostgresPtrOutput() GetStorePostgresPtrOutput {
	return i.ToGetStorePostgresPtrOutputWithContext(context.Background())
}

func (i *getStorePostgresPtrType) ToGetStorePostgresPtrOutputWithContext(ctx context.Context) GetStorePostgresPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStorePostgresPtrOutput)
}

type GetStorePostgresOutput struct{ *pulumi.OutputState }

func (GetStorePostgresOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStorePostgres)(nil)).Elem()
}

func (o GetStorePostgresOutput) ToGetStorePostgresOutput() GetStorePostgresOutput {
	return o
}

func (o GetStorePostgresOutput) ToGetStorePostgresOutputWithContext(ctx context.Context) GetStorePostgresOutput {
	return o
}

func (o GetStorePostgresOutput) ToGetStorePostgresPtrOutput() GetStorePostgresPtrOutput {
	return o.ToGetStorePostgresPtrOutputWithContext(context.Background())
}

func (o GetStorePostgresOutput) ToGetStorePostgresPtrOutputWithContext(ctx context.Context) GetStorePostgresPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetStorePostgres) *GetStorePostgres {
		return &v
	}).(GetStorePostgresPtrOutput)
}

// List of host:port URIs to connect to the store
func (o GetStorePostgresOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v GetStorePostgres) string { return v.Uris }).(pulumi.StringOutput)
}

type GetStorePostgresPtrOutput struct{ *pulumi.OutputState }

func (GetStorePostgresPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStorePostgres)(nil)).Elem()
}

func (o GetStorePostgresPtrOutput) ToGetStorePostgresPtrOutput() GetStorePostgresPtrOutput {
	return o
}

func (o GetStorePostgresPtrOutput) ToGetStorePostgresPtrOutputWithContext(ctx context.Context) GetStorePostgresPtrOutput {
	return o
}

func (o GetStorePostgresPtrOutput) Elem() GetStorePostgresOutput {
	return o.ApplyT(func(v *GetStorePostgres) GetStorePostgres {
		if v != nil {
			return *v
		}
		var ret GetStorePostgres
		return ret
	}).(GetStorePostgresOutput)
}

// List of host:port URIs to connect to the store
func (o GetStorePostgresPtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStorePostgres) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

type GetStoreSnowflake struct {
	// Snowflake account ID
	AccountId string `pulumi:"accountId"`
	// Access control role to use for the Store operations after connecting to Snowflake
	RoleName string `pulumi:"roleName"`
	// List of host:port URIs to connect to the store
	Uris string `pulumi:"uris"`
	// Warehouse name to use for queries and other store operations that require compute resource
	WarehouseName string `pulumi:"warehouseName"`
}

// GetStoreSnowflakeInput is an input type that accepts GetStoreSnowflakeArgs and GetStoreSnowflakeOutput values.
// You can construct a concrete instance of `GetStoreSnowflakeInput` via:
//
//	GetStoreSnowflakeArgs{...}
type GetStoreSnowflakeInput interface {
	pulumi.Input

	ToGetStoreSnowflakeOutput() GetStoreSnowflakeOutput
	ToGetStoreSnowflakeOutputWithContext(context.Context) GetStoreSnowflakeOutput
}

type GetStoreSnowflakeArgs struct {
	// Snowflake account ID
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Access control role to use for the Store operations after connecting to Snowflake
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// List of host:port URIs to connect to the store
	Uris pulumi.StringInput `pulumi:"uris"`
	// Warehouse name to use for queries and other store operations that require compute resource
	WarehouseName pulumi.StringInput `pulumi:"warehouseName"`
}

func (GetStoreSnowflakeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreSnowflake)(nil)).Elem()
}

func (i GetStoreSnowflakeArgs) ToGetStoreSnowflakeOutput() GetStoreSnowflakeOutput {
	return i.ToGetStoreSnowflakeOutputWithContext(context.Background())
}

func (i GetStoreSnowflakeArgs) ToGetStoreSnowflakeOutputWithContext(ctx context.Context) GetStoreSnowflakeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreSnowflakeOutput)
}

func (i GetStoreSnowflakeArgs) ToGetStoreSnowflakePtrOutput() GetStoreSnowflakePtrOutput {
	return i.ToGetStoreSnowflakePtrOutputWithContext(context.Background())
}

func (i GetStoreSnowflakeArgs) ToGetStoreSnowflakePtrOutputWithContext(ctx context.Context) GetStoreSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreSnowflakeOutput).ToGetStoreSnowflakePtrOutputWithContext(ctx)
}

// GetStoreSnowflakePtrInput is an input type that accepts GetStoreSnowflakeArgs, GetStoreSnowflakePtr and GetStoreSnowflakePtrOutput values.
// You can construct a concrete instance of `GetStoreSnowflakePtrInput` via:
//
//	        GetStoreSnowflakeArgs{...}
//
//	or:
//
//	        nil
type GetStoreSnowflakePtrInput interface {
	pulumi.Input

	ToGetStoreSnowflakePtrOutput() GetStoreSnowflakePtrOutput
	ToGetStoreSnowflakePtrOutputWithContext(context.Context) GetStoreSnowflakePtrOutput
}

type getStoreSnowflakePtrType GetStoreSnowflakeArgs

func GetStoreSnowflakePtr(v *GetStoreSnowflakeArgs) GetStoreSnowflakePtrInput {
	return (*getStoreSnowflakePtrType)(v)
}

func (*getStoreSnowflakePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreSnowflake)(nil)).Elem()
}

func (i *getStoreSnowflakePtrType) ToGetStoreSnowflakePtrOutput() GetStoreSnowflakePtrOutput {
	return i.ToGetStoreSnowflakePtrOutputWithContext(context.Background())
}

func (i *getStoreSnowflakePtrType) ToGetStoreSnowflakePtrOutputWithContext(ctx context.Context) GetStoreSnowflakePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoreSnowflakePtrOutput)
}

type GetStoreSnowflakeOutput struct{ *pulumi.OutputState }

func (GetStoreSnowflakeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoreSnowflake)(nil)).Elem()
}

func (o GetStoreSnowflakeOutput) ToGetStoreSnowflakeOutput() GetStoreSnowflakeOutput {
	return o
}

func (o GetStoreSnowflakeOutput) ToGetStoreSnowflakeOutputWithContext(ctx context.Context) GetStoreSnowflakeOutput {
	return o
}

func (o GetStoreSnowflakeOutput) ToGetStoreSnowflakePtrOutput() GetStoreSnowflakePtrOutput {
	return o.ToGetStoreSnowflakePtrOutputWithContext(context.Background())
}

func (o GetStoreSnowflakeOutput) ToGetStoreSnowflakePtrOutputWithContext(ctx context.Context) GetStoreSnowflakePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetStoreSnowflake) *GetStoreSnowflake {
		return &v
	}).(GetStoreSnowflakePtrOutput)
}

// Snowflake account ID
func (o GetStoreSnowflakeOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreSnowflake) string { return v.AccountId }).(pulumi.StringOutput)
}

// Access control role to use for the Store operations after connecting to Snowflake
func (o GetStoreSnowflakeOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreSnowflake) string { return v.RoleName }).(pulumi.StringOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreSnowflakeOutput) Uris() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreSnowflake) string { return v.Uris }).(pulumi.StringOutput)
}

// Warehouse name to use for queries and other store operations that require compute resource
func (o GetStoreSnowflakeOutput) WarehouseName() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoreSnowflake) string { return v.WarehouseName }).(pulumi.StringOutput)
}

type GetStoreSnowflakePtrOutput struct{ *pulumi.OutputState }

func (GetStoreSnowflakePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetStoreSnowflake)(nil)).Elem()
}

func (o GetStoreSnowflakePtrOutput) ToGetStoreSnowflakePtrOutput() GetStoreSnowflakePtrOutput {
	return o
}

func (o GetStoreSnowflakePtrOutput) ToGetStoreSnowflakePtrOutputWithContext(ctx context.Context) GetStoreSnowflakePtrOutput {
	return o
}

func (o GetStoreSnowflakePtrOutput) Elem() GetStoreSnowflakeOutput {
	return o.ApplyT(func(v *GetStoreSnowflake) GetStoreSnowflake {
		if v != nil {
			return *v
		}
		var ret GetStoreSnowflake
		return ret
	}).(GetStoreSnowflakeOutput)
}

// Snowflake account ID
func (o GetStoreSnowflakePtrOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.AccountId
	}).(pulumi.StringPtrOutput)
}

// Access control role to use for the Store operations after connecting to Snowflake
func (o GetStoreSnowflakePtrOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.RoleName
	}).(pulumi.StringPtrOutput)
}

// List of host:port URIs to connect to the store
func (o GetStoreSnowflakePtrOutput) Uris() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.Uris
	}).(pulumi.StringPtrOutput)
}

// Warehouse name to use for queries and other store operations that require compute resource
func (o GetStoreSnowflakePtrOutput) WarehouseName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetStoreSnowflake) *string {
		if v == nil {
			return nil
		}
		return &v.WarehouseName
	}).(pulumi.StringPtrOutput)
}

type GetStoresItem struct {
	// Creation date of the Store
	CreatedAt string `pulumi:"createdAt"`
	// Name of the Store
	Name string `pulumi:"name"`
	// Owning role of the Store
	Owner string `pulumi:"owner"`
	// State of the Store
	State string `pulumi:"state"`
	// Type of the Store
	Type string `pulumi:"type"`
	// Last update date of the Store
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetStoresItemInput is an input type that accepts GetStoresItemArgs and GetStoresItemOutput values.
// You can construct a concrete instance of `GetStoresItemInput` via:
//
//	GetStoresItemArgs{...}
type GetStoresItemInput interface {
	pulumi.Input

	ToGetStoresItemOutput() GetStoresItemOutput
	ToGetStoresItemOutputWithContext(context.Context) GetStoresItemOutput
}

type GetStoresItemArgs struct {
	// Creation date of the Store
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Name of the Store
	Name pulumi.StringInput `pulumi:"name"`
	// Owning role of the Store
	Owner pulumi.StringInput `pulumi:"owner"`
	// State of the Store
	State pulumi.StringInput `pulumi:"state"`
	// Type of the Store
	Type pulumi.StringInput `pulumi:"type"`
	// Last update date of the Store
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetStoresItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoresItem)(nil)).Elem()
}

func (i GetStoresItemArgs) ToGetStoresItemOutput() GetStoresItemOutput {
	return i.ToGetStoresItemOutputWithContext(context.Background())
}

func (i GetStoresItemArgs) ToGetStoresItemOutputWithContext(ctx context.Context) GetStoresItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoresItemOutput)
}

// GetStoresItemArrayInput is an input type that accepts GetStoresItemArray and GetStoresItemArrayOutput values.
// You can construct a concrete instance of `GetStoresItemArrayInput` via:
//
//	GetStoresItemArray{ GetStoresItemArgs{...} }
type GetStoresItemArrayInput interface {
	pulumi.Input

	ToGetStoresItemArrayOutput() GetStoresItemArrayOutput
	ToGetStoresItemArrayOutputWithContext(context.Context) GetStoresItemArrayOutput
}

type GetStoresItemArray []GetStoresItemInput

func (GetStoresItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStoresItem)(nil)).Elem()
}

func (i GetStoresItemArray) ToGetStoresItemArrayOutput() GetStoresItemArrayOutput {
	return i.ToGetStoresItemArrayOutputWithContext(context.Background())
}

func (i GetStoresItemArray) ToGetStoresItemArrayOutputWithContext(ctx context.Context) GetStoresItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStoresItemArrayOutput)
}

type GetStoresItemOutput struct{ *pulumi.OutputState }

func (GetStoresItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStoresItem)(nil)).Elem()
}

func (o GetStoresItemOutput) ToGetStoresItemOutput() GetStoresItemOutput {
	return o
}

func (o GetStoresItemOutput) ToGetStoresItemOutputWithContext(ctx context.Context) GetStoresItemOutput {
	return o
}

// Creation date of the Store
func (o GetStoresItemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the Store
func (o GetStoresItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.Name }).(pulumi.StringOutput)
}

// Owning role of the Store
func (o GetStoresItemOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.Owner }).(pulumi.StringOutput)
}

// State of the Store
func (o GetStoresItemOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.State }).(pulumi.StringOutput)
}

// Type of the Store
func (o GetStoresItemOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.Type }).(pulumi.StringOutput)
}

// Last update date of the Store
func (o GetStoresItemOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetStoresItem) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetStoresItemArrayOutput struct{ *pulumi.OutputState }

func (GetStoresItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStoresItem)(nil)).Elem()
}

func (o GetStoresItemArrayOutput) ToGetStoresItemArrayOutput() GetStoresItemArrayOutput {
	return o
}

func (o GetStoresItemArrayOutput) ToGetStoresItemArrayOutputWithContext(ctx context.Context) GetStoresItemArrayOutput {
	return o
}

func (o GetStoresItemArrayOutput) Index(i pulumi.IntInput) GetStoresItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStoresItem {
		return vs[0].([]GetStoresItem)[vs[1].(int)]
	}).(GetStoresItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EntityKafkaPropertiesInput)(nil)).Elem(), EntityKafkaPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityKafkaPropertiesPtrInput)(nil)).Elem(), EntityKafkaPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityKinesisPropertiesInput)(nil)).Elem(), EntityKinesisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityKinesisPropertiesPtrInput)(nil)).Elem(), EntityKinesisPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPostgresPropertiesInput)(nil)).Elem(), EntityPostgresPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntityPostgresPropertiesPtrInput)(nil)).Elem(), EntityPostgresPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitySnowflakePropertiesInput)(nil)).Elem(), EntitySnowflakePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EntitySnowflakePropertiesPtrInput)(nil)).Elem(), EntitySnowflakePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryConfluentInput)(nil)).Elem(), SchemaRegistryConfluentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryConfluentPtrInput)(nil)).Elem(), SchemaRegistryConfluentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryConfluentCloudInput)(nil)).Elem(), SchemaRegistryConfluentCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaRegistryConfluentCloudPtrInput)(nil)).Elem(), SchemaRegistryConfluentCloudArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreConfluentKafkaInput)(nil)).Elem(), StoreConfluentKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreConfluentKafkaPtrInput)(nil)).Elem(), StoreConfluentKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreKafkaInput)(nil)).Elem(), StoreKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreKafkaPtrInput)(nil)).Elem(), StoreKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreKinesisInput)(nil)).Elem(), StoreKinesisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreKinesisPtrInput)(nil)).Elem(), StoreKinesisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorePostgresInput)(nil)).Elem(), StorePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorePostgresPtrInput)(nil)).Elem(), StorePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreSnowflakeInput)(nil)).Elem(), StoreSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StoreSnowflakePtrInput)(nil)).Elem(), StoreSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesItemInput)(nil)).Elem(), GetDatabasesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesItemArrayInput)(nil)).Elem(), GetDatabasesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesItemInput)(nil)).Elem(), GetNamespacesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesItemArrayInput)(nil)).Elem(), GetNamespacesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectsObjectInput)(nil)).Elem(), GetObjectsObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetObjectsObjectArrayInput)(nil)).Elem(), GetObjectsObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistriesItemInput)(nil)).Elem(), GetSchemaRegistriesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaRegistriesItemArrayInput)(nil)).Elem(), GetSchemaRegistriesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsItemInput)(nil)).Elem(), GetSecretsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsItemArrayInput)(nil)).Elem(), GetSecretsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreConfluentKafkaInput)(nil)).Elem(), GetStoreConfluentKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreConfluentKafkaPtrInput)(nil)).Elem(), GetStoreConfluentKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreKafkaInput)(nil)).Elem(), GetStoreKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreKafkaPtrInput)(nil)).Elem(), GetStoreKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreKinesisInput)(nil)).Elem(), GetStoreKinesisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreKinesisPtrInput)(nil)).Elem(), GetStoreKinesisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorePostgresInput)(nil)).Elem(), GetStorePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStorePostgresPtrInput)(nil)).Elem(), GetStorePostgresArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreSnowflakeInput)(nil)).Elem(), GetStoreSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoreSnowflakePtrInput)(nil)).Elem(), GetStoreSnowflakeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoresItemInput)(nil)).Elem(), GetStoresItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStoresItemArrayInput)(nil)).Elem(), GetStoresItemArray{})
	pulumi.RegisterOutputType(EntityKafkaPropertiesOutput{})
	pulumi.RegisterOutputType(EntityKafkaPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityKinesisPropertiesOutput{})
	pulumi.RegisterOutputType(EntityKinesisPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntityPostgresPropertiesOutput{})
	pulumi.RegisterOutputType(EntityPostgresPropertiesPtrOutput{})
	pulumi.RegisterOutputType(EntitySnowflakePropertiesOutput{})
	pulumi.RegisterOutputType(EntitySnowflakePropertiesPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryConfluentOutput{})
	pulumi.RegisterOutputType(SchemaRegistryConfluentPtrOutput{})
	pulumi.RegisterOutputType(SchemaRegistryConfluentCloudOutput{})
	pulumi.RegisterOutputType(SchemaRegistryConfluentCloudPtrOutput{})
	pulumi.RegisterOutputType(StoreConfluentKafkaOutput{})
	pulumi.RegisterOutputType(StoreConfluentKafkaPtrOutput{})
	pulumi.RegisterOutputType(StoreKafkaOutput{})
	pulumi.RegisterOutputType(StoreKafkaPtrOutput{})
	pulumi.RegisterOutputType(StoreKinesisOutput{})
	pulumi.RegisterOutputType(StoreKinesisPtrOutput{})
	pulumi.RegisterOutputType(StorePostgresOutput{})
	pulumi.RegisterOutputType(StorePostgresPtrOutput{})
	pulumi.RegisterOutputType(StoreSnowflakeOutput{})
	pulumi.RegisterOutputType(StoreSnowflakePtrOutput{})
	pulumi.RegisterOutputType(GetDatabasesItemOutput{})
	pulumi.RegisterOutputType(GetDatabasesItemArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesItemOutput{})
	pulumi.RegisterOutputType(GetNamespacesItemArrayOutput{})
	pulumi.RegisterOutputType(GetObjectsObjectOutput{})
	pulumi.RegisterOutputType(GetObjectsObjectArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistriesItemOutput{})
	pulumi.RegisterOutputType(GetSchemaRegistriesItemArrayOutput{})
	pulumi.RegisterOutputType(GetSecretsItemOutput{})
	pulumi.RegisterOutputType(GetSecretsItemArrayOutput{})
	pulumi.RegisterOutputType(GetStoreConfluentKafkaOutput{})
	pulumi.RegisterOutputType(GetStoreConfluentKafkaPtrOutput{})
	pulumi.RegisterOutputType(GetStoreKafkaOutput{})
	pulumi.RegisterOutputType(GetStoreKafkaPtrOutput{})
	pulumi.RegisterOutputType(GetStoreKinesisOutput{})
	pulumi.RegisterOutputType(GetStoreKinesisPtrOutput{})
	pulumi.RegisterOutputType(GetStorePostgresOutput{})
	pulumi.RegisterOutputType(GetStorePostgresPtrOutput{})
	pulumi.RegisterOutputType(GetStoreSnowflakeOutput{})
	pulumi.RegisterOutputType(GetStoreSnowflakePtrOutput{})
	pulumi.RegisterOutputType(GetStoresItemOutput{})
	pulumi.RegisterOutputType(GetStoresItemArrayOutput{})
}
