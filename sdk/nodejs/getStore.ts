// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Store resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as deltastream from "@deltastream/pulumi";
 *
 * const example = deltastream.getStore({
 *     name: "example_store",
 * });
 * ```
 */
export function getStore(args: GetStoreArgs, opts?: pulumi.InvokeOptions): Promise<GetStoreResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("deltastream:index/getStore:getStore", {
        "confluentKafka": args.confluentKafka,
        "kafka": args.kafka,
        "kinesis": args.kinesis,
        "name": args.name,
        "postgres": args.postgres,
        "snowflake": args.snowflake,
    }, opts);
}

/**
 * A collection of arguments for invoking getStore.
 */
export interface GetStoreArgs {
    /**
     * Confluent Kafka specific configuration
     */
    confluentKafka?: inputs.GetStoreConfluentKafka;
    /**
     * Kafka specific configuration
     */
    kafka?: inputs.GetStoreKafka;
    /**
     * Kinesis specific configuration
     */
    kinesis?: inputs.GetStoreKinesis;
    /**
     * Name of the Store
     */
    name: string;
    /**
     * Postgres specific configuration
     */
    postgres?: inputs.GetStorePostgres;
    /**
     * Snowflake specific configuration
     */
    snowflake?: inputs.GetStoreSnowflake;
}

/**
 * A collection of values returned by getStore.
 */
export interface GetStoreResult {
    /**
     * Confluent Kafka specific configuration
     */
    readonly confluentKafka?: outputs.GetStoreConfluentKafka;
    /**
     * Creation date of the Store
     */
    readonly createdAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Kafka specific configuration
     */
    readonly kafka?: outputs.GetStoreKafka;
    /**
     * Kinesis specific configuration
     */
    readonly kinesis?: outputs.GetStoreKinesis;
    /**
     * Name of the Store
     */
    readonly name: string;
    /**
     * Owning role of the Store
     */
    readonly owner: string;
    /**
     * Postgres specific configuration
     */
    readonly postgres?: outputs.GetStorePostgres;
    /**
     * Snowflake specific configuration
     */
    readonly snowflake?: outputs.GetStoreSnowflake;
    /**
     * State of the Store
     */
    readonly state: string;
    /**
     * Type of the Store
     */
    readonly type: string;
    /**
     * Last update date of the Store
     */
    readonly updatedAt: string;
}
/**
 * Store resource
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as deltastream from "@deltastream/pulumi";
 *
 * const example = deltastream.getStore({
 *     name: "example_store",
 * });
 * ```
 */
export function getStoreOutput(args: GetStoreOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetStoreResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("deltastream:index/getStore:getStore", {
        "confluentKafka": args.confluentKafka,
        "kafka": args.kafka,
        "kinesis": args.kinesis,
        "name": args.name,
        "postgres": args.postgres,
        "snowflake": args.snowflake,
    }, opts);
}

/**
 * A collection of arguments for invoking getStore.
 */
export interface GetStoreOutputArgs {
    /**
     * Confluent Kafka specific configuration
     */
    confluentKafka?: pulumi.Input<inputs.GetStoreConfluentKafkaArgs>;
    /**
     * Kafka specific configuration
     */
    kafka?: pulumi.Input<inputs.GetStoreKafkaArgs>;
    /**
     * Kinesis specific configuration
     */
    kinesis?: pulumi.Input<inputs.GetStoreKinesisArgs>;
    /**
     * Name of the Store
     */
    name: pulumi.Input<string>;
    /**
     * Postgres specific configuration
     */
    postgres?: pulumi.Input<inputs.GetStorePostgresArgs>;
    /**
     * Snowflake specific configuration
     */
    snowflake?: pulumi.Input<inputs.GetStoreSnowflakeArgs>;
}
