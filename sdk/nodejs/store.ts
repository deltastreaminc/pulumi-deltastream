// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Store resource
 */
export class Store extends pulumi.CustomResource {
    /**
     * Get an existing Store resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StoreState, opts?: pulumi.CustomResourceOptions): Store {
        return new Store(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'deltastream:index/store:Store';

    /**
     * Returns true if the given object is an instance of Store.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Store {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Store.__pulumiType;
    }

    /**
     * Confluent Kafka specific configuration
     */
    public readonly confluentKafka!: pulumi.Output<outputs.StoreConfluentKafka | undefined>;
    /**
     * Creation date of the Store
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Kafka specific configuration
     */
    public readonly kafka!: pulumi.Output<outputs.StoreKafka | undefined>;
    /**
     * Kinesis specific configuration
     */
    public readonly kinesis!: pulumi.Output<outputs.StoreKinesis | undefined>;
    /**
     * Name of the Store
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owning role of the Store
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Postgres specific configuration
     */
    public readonly postgres!: pulumi.Output<outputs.StorePostgres | undefined>;
    /**
     * Snowflake specific configuration
     */
    public readonly snowflake!: pulumi.Output<outputs.StoreSnowflake | undefined>;
    /**
     * State of the Store
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Type of the Store
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Last update date of the Store
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Store resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: StoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StoreArgs | StoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StoreState | undefined;
            resourceInputs["confluentKafka"] = state ? state.confluentKafka : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["kafka"] = state ? state.kafka : undefined;
            resourceInputs["kinesis"] = state ? state.kinesis : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["postgres"] = state ? state.postgres : undefined;
            resourceInputs["snowflake"] = state ? state.snowflake : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as StoreArgs | undefined;
            resourceInputs["confluentKafka"] = args ? args.confluentKafka : undefined;
            resourceInputs["kafka"] = args ? args.kafka : undefined;
            resourceInputs["kinesis"] = args ? args.kinesis : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["postgres"] = args ? args.postgres : undefined;
            resourceInputs["snowflake"] = args ? args.snowflake : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Store.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Store resources.
 */
export interface StoreState {
    /**
     * Confluent Kafka specific configuration
     */
    confluentKafka?: pulumi.Input<inputs.StoreConfluentKafka>;
    /**
     * Creation date of the Store
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Kafka specific configuration
     */
    kafka?: pulumi.Input<inputs.StoreKafka>;
    /**
     * Kinesis specific configuration
     */
    kinesis?: pulumi.Input<inputs.StoreKinesis>;
    /**
     * Name of the Store
     */
    name?: pulumi.Input<string>;
    /**
     * Owning role of the Store
     */
    owner?: pulumi.Input<string>;
    /**
     * Postgres specific configuration
     */
    postgres?: pulumi.Input<inputs.StorePostgres>;
    /**
     * Snowflake specific configuration
     */
    snowflake?: pulumi.Input<inputs.StoreSnowflake>;
    /**
     * State of the Store
     */
    state?: pulumi.Input<string>;
    /**
     * Type of the Store
     */
    type?: pulumi.Input<string>;
    /**
     * Last update date of the Store
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Store resource.
 */
export interface StoreArgs {
    /**
     * Confluent Kafka specific configuration
     */
    confluentKafka?: pulumi.Input<inputs.StoreConfluentKafka>;
    /**
     * Kafka specific configuration
     */
    kafka?: pulumi.Input<inputs.StoreKafka>;
    /**
     * Kinesis specific configuration
     */
    kinesis?: pulumi.Input<inputs.StoreKinesis>;
    /**
     * Name of the Store
     */
    name?: pulumi.Input<string>;
    /**
     * Owning role of the Store
     */
    owner?: pulumi.Input<string>;
    /**
     * Postgres specific configuration
     */
    postgres?: pulumi.Input<inputs.StorePostgres>;
    /**
     * Snowflake specific configuration
     */
    snowflake?: pulumi.Input<inputs.StoreSnowflake>;
}
