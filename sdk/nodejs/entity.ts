// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Database resource
 */
export class Entity extends pulumi.CustomResource {
    /**
     * Get an existing Entity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EntityState, opts?: pulumi.CustomResourceOptions): Entity {
        return new Entity(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'deltastream:index/entity:Entity';

    /**
     * Returns true if the given object is an instance of Entity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Entity {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Entity.__pulumiType;
    }

    /**
     * Entity path
     */
    public readonly entityPaths!: pulumi.Output<string[]>;
    /**
     * Kafka properties
     */
    public readonly kafkaProperties!: pulumi.Output<outputs.EntityKafkaProperties>;
    /**
     * Kinesis properties
     */
    public readonly kinesisProperties!: pulumi.Output<outputs.EntityKinesisProperties>;
    /**
     * Postgres properties
     */
    public readonly postgresProperties!: pulumi.Output<outputs.EntityPostgresProperties>;
    /**
     * Snowflake properties
     */
    public readonly snowflakeProperties!: pulumi.Output<outputs.EntitySnowflakeProperties>;
    /**
     * Store name
     */
    public readonly store!: pulumi.Output<string>;

    /**
     * Create a Entity resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EntityArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EntityArgs | EntityState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EntityState | undefined;
            resourceInputs["entityPaths"] = state ? state.entityPaths : undefined;
            resourceInputs["kafkaProperties"] = state ? state.kafkaProperties : undefined;
            resourceInputs["kinesisProperties"] = state ? state.kinesisProperties : undefined;
            resourceInputs["postgresProperties"] = state ? state.postgresProperties : undefined;
            resourceInputs["snowflakeProperties"] = state ? state.snowflakeProperties : undefined;
            resourceInputs["store"] = state ? state.store : undefined;
        } else {
            const args = argsOrState as EntityArgs | undefined;
            if ((!args || args.entityPaths === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entityPaths'");
            }
            if ((!args || args.store === undefined) && !opts.urn) {
                throw new Error("Missing required property 'store'");
            }
            resourceInputs["entityPaths"] = args ? args.entityPaths : undefined;
            resourceInputs["kafkaProperties"] = args ? args.kafkaProperties : undefined;
            resourceInputs["kinesisProperties"] = args ? args.kinesisProperties : undefined;
            resourceInputs["postgresProperties"] = args ? args.postgresProperties : undefined;
            resourceInputs["snowflakeProperties"] = args ? args.snowflakeProperties : undefined;
            resourceInputs["store"] = args ? args.store : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Entity.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Entity resources.
 */
export interface EntityState {
    /**
     * Entity path
     */
    entityPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kafka properties
     */
    kafkaProperties?: pulumi.Input<inputs.EntityKafkaProperties>;
    /**
     * Kinesis properties
     */
    kinesisProperties?: pulumi.Input<inputs.EntityKinesisProperties>;
    /**
     * Postgres properties
     */
    postgresProperties?: pulumi.Input<inputs.EntityPostgresProperties>;
    /**
     * Snowflake properties
     */
    snowflakeProperties?: pulumi.Input<inputs.EntitySnowflakeProperties>;
    /**
     * Store name
     */
    store?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Entity resource.
 */
export interface EntityArgs {
    /**
     * Entity path
     */
    entityPaths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Kafka properties
     */
    kafkaProperties?: pulumi.Input<inputs.EntityKafkaProperties>;
    /**
     * Kinesis properties
     */
    kinesisProperties?: pulumi.Input<inputs.EntityKinesisProperties>;
    /**
     * Postgres properties
     */
    postgresProperties?: pulumi.Input<inputs.EntityPostgresProperties>;
    /**
     * Snowflake properties
     */
    snowflakeProperties?: pulumi.Input<inputs.EntitySnowflakeProperties>;
    /**
     * Store name
     */
    store: pulumi.Input<string>;
}
