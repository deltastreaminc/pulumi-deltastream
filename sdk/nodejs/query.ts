// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Query resource
 */
export class Query extends pulumi.CustomResource {
    /**
     * Get an existing Query resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QueryState, opts?: pulumi.CustomResourceOptions): Query {
        return new Query(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'deltastream:index/query:Query';

    /**
     * Returns true if the given object is an instance of Query.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Query {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Query.__pulumiType;
    }

    /**
     * Creation date of the query
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Owning role of the query
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * Query ID
     */
    public /*out*/ readonly queryId!: pulumi.Output<string>;
    /**
     * Query Name
     */
    public /*out*/ readonly queryName!: pulumi.Output<string>;
    /**
     * Query version
     */
    public /*out*/ readonly queryVersion!: pulumi.Output<number>;
    /**
     * Fully qualified sink relation name
     */
    public readonly sinkRelationFqn!: pulumi.Output<string>;
    /**
     * List of fully qualified source relation names
     */
    public readonly sourceRelationFqns!: pulumi.Output<string[]>;
    /**
     * SQL statement to create the relation
     */
    public readonly sql!: pulumi.Output<string>;
    /**
     * State of the Relation
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Creation date of the query
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Query resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QueryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QueryArgs | QueryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as QueryState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["queryId"] = state ? state.queryId : undefined;
            resourceInputs["queryName"] = state ? state.queryName : undefined;
            resourceInputs["queryVersion"] = state ? state.queryVersion : undefined;
            resourceInputs["sinkRelationFqn"] = state ? state.sinkRelationFqn : undefined;
            resourceInputs["sourceRelationFqns"] = state ? state.sourceRelationFqns : undefined;
            resourceInputs["sql"] = state ? state.sql : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as QueryArgs | undefined;
            if ((!args || args.sinkRelationFqn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sinkRelationFqn'");
            }
            if ((!args || args.sourceRelationFqns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceRelationFqns'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["sinkRelationFqn"] = args ? args.sinkRelationFqn : undefined;
            resourceInputs["sourceRelationFqns"] = args ? args.sourceRelationFqns : undefined;
            resourceInputs["sql"] = args ? args.sql : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["queryId"] = undefined /*out*/;
            resourceInputs["queryName"] = undefined /*out*/;
            resourceInputs["queryVersion"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Query.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Query resources.
 */
export interface QueryState {
    /**
     * Creation date of the query
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Owning role of the query
     */
    owner?: pulumi.Input<string>;
    /**
     * Query ID
     */
    queryId?: pulumi.Input<string>;
    /**
     * Query Name
     */
    queryName?: pulumi.Input<string>;
    /**
     * Query version
     */
    queryVersion?: pulumi.Input<number>;
    /**
     * Fully qualified sink relation name
     */
    sinkRelationFqn?: pulumi.Input<string>;
    /**
     * List of fully qualified source relation names
     */
    sourceRelationFqns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SQL statement to create the relation
     */
    sql?: pulumi.Input<string>;
    /**
     * State of the Relation
     */
    state?: pulumi.Input<string>;
    /**
     * Creation date of the query
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Query resource.
 */
export interface QueryArgs {
    /**
     * Owning role of the query
     */
    owner?: pulumi.Input<string>;
    /**
     * Fully qualified sink relation name
     */
    sinkRelationFqn: pulumi.Input<string>;
    /**
     * List of fully qualified source relation names
     */
    sourceRelationFqns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SQL statement to create the relation
     */
    sql: pulumi.Input<string>;
}
