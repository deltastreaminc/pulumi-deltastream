// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DeltaStreamObjectArgs, DeltaStreamObjectState } from "./deltaStreamObject";
export type DeltaStreamObject = import("./deltaStreamObject").DeltaStreamObject;
export const DeltaStreamObject: typeof import("./deltaStreamObject").DeltaStreamObject = null as any;
utilities.lazyLoad(exports, ["DeltaStreamObject"], () => require("./deltaStreamObject"));

export { EntityArgs, EntityState } from "./entity";
export type Entity = import("./entity").Entity;
export const Entity: typeof import("./entity").Entity = null as any;
utilities.lazyLoad(exports, ["Entity"], () => require("./entity"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabasesResult } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetEntitiesArgs, GetEntitiesResult, GetEntitiesOutputArgs } from "./getEntities";
export const getEntities: typeof import("./getEntities").getEntities = null as any;
export const getEntitiesOutput: typeof import("./getEntities").getEntitiesOutput = null as any;
utilities.lazyLoad(exports, ["getEntities","getEntitiesOutput"], () => require("./getEntities"));

export { GetEntityDataArgs, GetEntityDataResult, GetEntityDataOutputArgs } from "./getEntityData";
export const getEntityData: typeof import("./getEntityData").getEntityData = null as any;
export const getEntityDataOutput: typeof import("./getEntityData").getEntityDataOutput = null as any;
utilities.lazyLoad(exports, ["getEntityData","getEntityDataOutput"], () => require("./getEntityData"));

export { GetNamespaceArgs, GetNamespaceResult, GetNamespaceOutputArgs } from "./getNamespace";
export const getNamespace: typeof import("./getNamespace").getNamespace = null as any;
export const getNamespaceOutput: typeof import("./getNamespace").getNamespaceOutput = null as any;
utilities.lazyLoad(exports, ["getNamespace","getNamespaceOutput"], () => require("./getNamespace"));

export { GetNamespacesArgs, GetNamespacesResult, GetNamespacesOutputArgs } from "./getNamespaces";
export const getNamespaces: typeof import("./getNamespaces").getNamespaces = null as any;
export const getNamespacesOutput: typeof import("./getNamespaces").getNamespacesOutput = null as any;
utilities.lazyLoad(exports, ["getNamespaces","getNamespacesOutput"], () => require("./getNamespaces"));

export { GetObjectArgs, GetObjectResult, GetObjectOutputArgs } from "./getObject";
export const getObject: typeof import("./getObject").getObject = null as any;
export const getObjectOutput: typeof import("./getObject").getObjectOutput = null as any;
utilities.lazyLoad(exports, ["getObject","getObjectOutput"], () => require("./getObject"));

export { GetObjectsArgs, GetObjectsResult, GetObjectsOutputArgs } from "./getObjects";
export const getObjects: typeof import("./getObjects").getObjects = null as any;
export const getObjectsOutput: typeof import("./getObjects").getObjectsOutput = null as any;
utilities.lazyLoad(exports, ["getObjects","getObjectsOutput"], () => require("./getObjects"));

export { GetSchemaRegistriesResult } from "./getSchemaRegistries";
export const getSchemaRegistries: typeof import("./getSchemaRegistries").getSchemaRegistries = null as any;
export const getSchemaRegistriesOutput: typeof import("./getSchemaRegistries").getSchemaRegistriesOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistries","getSchemaRegistriesOutput"], () => require("./getSchemaRegistries"));

export { GetSchemaRegistryArgs, GetSchemaRegistryResult, GetSchemaRegistryOutputArgs } from "./getSchemaRegistry";
export const getSchemaRegistry: typeof import("./getSchemaRegistry").getSchemaRegistry = null as any;
export const getSchemaRegistryOutput: typeof import("./getSchemaRegistry").getSchemaRegistryOutput = null as any;
utilities.lazyLoad(exports, ["getSchemaRegistry","getSchemaRegistryOutput"], () => require("./getSchemaRegistry"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GetSecretsResult } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { GetStoreArgs, GetStoreResult, GetStoreOutputArgs } from "./getStore";
export const getStore: typeof import("./getStore").getStore = null as any;
export const getStoreOutput: typeof import("./getStore").getStoreOutput = null as any;
utilities.lazyLoad(exports, ["getStore","getStoreOutput"], () => require("./getStore"));

export { GetStoresResult } from "./getStores";
export const getStores: typeof import("./getStores").getStores = null as any;
export const getStoresOutput: typeof import("./getStores").getStoresOutput = null as any;
utilities.lazyLoad(exports, ["getStores","getStoresOutput"], () => require("./getStores"));

export { NamespaceArgs, NamespaceState } from "./namespace";
export type Namespace = import("./namespace").Namespace;
export const Namespace: typeof import("./namespace").Namespace = null as any;
utilities.lazyLoad(exports, ["Namespace"], () => require("./namespace"));

export * from "./provider";
import { Provider } from "./provider";

export { QueryArgs, QueryState } from "./query";
export type Query = import("./query").Query;
export const Query: typeof import("./query").Query = null as any;
utilities.lazyLoad(exports, ["Query"], () => require("./query"));

export { SchemaRegistryArgs, SchemaRegistryState } from "./schemaRegistry";
export type SchemaRegistry = import("./schemaRegistry").SchemaRegistry;
export const SchemaRegistry: typeof import("./schemaRegistry").SchemaRegistry = null as any;
utilities.lazyLoad(exports, ["SchemaRegistry"], () => require("./schemaRegistry"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { StoreArgs, StoreState } from "./store";
export type Store = import("./store").Store;
export const Store: typeof import("./store").Store = null as any;
utilities.lazyLoad(exports, ["Store"], () => require("./store"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "deltastream:index/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "deltastream:index/entity:Entity":
                return new Entity(name, <any>undefined, { urn })
            case "deltastream:index/namespace:Namespace":
                return new Namespace(name, <any>undefined, { urn })
            case "deltastream:index/object:DeltaStreamObject":
                return new DeltaStreamObject(name, <any>undefined, { urn })
            case "deltastream:index/query:Query":
                return new Query(name, <any>undefined, { urn })
            case "deltastream:index/schemaRegistry:SchemaRegistry":
                return new SchemaRegistry(name, <any>undefined, { urn })
            case "deltastream:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "deltastream:index/store:Store":
                return new Store(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("deltastream", "index/database", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/entity", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/namespace", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/object", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/query", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/schemaRegistry", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/secret", _module)
pulumi.runtime.registerResourceModule("deltastream", "index/store", _module)
pulumi.runtime.registerResourcePackage("deltastream", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:deltastream") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
